<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hb的博客站</title>
  
  
  <link href="https://useritem.github.io/atom.xml" rel="self"/>
  
  <link href="https://useritem.github.io/"/>
  <updated>2021-07-10T13:37:50.360Z</updated>
  <id>https://useritem.github.io/</id>
  
  <author>
    <name>〃不枉俗尘づ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nes</title>
    <link href="https://useritem.github.io/2021/07/10/nes/"/>
    <id>https://useritem.github.io/2021/07/10/nes/</id>
    <published>2021-07-10T13:37:23.000Z</published>
    <updated>2021-07-10T13:37:50.360Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>v-model双向绑定的实现</title>
    <link href="https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/v-model%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/v-model%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-07-10T12:44:54.000Z</published>
    <updated>2021-07-10T12:49:45.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>首先说明一下，vue.js的响应式原理实质上是<strong>单向行为</strong>，它仅是数据到DOM的映射，对于真正的数据双向绑定，则应该是：</p><p style="color: blueviolet; font-size: 15px;margin-top: 13px; font-weight: bolder">除了数据变化，会引起 DOM 的变化之外，还应该在操作 DOM 改变后，反过来影响数据的变化。</p><p>这其实就是v-model的作用了，但是它可以应用的标签有限，尽可以在<strong>一些特定的表单标签如 input、select、textarea 和自定义组件中使用</strong></p><p>之后分析普通表单元素和自定义组件两个方面来分别分析v-model的实现</p><h1 id="一、在普通表单元素上作用-v-model"><a href="#一、在普通表单元素上作用-v-model" class="headerlink" title="一、在普通表单元素上作用 v-model"></a>一、在普通表单元素上作用 v-model</h1><p>当普通表单元素上带有v-model时，例子:</p><pre><code>&lt;input v-model="searchText"/&gt;</code></pre><p>模板编译之后的render函数：</p><pre><code>import { vModelText as _vModelText, createVNode as _createVNode, withDirectives as _withDirectives, openBlock as _openBlock, createBlock as _createBlock } from "vue"export function render(_ctx, _cache, $props, $setup, $data, $options) {      return _withDirectives((_openBlock(), _createBlock("input", {        "onUpdate:modelValue": $event =&gt; (_ctx.searchText = $event)      }, null, 8 /* PROPS */, ["onUpdate:modelValue"])), [            [_vModelText, _ctx.searchText]      ])}</code></pre><p>编译之后的变化</p><ul><li>1、使用 withDirectives 给这个 vnode 添加了 vModelText 指令对象</li><li>2、额外传递了一个名为 onUpdate:modelValue 的 prop，它的值是一个函数，这个函数就是用来更新变量 searchText。</li></ul><p>对于vModelText 函数比较长，需要进行拆分</p><p>首先指令实现了两个钩子函数 – created与beforeUpdate</p><h3 id="created的实现："><a href="#created的实现：" class="headerlink" title="created的实现："></a>created的实现：</h3><pre><code>created(el, { value, modifiers: { lazy, trim, number } }, vnode) {el.value = value == null ? '' : valueel._assign = getModelAssigner(vnode)const castToNumber = number || el.type === 'number'addEventListener(el, lazy ? 'change' : 'input', e =&gt; {  if (e.target.composing)    return  let domValue = el.value  if (trim) {    domValue = domValue.trim()  }  else if (castToNumber) {    domValue = toNumber(domValue)  }  el._assign(domValue)})if (trim) {  addEventListener(el, 'change', () =&gt; {    el.value = el.value.trim()  })}if (!lazy) {  addEventListener(el, 'compositionstart', onCompositionStart)  addEventListener(el, 'compositionend', onCompositionEnd)}  },</code></pre><p>created的三个参数分别是：第一个参数 el 是节点的 DOM 对象，第二个参数是 binding 对象，第三个参数 vnode 是节点的 vnode 对象。</p><p>它的实现还是经典的三步走问题：</p><ul><li>首先把 v-model 绑定的值 value 赋值给 el.value，这个就是数据到 DOM 的单向流动；</li><li>接着通过 getModelAssigner 方法获取 props 中的 onUpdate:modelValue 属性对应的函数，赋值给 el._assign 属性；</li><li>最后通过 addEventListener 来监听 input 标签的事件，它会根据是否配置 lazy 这个修饰符来决定监听 input 还是 change 事件。</li></ul><p>我们接着看这个事件监听函数，当用户手动输入一些数据触发事件的时候，会执行函数，并通过 el.value 获取 input 标签新的值，然后调用 el._assign 方法更新数据，这就是 DOM 到数据的流动。</p><p>之后观察input v-model 支持的几个修饰符都分别代表什么含义。</p><h3 id="1、lazy-修饰符-–-是改变还是输入"><a href="#1、lazy-修饰符-–-是改变还是输入" class="headerlink" title="1、lazy 修饰符 – 是改变还是输入"></a>1、lazy 修饰符 – 是改变还是输入</h3><p>如果配置了 lazy 修饰符，那么监听的是 input 的 change 事件，它不会在input输入框实时输入的时候触发，而会在 input 元素值改变且失去焦点的时候触发。</p><p>如果不配置 lazy，监听的是 input 的 input 事件，它会在用户实时输入的时候触发。此外，还会多监听 compositionstart 和 compositionend 事件。</p><p>对于这两种事件</p><p>当用户在<strong>使用一些中文输入法</strong>的时候，会触发 compositionstart 事件，这个时候设置 e.target.composing 为 true，这样虽然 input 事件触发了，但是 input 事件的回调函数里判断了 e.target.composing 的值，如果为 true 则直接返回，不会把 DOM 值赋值给数据。</p><p>然后当用户从输入法中<strong>确定选中了一些数据完成输入后</strong>，会触发 compositionend 事件，这个时候判断 e.target.composing 为 true 的话则把它设置为 false，然后再手动触发元素的 input 事件，完成数据的赋值。</p><h3 id="2、trim-修饰符-–-是否去除首尾空格"><a href="#2、trim-修饰符-–-是否去除首尾空格" class="headerlink" title="2、trim 修饰符 – 是否去除首尾空格"></a>2、trim 修饰符 – 是否去除首尾空格</h3><p>如果配置了 trim 修饰符，那么会在 input 或者 change 事件的回调函数中，在获取 DOM 的值后，手动调用 trim 方法去除首尾空格。另外，还会额外监听 change 事件执行 el.value.trim() 把 DOM 的值的首尾空格去除。</p><h3 id="3、number-修饰符-–-是否把DOM的值变为number类型"><a href="#3、number-修饰符-–-是否把DOM的值变为number类型" class="headerlink" title="3、number 修饰符 – 是否把DOM的值变为number类型"></a>3、number 修饰符 – 是否把DOM的值变为number类型</h3><p>如果配置了 number 修饰符，或者 input 的 type 是 number，就会把 DOM 的值转成 number 类型后再赋值给数据。</p><p>接下来我们再来看一下 beforeUpdate 钩子函数的实现，非常简单，主要就是在组件更新前判断如果数据的值和 DOM 的值不同，则把数据更新到 DOM 上。</p><h1 id="二、在自定义组件上作用-v-model"><a href="#二、在自定义组件上作用-v-model" class="headerlink" title="二、在自定义组件上作用 v-model"></a>二、在自定义组件上作用 v-model</h1><p>举例说明：</p><pre><code>app.component('custom-input', {   //全局注册custom-input 自定义组件      props: ['modelValue'],      template: `        &lt;input v-model="value"&gt;      `,      computed: {        value: {          get() {            return this.modelValue          },          set(value) {            this.$emit('update:modelValue', value)          }    }      }})</code></pre><p>注意这里我们不能直接把 modelValue 作为 input 对应的 v-model 数据，因为不能直接对 props 的值修改，因此这里使用计算属性。</p><p>计算属性 value 对应的 getter 函数是直接取 modelValue 这个 prop 的值，而 setter 函数是派发一个自定义事件 update:modelValue。</p><p>之后我们使用时：</p><pre><code>&lt;custom-input v-model="searchText"/&gt;</code></pre><p>使用模板编译之后的render函数</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from "vue"export function render(_ctx, _cache, $props, $setup, $data, $options) {      const _component_custom_input = _resolveComponent("custom-input")          return (_openBlock(), _createBlock(_component_custom_input, {     modelValue: _ctx.searchText,    "onUpdate:modelValue": $event =&gt; (_ctx.searchText = $event)  }, null, 8 /* PROPS */, ["modelValue", "onUpdate:modelValue"]))}</code></pre><p>这里可以发现这里并没有调用 withDirective 函数，所以得出<strong>结果似乎与指令无关</strong></p><p>那修改一下实例呢？</p><pre><code>&lt;custom-input :modelValue="searchText" @update:modelValue="$event=&gt;{searchText = $event}"/&gt;</code></pre><p>编译之后的render函数</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from "vue"    export function render(_ctx, _cache, $props, $setup, $data, $options) {      const _component_custom_input = _resolveComponent("custom-input")      return (_openBlock(), _createBlock(_component_custom_input, {    modelValue: _ctx.searchText,            "onUpdate:modelValue": $event=&gt;{_ctx.searchText = $event}  }, null, 8 /* PROPS */, ["modelValue", "onUpdate:modelValue"]))}</code></pre><p>发现一样，因为 v-model 作用于组件上本质就是一个语法糖，就是往组件传入了一个名为 modelValue 的 prop，它的值是往组件传入的数据 data，另外它还在组件上监听了一个名为 update:modelValue 的自定义事件，事件的回调函数接受一个参数，执行的时候会把参数 $event 赋值给数据 data。</p><p>所以当我们自己实现自定义组件的v-model时，需要定义一个名为<strong>modelValue的prop</strong>，数据改变之后，派发一个名为 update:modelValue 的事件。</p><p>Vue.js 3.0 关于组件 v-model 的实现和 Vue.js 2.x 实现是很类似的，在 Vue.js 2.x 中，想要实现自定义组件的 v-model，首先需要定义一个名为 value 的 prop，然后在数据改变的时候，派发一个名为 input 的事件。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>，作用在组件上的 v-model 实际上就是一种打通数据双向通讯的语法糖，即外部可以往组件上传递数据，组件内部经过某些操作行为修改了数据，然后把更改后的数据再回传到外部。</p><p>v-model 在自定义组件的设计中非常常用， Element UI 几乎所有的表单组件都是通过 v-model 的方式完成了数据的交换。</p><p>需要注意的是：</p><p style="background-color: rgb(203, 235, 172); font-size: 15px;margin-top: 13px; font-weight: bolder;padding: 5px;">一旦我们使用了 v-model 的方式，我们必须在组件中申明一个 modelValue 的 prop，如果不想用这个 prop，想换个名字，当然也是可以的。</p><p>vue.js.3.0给组件的v-model提供了参数的方式，运行我们指定prop名称：</p><pre><code>&lt;custom-input v-model:text="searchText"/&gt;。</code></pre><p>编译之后的render：</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from "vue"export function render(_ctx, _cache, $props, $setup, $data, $options) {  const _component_custom_input = _resolveComponent("custom-input")  return (_openBlock(), _createBlock(_component_custom_input, {text: _ctx.searchText,"onUpdate:text": $event =&gt; (_ctx.searchText = $event)  }, null, 8 /* PROPS */, ["text", "onUpdate:text"])) //之前text是modelValue}</code></pre><p>重要变化在于我们往组件传递的 prop 变成了 text，监听的自定义事件也变成了 @update:text 了。</p><p>(不用在modelValue )</p><p>所以当v-model支持了参数，我们可以实现一个组件上的多个v-model</p><pre><code>&lt;ChildComponent v-model:title="pageTitle" v-model:content="pageContent" /&gt;</code></pre><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>v-model的本质就是语法糖：</p><p style="color: red; font-size: 18px;margin-top: 13px; font-weight: bolder">通过 prop 向组件传递数据，并监听自定义事件接受组件反传的数据并更新。</p><h1 id="三、自定义事件的派发"><a href="#三、自定义事件的派发" class="headerlink" title="三、自定义事件的派发"></a>三、自定义事件的派发</h1><p>从前面的示例我们知道，子组件会执行this.$emit(‘update:modelValue’,value)方法派发自定义事件，$emit 内部执行了 emit 方法，我们来看一下它的实现：</p><pre><code>    //组件的实例(执行 $emit 方法的组件实例),自定义事件的名称，事件传递的参数function emit(instance, event, ...args) {      const props = instance.vnode.props || EMPTY_OBJ      let handlerName = `on${capitalize(event)}`      let handler = props[handlerName]  if (!handler &amp;&amp; event.startsWith('update:')) {    handlerName = `on${capitalize(hyphenate(event))}`    handler = props[handlerName]  }  if (handler) {callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args)  }}</code></pre><p>其执行过程就是：</p><p>首先获取事件名称，把传递的 event 首字母大写，然后前面加上 on 字符串，比如我们前面派发的 update:modelValue 事件名称，处理后就变成了 onUpdate:modelValue。</p><p>接下来，通过这个事件名称，从 props 中根据事件名找到对应的 prop 值，作为事件的回调函数，如果找不到对应的 prop 并且 event 是以 <strong>update: 开头的</strong>，则尝试把 event 名先转成连字符形式然后再处理。</p><p>找到回调函数 handler 后，再去执行这个回调函数，并且把参数 args 传入。针对 v-model 场景，这个回调函数就是拿到子组件回传的数据然后修改父元素传入到子组件的 prop 数据，这样就达到了数据双向通讯的目的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;首先说明一下，vue.js的响应式原理实质上是&lt;strong&gt;单向行为&lt;/strong&gt;，它仅是数据到DOM的映射，对于真正的数据双向绑定，</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0更多特性实现" scheme="https://useritem.github.io/tags/vue3-0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>指令生命周期</title>
    <link href="https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/%E6%8C%87%E4%BB%A4%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/%E6%8C%87%E4%BB%A4%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-07-10T12:44:35.000Z</published>
    <updated>2021-07-10T12:49:45.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>Vue.js 的核心思想之一是<strong>数据驱动</strong>，数据是DOM的映射，所以大多是不用需要我们直接去操作DOM，但是当用户希望手动操作时，。比如元素节点挂载到页面的时候通过操作底层的 DOM 来做一些事情，也是可以的。</p><p>例子：聚焦输入框</p><p>我们希望在页面加载时，输入框自动获得焦点，我们可以全局注册一个 v-focus 指令：</p><pre><code>import Vue from 'vue'const app = Vue.createApp({})        // 注册全局 v-focus 指令app.directive('focus', {          // 挂载的钩子函数  mounted(el) {        el.focus()  }})</code></pre><p>我们也可以在组件内部局部注册：</p><pre><code>directives: {      focus: {        mounted(el) {              el.focus()            }         }    }</code></pre><p>之后我们就可以在模板中使用这个指令了</p><pre><code>&lt;input v-focus /&gt;。</code></pre><h1 id="指令实现原理"><a href="#指令实现原理" class="headerlink" title="指令实现原理"></a>指令实现原理</h1><h2 id="1、指令的定义"><a href="#1、指令的定义" class="headerlink" title="1、指令的定义"></a>1、指令的定义</h2><p>由于指令的本质就是一个JS对象，对象上挂着一些钩子函数</p><p>举例 —-&gt; 定义一个v-log指令，方法就是再指令的各个生命周期输出一些log信息</p><pre><code>const logDirective = {      beforeMount() {        console.log('log directive before mount')      },      mounted() {       console.log('log directive mounted')      },          beforeUpdate() {       console.log('log directive before update')      },      updated() {       console.log('log directive updated')      },      beforeUnmount() {       console.log('log directive beforeUnmount')      },      unmounted() {       console.log('log directive unmounted')      }}</code></pre><p>之后在创建应用后进行注册：</p><pre><code>import { createApp } from 'vue'import App from './App'const app = createApp(App)app.directive('log', logDirective)   //指令注册app.mount('#app')</code></pre><p>之后在APP组件使用：</p><pre><code>&lt;template&gt;      &lt;p v-if="flag"&gt;{{ msg }}&lt;/p&gt;      &lt;input v-else v-log v-model="text"/&gt;      &lt;button @click="flag=!flag"&gt;toggle&lt;/button&gt;&lt;/template&gt;&lt;script&gt;  export default {data() {  return {    flag: true,    msg: 'Hello Vue',    text: ''  }}  }&lt;/script&gt;</code></pre><p>当点击按钮后，会先执行指令定义的 beforeMount 和 mounted 钩子函数，然后你在 input 输入框中输入一些内容，会执行 beforeUpdate 和 updated 钩子函数，然后你再次点击按钮，会执行 beforeUnmount 和 unmounted 钩子函数。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p style="color: blueviolet; font-size: 15px;margin-top: 13px; font-weight: bolder">指令的定义，无非就是在合适的钩子函数中编写一些相关的处理逻辑。</p><h2 id="2、指令的注册-directive"><a href="#2、指令的注册-directive" class="headerlink" title="2、指令的注册 directive"></a>2、指令的注册 directive</h2><p>当我们编写好指令之后，需要进行注册，****所谓注册，其实就是把指令的定义保存到相应的地方，未来使用的时候我可以从保存的地方拿到它。</p><p>指令的注册与指令的注册一样，既可以全局也可以局部注册</p><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><pre><code>app.directive('focus', {      // 挂载的钩子函数      mounted(el) {        el.focus()      }})</code></pre><p>directive方法的实现如下：</p><pre><code>function createApp(rootComponent, rootProps = null) {      const context = createAppContext()       const app = {            _component: rootComponent,         _props: rootProps,                    // 指令名称，指令对象         directive(name, directive) {          if ((process.env.NODE_ENV !== 'production')) {                validateDirectiveName(name)              }          if (!directive) {                // 没有第二个参数，则获取对应的指令对象            return context.directives[name]      }  if ((process.env.NODE_ENV !== 'production') &amp;&amp; context.directives[name]) {    // 重复注册的警告    warn(`Directive "${name}" has already been registered in target app.`)  }  context.directives[name] = directive  return app}  }  return app}</code></pre><p>方法实际就是把指令对象注册到app对象创建的全局上下文context.directives中，把name当作key</p><p>validateDirectiveName 是用来检测指令名是否和内置的指令（如 v-model、v-show）冲突；如果不传第二个参数指令对象，表示这是一次指令的获取；指令重复注册会报警告。</p><h3 id="局部注册-–-直接在组件对象定义"><a href="#局部注册-–-直接在组件对象定义" class="headerlink" title="局部注册  – 直接在组件对象定义"></a>局部注册  – 直接在组件对象定义</h3><pre><code>directives: {      focus: {        mounted(el) {         el.focus()        }    }}</code></pre><p>全局注册与局部注册最大的差异在于</p><p style="background-color: aquamarine; font-size: 15px;margin-top: 13px; font-weight: bolder"> 一个保存在appContext中，另一个保存在组件对象的定中 </p><h2 id="3、组件的应用"><a href="#3、组件的应用" class="headerlink" title="3、组件的应用"></a>3、组件的应用</h2><p>以前面的input v-focus 为例，首先看这个模板编译后生成的 render 函数：</p><pre><code>import { resolveDirective as _resolveDirective, createVNode as _createVNode, withDirectives as _withDirectives, openBlock as _openBlock, createBlock as _createBlock } from "vue"    export function render(_ctx, _cache, $props, $setup, $data, $options) {      const _directive_focus = _resolveDirective("focus")  //指令的解析      return _withDirectives((_openBlock(), _createBlock("input", null, null, 512 /* NEED_PATCH */)), [            [_directive_focus]      ])}</code></pre><p>当我们不使用v-focus时，单个input渲染成的render是这样的：</p><pre><code>import { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from "vue"export function render(_ctx, _cache, $props, $setup, $data, $options) {  return (_openBlock(), _createBlock("input"))}</code></pre><p>对比发现，使用元素节点使用指令，那么它编译生成的vnode会用withDirectives 包装一层，但之前还应该先进行进行，所以</p><h3 id="先看指令解析函数-–-resolveDirective，"><a href="#先看指令解析函数-–-resolveDirective，" class="headerlink" title="先看指令解析函数 – resolveDirective，"></a>先看指令解析函数 – resolveDirective，</h3><p>由于指令的注册就是把定义的指令进行保存，所以resolveDirective函数需要<strong>根据指令的名称找到保存的对应指令对象</strong>，实现：</p><pre><code>const DIRECTIVES = 'directives';function resolveDirective(name) {      return resolveAsset(DIRECTIVES, name)}function resolveAsset(type, name, warnMissing = true) {          // 获取当前渲染实例  const instance = currentRenderingInstance || currentInstance  if (instance) {const Component = instance.typeconst res =  // 局部注册  resolve(Component[type], name) ||  // 全局注册  resolve(instance.appContext[type], name)if ((process.env.NODE_ENV !== 'production') &amp;&amp; warnMissing &amp;&amp; !res) {  warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`)}return res  }  else if ((process.env.NODE_ENV !== 'production')) {warn(`resolve${capitalize(type.slice(0, -1))} ` +  `can only be used in render() or setup().`)  }}function resolve(registry, name) {  return (registry &amp;&amp;(registry[name] ||  registry[camelize(name)] ||  registry[capitalize(camelize(name))]))}</code></pre><p>并且其内部调用了resolveAsset 函数，传入的类型名称为 directives 字符串。</p><h4 id="resolveAsset-函数进行解析查找："><a href="#resolveAsset-函数进行解析查找：" class="headerlink" title="resolveAsset 函数进行解析查找："></a>resolveAsset 函数进行解析查找：</h4><p>resolveAsset 内部先通过 resolve函数解析局部注册的资源，由于我们传入的是 directives，所以就从组件定义对象上的 directives 属性中查找对应 name 的指令，如果查找不到则通过 instance.appContext，也就是我们前面提到的全局的 appContext，根据其中的 name查找对应的指令。</p><p>所以至于resolveDirective 实现，还是主要进行查找与匹配</p><p>优先查找组件是否局部注册该指令，如果没有则看是否全局注册该指令，如果还找不到则在非生产环境下报警告，提示用户没有解析到该指令。如果你平时在开发工作中遇到这个警告，那么你很可能就是没有注册这个指令，或者是 name 写得不对。</p><p>在 resolve 函数实现的过程中，它会先根据 name 匹配，如果失败则把 name 变成驼峰格式继续匹配，还匹配不到则把 name 首字母大写后继续匹配，这么做是为了让用户编写指令名称的时候可以更加灵活，所以需要多判断几步用户可能编写的指令名称的情况。— 不同的命名方式的name都可以匹配</p><h3 id="再看withDirectives-的实现"><a href="#再看withDirectives-的实现" class="headerlink" title="再看withDirectives 的实现"></a>再看withDirectives 的实现</h3><pre><code>        // 第二个表示指令构成的数组function withDirectives(vnode, directives) {      const internalInstance = currentRenderingInstanceif (internalInstance === null) {(process.env.NODE_ENV !== 'production') &amp;&amp; warn(`withDirectives can only be used inside render functions.`)return vnode  }  const instance = internalInstance.proxy  const bindings = vnode.dirs || (vnode.dirs = [])  for (let i = 0; i &lt; directives.length; i++) {let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i]if (isFunction(dir)) {  dir = {    mounted: dir,    updated: dir  }}bindings.push({  dir,  instance,  value,  oldValue: void 0,  arg,  modifiers})  }  return vnode}</code></pre><p>withDirectives 其实就是给 vnode 添加了一个 dirs 属性，属性的值就是这个元素节点上的所有指令构成的对象数组。它通过对 directives 的遍历，拿到每一个指令对象以及指令对应的值 value、参数 arg、修饰符 modifiers 等，然后构造成一个 binding 对象，这个对象还绑定了组件的实例 instance。</p><p>主要目的在于</p><p style="background-color: rgb(203, 235, 172); font-size: 15px;margin-top: 13px; font-weight: bolder;padding: 5px;">在元素的生命周期中知道运行哪些指令相关的钩子函数，以及在运行这些钩子函数的时候，还可以往钩子函数中传递一些指令相关的参数。</p><h2 id="4、元素的生命周期中如何运行钩子函数"><a href="#4、元素的生命周期中如何运行钩子函数" class="headerlink" title="4、元素的生命周期中如何运行钩子函数"></a>4、元素的生命周期中如何运行钩子函数</h2><h3 id="元素挂载时执行的钩子函数-mountElement"><a href="#元素挂载时执行的钩子函数-mountElement" class="headerlink" title="元素挂载时执行的钩子函数 mountElement"></a>元素挂载时执行的钩子函数 mountElement</h3><p>先看元素挂载时所执行的指令的钩子函数，首先元素的挂载是通过mountElement执行的</p><pre><code>const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) =&gt; {      let el     const { type, props, shapeFlag, dirs } = vnode              // 创建 DOM 元素节点  el = vnode.el = hostCreateElement(vnode.type, isSVG, props &amp;&amp; props.is)  if (props) {    // 处理 props，比如 class、style、event 等属性  }  if (shapeFlag &amp; 8 /* TEXT_CHILDREN */) {// 处理子节点是纯文本的情况hostSetElementText(el, vnode.children)  }     else if (shapeFlag &amp; 16 /* ARRAY_CHILDREN */) {// 处理子节点是数组的情况，挂载子节点mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG &amp;&amp; type !== 'foreignObject', optimized || !!vnode.dynamicChildren)  }  if (dirs) {invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount')  }  // 把创建的 DOM 元素节点挂载到 container 上  hostInsert(el, container, anchor)  if (dirs) {queuePostRenderEffect(()=&gt;{   invokeDirectiveHook(vnode, null, parentComponent, 'mounted')})  }}</code></pre><p>此时我们发现在元素插入到容器之前会执行指令的 beforeMount 钩子函数，在插入元素之后，会通过 queuePostRenderEffect 的方式执行指令的 mounted 钩子函数。</p><p>而钩子函数的执行要靠 invokeDirectiveHook 方法完成的。它的是实现主要就是对遍历 vnode.dirs 数组的遍历：</p><pre><code>//参数表示新旧vnode，组件实例instance，钩子名称namefunction invokeDirectiveHook(vnode, prevVNode, instance, name) {      const bindings = vnode.dirs      const oldBindings = prevVNode &amp;&amp; prevVNode.dirs      for (let i = 0; i &lt; bindings.length; i++) {const binding = bindings[i]if (oldBindings) {  binding.oldValue = oldBindings[i].value}const hook = binding.dir[name]if (hook) {  callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [    vnode.el,    binding,    vnode,    prevVNode  ])    }  }}</code></pre><p>它进行遍历时，主要和就是找到每个指令对应的binding对象，之后从对象中由name找到指令定义对应的钩子函数。</p><p>如果定义了这个钩子函数则执行它，并且传入一些响应的参数，包括元素的 DOM 节点 el，binding 对象，新旧 vnode，这就是我们在执行指令钩子函数的时候，可以访问到这些参数的原因。</p><p>此外mounted 钩子函数会用 queuePostRenderEffect 包一层执行，这么做和组件的初始化过程执行 mounted 钩子函数一样，在整个应用 render 完毕后，同步执行 flushPostFlushCbs 的时候执行元素指令的 mounted 钩子函数。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>开始找元素挂载的mountElement 函数，其中执行指令的方式为queuePostRenderEffect 函数，并且执行还得靠其里面的invokeDirectiveHook </p><h3 id="元素更新所执行的指令的钩子函数"><a href="#元素更新所执行的指令的钩子函数" class="headerlink" title="元素更新所执行的指令的钩子函数"></a>元素更新所执行的指令的钩子函数</h3><p>对于元素更新，执行的是 patchElement 函数：</p><pre><code>const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) =&gt; {      const el = (n2.el = n1.el)      const oldProps = (n1 &amp;&amp; n1.props) || EMPTY_OBJ      const newProps = n2.props || EMPTY_OBJ      const { dirs } = n2                      // 更新 props      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG)      const areChildrenSVG = isSVG &amp;&amp; n2.type !== 'foreignObject'  if (dirs) {        invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate')  }                  // 更新子节点  patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG)  if (dirs) {queuePostRenderEffect(()=&gt;{  invokeDirectiveHook(vnode, null, parentComponent, 'updated')})  }}</code></pre><p>在元素指令调用时，在更新子节点之前会执行指令的 beforeUpdate 钩子函数，在更新完子节点之后，会通过 queuePostRenderEffect 的方式执行指令的 updated 钩子函数。</p><h3 id="元素卸载时执行的指令的钩子函数"><a href="#元素卸载时执行的指令的钩子函数" class="headerlink" title="元素卸载时执行的指令的钩子函数"></a>元素卸载时执行的指令的钩子函数</h3><p>元素卸载执行的是–unmount 函数</p><p>unmount 方法的主要思路就是用递归的方式去遍历删除自身节点和子节点。</p><p>在移除元素的子节点之前会执行指令的 beforeUnmount 钩子函数，在移除子节点和当前节点之后，会通过 queuePostRenderEffect 的方式执行指令的 unmounted 钩子函数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;Vue.js 的核心思想之一是&lt;strong&gt;数据驱动&lt;/strong&gt;，数据是DOM的映射，所以大多是不用需要我们直接去操作DOM，但是当</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0更多特性实现" scheme="https://useritem.github.io/tags/vue3-0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>插槽实现内容分发过程</title>
    <link href="https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/%E6%8F%92%E6%A7%BD%E5%AE%9E%E7%8E%B0%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <id>https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/%E6%8F%92%E6%A7%BD%E5%AE%9E%E7%8E%B0%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E8%BF%87%E7%A8%8B/</id>
    <published>2021-07-10T12:44:17.000Z</published>
    <updated>2021-07-10T12:49:45.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>对于实现组件的功能上讲，props可以让组件支持不同的配置来实现不同的功能。</p><p>但是如果我们希望子组件模板中的部分内容可以<strong>定制化</strong>，这个时候使用 Props 就显得不够灵活和易用了。</p><p>因此，Vue.js 受到 Web Component 草案的启发，通过插槽的方式实现<strong>内容分发</strong>，它允许我们在<strong>父组件</strong>中编写 DOM 并在子组件渲染时把 DOM 添加到子组件的插槽中，使用起来非常方便。</p><p>使用实例：</p><h3 id="1、单个插槽"><a href="#1、单个插槽" class="headerlink" title="1、单个插槽"></a>1、单个插槽</h3><pre><code>// child子组件：&lt;button class="todo-button"&gt;  &lt;slot&gt;&lt;/slot&gt;&lt;/button&gt;</code></pre><p>父组件中的使用：</p><pre><code>&lt;todo-button&gt;  &lt;!-- 添加一个字体图标 --&gt;  &lt;i class="icon icon-plus"&gt;&lt;/i&gt;  Add todo&lt;/todo-button&gt;</code></pre><p>其实就是在 todo-button 的标签内部去编写插槽中的 DOM 内容，最终子组件渲染的 HTML 是这样的：</p><pre><code>&lt;button class="todo-button"&gt;      &lt;!-- 添加一个字体图标 --&gt;      &lt;i class="icon icon-plus"&gt;&lt;/i&gt;      Add todo&lt;/button&gt;</code></pre><h3 id="2、多个插槽"><a href="#2、多个插槽" class="headerlink" title="2、多个插槽"></a>2、多个插槽</h3><p>设一共Layou布局组件：</p><pre><code>&lt;div class="layout"&gt;  &lt;header&gt;        &lt;slot name="header"&gt;&lt;/slot&gt;  &lt;/header&gt;  &lt;main&gt;&lt;slot&gt;&lt;/slot&gt;  &lt;/main&gt;  &lt;footer&gt;       &lt;slot name="footer"&gt;&lt;/slot&gt;  &lt;/footer&gt;&lt;/div&gt;</code></pre><p>我们在 Layout 组件中定义了多个插槽，并且其中两个插槽标签还添加了 name 属性（没有设置 name 属性则默认 name 是 default），然后我们在父组件中可以这么使用 Layout 组件：</p><pre><code>&lt;template&gt;  &lt;layout&gt;&lt;--v-slot 指令去把内部的 DOM 分发到子组件对应的插槽中--&gt;&lt;template v-slot:header&gt;  &lt;h1&gt;{{ header }}&lt;/h1&gt;&lt;/template&gt;&lt;template v-slot:default&gt;  &lt;p&gt;{{ main }}&lt;/p&gt; &lt;/template&gt;&lt;template v-slot:footer&gt;  &lt;p&gt;{{ footer }}&lt;/p&gt;&lt;/template&gt;  &lt;/layout&gt;  &lt;/template&gt;&lt;script&gt;  export default {data (){  return {    header: 'Here might be a page title',    main: 'A paragraph for the main content.',    footer: 'Here\'s some contact info'  }}  }&lt;/script&gt;</code></pre><p>渲染结果：</p><pre><code>&lt;div class="layout"&gt;  &lt;header&gt;&lt;h1&gt;Here might be a page title&lt;/h1&gt;  &lt;/header&gt;  &lt;main&gt;&lt;p&gt;A paragraph for the main content.&lt;/p&gt;  &lt;/main&gt;  &lt;footer&gt;&lt;p&gt;Here's some contact info&lt;/p&gt;  &lt;/footer&gt;&lt;/div&gt;</code></pre><h3 id="3、作用域插槽-父组件用子的数据"><a href="#3、作用域插槽-父组件用子的数据" class="headerlink" title="3、作用域插槽 - 父组件用子的数据"></a>3、作用域插槽 - 父组件用子的数据</h3><p>这个插槽作用在于父组件填充插槽内容的时候，使用子组件的一些数据。</p><p>还是举例：</p><p><strong>TodoList 子组件</strong>：</p><pre><code>&lt;template&gt;      &lt;ul&gt;        &lt;li v-for="(item, index) in items"&gt;          &lt;slot :item="item"&gt;&lt;/slot&gt;            &lt;/li&gt;      &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;      export default {        data() {          return {            items: ['Feed a cat', 'Buy milk']          }    }      }&lt;/script&gt;</code></pre><p>这里我们给 slot 标签加上了 item 属性，目的就是传递子组件中的 item 数据，然后我们可以在父组件中这么去使用 TodoList 组件：</p><pre><code>&lt;todo-list&gt;      &lt;template v-slot:default="slotProps"&gt;            &lt;i class="icon icon-check"&gt;&lt;/i&gt;            &lt;span class="green"&gt;{{ slotProps.item }}&lt;span&gt;  &lt;/template&gt;&lt;/todo-list&gt;</code></pre><p>这里的v-slot指令的值为slotProps,是一个对象，它的值包含了子组件往<strong>slot 标签中添加的 props</strong>，再看例子中。所以v-slot包含了slot属性，然后我们内部就可以使用的这个slotProps.item。</p><p>子组件渲染的HTMl如下：</p><pre><code>&lt;ul&gt;      &lt;li v-for="(item, index) in items"&gt;        &lt;i class="icon icon-check"&gt;&lt;/i&gt;     &lt;span class="green"&gt;{{ item }}&lt;span&gt;      &lt;/li&gt;&lt;/ul&gt;</code></pre><h1 id="插槽实现原理"><a href="#插槽实现原理" class="headerlink" title="插槽实现原理"></a>插槽实现原理</h1><h2 id="1、确定子组件渲染方法"><a href="#1、确定子组件渲染方法" class="headerlink" title="1、确定子组件渲染方法"></a>1、确定子组件渲染方法</h2><p>先想插槽特点：</p><p style="background-color: aquamarine; font-size: 15px;margin-top: 13px; font-weight: bolder">用父组件去编写子组件插槽部分的模板，之后子组件渲染时，再把其填充到子组件中去 --- 简要说明就是父写子</p><p>由于子需要父写，所以在父组件渲染阶段，子组件插槽部分的 DOM 是不能渲染的，需要通过某种方式保留下来，等到子组件渲染的时候再渲染。</p><p>对于其实现，可以想到创建vnode的createVNode函数，这个函数的的第三个参数，它表示创建的 vnode 子节点。这个函数的实现如下：</p><pre><code>function createVNode(type,props = null,children = null) {      if (props) {            // 处理 props 相关逻辑，标准化 class 和 style  }          // 对 vnode 类型信息编码          // 创建 vnode 对象      const vnode = {            type,         props        // 其他一些属性      }  // 标准化子节点，把不同数据类型的 children 转成数组或者文本类型  normalizeChildren(vnode, children)  return vnode}</code></pre><p>接下来来到了normalizeChildren函数的实现，它主要是处理传入的参数children。而它的主要作用就是标准化 children 以及获取 vnode 的节点类型 shapeFlag。</p><p>但是通常，我们创建 vnode 传入的子节点是一个数组，那么对于对象类型的子节点需要进行处理。</p><p>normalizeChildren 函数在处理插槽相关的逻辑时，可以发现，虽然vnode.children 仍然是传入的对象数据，而 vnode.shapeFlag 会与 slot 子节点类型 SLOTS_CHILDREN 进行或运算，由于 vnode 本身的 shapFlag 是 STATEFUL_COMPONENT，所以运算后的 shapeFlag 是 SLOTS_CHILDREN | STATEFUL_COMPONENT。</p><p>又因为 patch过程 中会根据 vnode 的 type 和 shapeFlag 来决定后续的执行逻辑，所以看看patch进行的选择：</p><pre><code>const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) =&gt; {  // 如果存在新旧节点, 且新旧节点类型不同，则销毁旧节点  if (n1 &amp;&amp; !isSameVNodeType(n1, n2)) {anchor = getNextHostNode(n1)unmount(n1, parentComponent, parentSuspense, true)n1 = null  }const { type, shapeFlag } = n2switch (type) {case Text:  // 处理文本节点  breakcase Comment:  // 处理注释节点  breakcase Static:  // 处理静态节点  breakcase Fragment:  // 处理 Fragment 元素  breakdefault:  if (shapeFlag &amp; 1 /* ELEMENT */) {    // 处理普通 DOM 元素  }  else if (shapeFlag &amp; 6 /* COMPONENT */) {    // 处理组件    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)  }  else if (shapeFlag &amp; 64 /* TELEPORT */) {    // 处理 TELEPORT  }  else if (shapeFlag &amp; 128 /* SUSPENSE */) {    // 处理 SUSPENSE  }  }}</code></pre><p>从type（组件对象）与shapeFlag（满足shapeFlag&amp;6）的值，进行判断；它会走到 processComponent 的逻辑，递归去渲染子组件。</p><p>至此，带有子节点插槽的组件与普通的组件渲染并无区别，还是通过递归的方式去渲染子组件。</p><h3 id="总结上文"><a href="#总结上文" class="headerlink" title="总结上文"></a>总结上文</h3><p>就是通过两个函数逻辑确定shapeFlag的值，再通过shapeFlag与type进行patch选择，确定子组件渲染方式就行了。</p><h2 id="2、渲染子组件"><a href="#2、渲染子组件" class="headerlink" title="2、渲染子组件"></a>2、渲染子组件</h2><p>渲染子组件的过程中，子组件的渲染逻辑主要在于setupComponent 的流程，其实现如下：</p><pre><code>function setupComponent (instance, isSSR = false) {      const { props, children, shapeFlag } = instance.vnode          // 判断是否是一个有状态的组件      const isStateful = shapeFlag &amp; 4              // 初始化 props      initProps(instance, props, isStateful, isSSR)              // 初始化插槽      initSlots(instance, children)              // 设置有状态的组件实例    const setupResult = isStateful        ? setupStatefulComponent(instance, isSSR)     : undefined  return setupResult}</code></pre><p>这里的 instance.vnode 就是组件 vnode，我们可以从中拿到子组件的实例、props 和 children 等数据。setupComponent 执行过程中会通过 initSlots 函数去初始化插槽，并传入 instance 和 children,initSlots实现方法如下：</p><pre><code>const initSlots = (instance, children) =&gt; {      if (instance.vnode.shapeFlag &amp; 32 /* SLOTS_CHILDREN */) {const type = children._if (type) {  instance.slots = children  def(children, '_', type)}else {  normalizeObjectSlots(children, (instance.slots = {}))    }}else {instance.slots = {}if (children) {  normalizeVNodeSlots(instance, children)        }}def(instance.slots, InternalObjectKey, 1)}    </code></pre><p>由于children表示的是前面传入的插槽对象的数据，所以这个函数的实际就是把它保留到 instance.slots 对象中，后续我们就可以从 instance.slots 拿到插槽的数据了。</p><h2 id="3、子组件把插槽数据进行渲染的过程-renderSlot"><a href="#3、子组件把插槽数据进行渲染的过程-renderSlot" class="headerlink" title="3、子组件把插槽数据进行渲染的过程 renderSlot"></a>3、子组件把插槽数据进行渲染的过程 renderSlot</h2><p>其实我们可以通过观察子组件编译之后的render函数发现，子组件的插槽部分的 DOM 主要通过 renderSlot 方法渲染生成的，其实现如下：</p><pre><code>function renderSlot(slots, name, props = {}, fallback) {      let slot = slots[name];       return (openBlock(),    createBlock(Fragment, { key: props.key }, slot ? slot(props) : fallback ? fallback() : [], slots._ === 1 /* STABLE */          ? 64 /* STABLE_FRAGMENT */          : -2 /* BAIL */));}</code></pre><p>它的参数 slots 就是 instance.slots（子组件初始化就有这个对象），第二个为name</p><p>其实现过程就是根据第二个参数 name 获取对应的插槽函数 slot，接着通过 createBlock 创建了 vnode 节点，注意，它的类型是一个 Fragment，children 是执行 slot 插槽函数的返回值。</p><p>slot函数的样子：</p><pre><code>{header: _withCtx(() =&gt; [_createVNode("h1", null, _toDisplayString(_ctx.header), 1 /* TEXT */)]),default: _withCtx(() =&gt; [_createVNode("p", null, _toDisplayString(_ctx.main), 1 /* TEXT */)]),footer: _withCtx(() =&gt; [_createVNode("p", null, _toDisplayString(_ctx.footer), 1 /* TEXT */)]),_: 1}   // 前缀表示name值进行选择</code></pre><p>看看其中的 _withCtx 函数，就是支持传入一个函数 fn 和执行的上下文变量 ctx，它的默认值是 currentRenderingInstance，也就是执行 render 函数时的当前组件实例。</p><p>withCtx 会返回一个新的函数，这个函数执行的时候，会先<strong>保存当前渲染的组件实例 owner</strong>，然后把 ctx 设置为当前渲染的组件实例，接着执行 fn，执行完毕后，再把之前的 owner 设置为当前组件实例。</p><p>这么做就是为了保证在子组件中渲染具体插槽内容时，它的渲染组件实例是父组件实例，这样也就保证它的数据作用域也是父组件的了。</p><p>所以说renderSlot 函数最终插槽对应的 vnode 渲染就变成了如下函数</p><pre><code>createBlock(Fragment, { key: props.key }, [_createVNode("h1", null, _toDisplayString(_ctx.header), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)</code></pre><p>我们的 vnode 的 type 是 Fragement，所以在执行 patch 的时候，会执行 processFragment 逻辑</p><pre><code>const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) =&gt; {      const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''))     const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''))      let { patchFlag } = n2      if (patchFlag &gt; 0) {        optimized = true  }      if (n1 == null) {           //插入节点// 先在前后插入两个空文本节点hostInsert(fragmentStartAnchor, container, anchor)hostInsert(fragmentEndAnchor, container, anchor)// 再挂载子节点mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized)} else {// 更新节点  }}</code></pre><p>我们只分析挂载子节点的过程，所以 n1 的值为 null，n2 就是我们前面创建的 vnode 节点，它的 children 是一个数组。</p><p>processFragment 函数首先通过 hostInsert 在容器的前后插入两个空文本节点，然后在以尾文本节点作为参考锚点，通过 mountChildren 把 children 挂载到 container 容器中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>插槽的实现实际上就是一种延时渲染，把父组件中编写的插槽内容保存到一个对象上，并且把具体渲染 DOM 的代码用函数的方式封装，然后在子组件渲染的时候，根据插槽名在对象中找到对应的函数，然后执行这些函数做真正的渲染。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;对于实现组件的功能上讲，props可以让组件支持不同的配置来实现不同的功能。&lt;/p&gt;
&lt;p&gt;但是如果我们希望子组件模板中的部分内容可以&lt;st</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0更多特性实现" scheme="https://useritem.github.io/tags/vue3-0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>props初始化以及更新</title>
    <link href="https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/props%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%96%B0/"/>
    <id>https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3.0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/props%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%A5%E5%8F%8A%E6%9B%B4%E6%96%B0/</id>
    <published>2021-07-10T12:43:48.000Z</published>
    <updated>2021-07-10T12:49:45.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>props实现了组件的使用者在外部传递（向外暴露，保证调用进行数据添加），保证组件内部可以顺利使用，例子：</p><p>有组件：</p><pre><code>&lt;div class="blog-post"&gt;      &lt;h1&gt;{{title}}&lt;/h1&gt;      &lt;p&gt;author: {{author}}&lt;/p&gt;&lt;/div&gt;&lt;script&gt;      export default {props: {  title: String,  author: String}  }&lt;/script&gt;</code></pre><p>外部使用时</p><pre><code>&lt;blog-post title="Vue3 publish" author="yyx"&gt;&lt;/blog-post&gt;</code></pre><p>需要注意的是Vue.js 3.0 在 props 的 API 设计上和 Vue.js 2.x 保持一致，底层实现有些不同：</p><h1 id="一、Props-的初始化-initProps"><a href="#一、Props-的初始化-initProps" class="headerlink" title="一、Props 的初始化 initProps"></a>一、Props 的初始化 initProps</h1><p>对于props的初始化，可以想到当时对Setup组件执行的初始化，之前的setupComponent函数会初始化Props：</p><pre><code>function setupComponent (instance, isSSR = false) {    const { props, children, shapeFlag } = instance.vnode              // 判断是否是一个有状态的组件      const isStateful = shapeFlag &amp; 4              // 初始化 props      initProps(instance, props, isStateful, isSSR)              // 初始化插槽      initSlots(instance, children)              // 设置有状态的组件实例      const setupResult = isStateful    ? setupStatefulComponent(instance, isSSR)    : undefined  return setupResult}</code></pre><p>对于initProps函数实现如下：（四步）</p><pre><code>function initProps(instance, rawProps, isStateful, isSSR = false) {    const props = {}      const attrs = {}      def(attrs, InternalObjectKey, 1)          // 1、设置 props 的值      setFullProps(instance, rawProps, props, attrs)          // 2、验证 props 合法      if ((process.env.NODE_ENV !== 'production')) {            validateProps(props, instance.type)      }      if (isStateful) {                // 3、有状态组件，响应式处理    instance.props = isSSR ? props : shallowReactive(props)      }  else {            // 4、函数式组件处理 --- 添加实例instance.props     if (!instance.type.props) {          instance.props = attrs}else {      instance.props = props}  }  // 普通属性赋值  instance.attrs = attrs}    </code></pre><p>由于我们只分析有状态组件的 Props 初始化过程，所以就默认 isStateful 的值是 true（所谓有状态组件，就是你平时通过对象的方式定义的组件）。</p><h2 id="1-设置-Props-setFullProps"><a href="#1-设置-Props-setFullProps" class="headerlink" title="1.设置 Props setFullProps"></a>1.设置 Props setFullProps</h2><p>对于设置props的setFullProps函数，首先需要注意的就是它的参数：(instance, rawProps, props, attrs)，含义如下</p><ul><li>instance 表示组件实例</li><li>rawProps 表示原始的 props 值，也就是创建 vnode 过程中传入的 props 数据</li><li>props 用于存储解析后的 props 数据</li><li>attrs 用于存储解析后的普通属性数据。</li></ul><p>至于setFullProps函数的执行，又又又是三步走 —&gt; 标准化 props 的配置，遍历 props 数据求值，以及对需要转换的 props 求值。</p><h3 id="（1）标准化-props-的配置-normalizePropsOptions"><a href="#（1）标准化-props-的配置-normalizePropsOptions" class="headerlink" title="（1）标准化 props 的配置 normalizePropsOptions"></a>（1）标准化 props 的配置 normalizePropsOptions</h3><p>normalizePropsOptions 主要目的是标准化 props 的配置，这里需要注意，你要区分 props 的配置和 props 的数据。</p><ul><li>props 的配置，就是你在定义组件时编写的 props 配置，它用来描述一个组件的 props 是什么样的；而</li><li>props 的数据，是父组件在调用子组件的时候，给子组件传递的数据。</li></ul><p>这个函数首先会处理 mixins 和 extends 这两个特殊的属性，因为它们的作用都是<strong>扩展组件的定义</strong>，所以需要对它们定义中的 props 递归执行 normalizePropsOptions。  – 先处理关于扩展的属性</p><p>再处理（1）数组形式的 props 定义，比如：</p><p>处理前：</p><pre><code>export default {      props: ['name', 'nick-name']}</code></pre><p>处理后： –字符串都变成驼峰形式作为 key，并为其每个值建一个对象</p><pre><code>export default {      props: {            name: {},        nickName: {}  }}</code></pre><p>（2）对象形式的props，比如</p><pre><code>export default {      title: String,      author: [String, Boolean] //String 和 Boolean 都是内置的构造器函数}</code></pre><p>处理之后</p><pre><code>export default {      props: {            title: {              type: String        },        author: {              type: [String, Boolean]        }      }}</code></pre><p>（3）判断一些 prop 是否需要转换</p><p>此时对于含有布尔类型的 prop 和有默认值的 prop 需要转换，这些 prop 的 key 保存在 needCastKeys 中。注意，这里会给 prop 添加两个特殊的 key，prop[0] 和 prop[1]赋值</p><p>（4）返回标准化结果normalizedEntry</p><p>它包含标准化后的 props 定义 normalized，以及需要转换的 props key needCastKeys，并且用 comp.__props 缓存这个标准化结果，如果对同一个组件重复执行 normalizePropsOptions，直接返回这个标准化结果即可。</p><h4 id="标准化目的"><a href="#标准化目的" class="headerlink" title="标准化目的"></a>标准化目的</h4><p>就是支持用户各种的 props 配置写法，标准化统一的对象格式为了后续统一处理。</p><p>回到setFullProps 的第二步：</p><h3 id="（2）遍历-props-数据求值"><a href="#（2）遍历-props-数据求值" class="headerlink" title="（2）遍历 props 数据求值"></a>（2）遍历 props 数据求值</h3><p>直接看setFullProps的执行</p><pre><code>function setFullProps(instance, rawProps, props, attrs) {      // 标准化 props 的配置  if (rawProps) {for (const key in rawProps) {  const value = rawProps[key]  // 一些保留的 prop 比如 ref、key 是不会传递的  if (isReservedProp(key)) {    continue  }  // 连字符形式的 props 也转成驼峰形式  let camelKey  if (options &amp;&amp; hasOwn(options, (camelKey = camelize(key)))) {    props[camelKey] = value  }  else if (!isEmitListener(instance.type, key)) {    // 非事件派发相关的，且不在 props 中定义的普通属性用 attrs 保留    attrs[key] = value  }}  }  // 转换需要转换的 props}</code></pre><p>实际就是遍历 rawProps，由于我们在第一步标准化的时候，已经把 props 定义的 key 转成了驼峰形式，所以也需要把 rawProps 的 key 转成驼峰形式，然后对比看 prop 是否在配置中定义。</p><p>如果 rawProps 中的 prop 在配置中定义了，那么把它的值赋值到 props 对象（放置props数据）中，如果不是，那么判断这个 key 是否为非事件派发相关，如果是那么则把它的值赋值到 attrs 对象（放置普通数据）中。</p><p>另外，在遍历的过程中，遇到 key、ref 这种 key，则直接跳过。（只看prop）</p><h3 id="（3）对需要转换的-props-求值"><a href="#（3）对需要转换的-props-求值" class="headerlink" title="（3）对需要转换的 props 求值"></a>（3）对需要转换的 props 求值</h3><p>  if (needCastKeys) {<br>    // 需要做转换的 props<br>    const rawCurrentProps = toRaw(props)<br>    for (let i = 0; i &lt; needCastKeys.length; i++) {<br>      const key = needCastKeys[i]<br>      props[key] = resolvePropValue(options, rawCurrentProps, key, rawCurrentProps[key])<br>    }<br>  }</p><p>在第一步在 normalizePropsOptions 的时候，我们拿到了需要转换的 props 的 key，接下来就是遍历 needCastKeys，依次执行 resolvePropValue 方法来求值</p><p>至于resolvePropValue函数就是进行转换的函数，一共两种情况</p><ul><li>第一种是默认值的情况，即我们在 prop 配置中定义了默认值，并且父组件没有传递数据的情况，这里 prop 对应的值就取默认值。</li><li>是布尔类型的值，前面我们在 normalizePropsOptions 的时候已经给 prop 的定义添加了两个特殊的 key，所以 opt[0] 为 true 表示这是一个含有 Boolean 类型的 prop，然后判断是否有传对应的值，如果不是且没有默认值的话，就直接转成 false，举个例子</li></ul><h3 id="总结props-的转换求值的目的"><a href="#总结props-的转换求值的目的" class="headerlink" title="总结props 的转换求值的目的"></a>总结props 的转换求值的目的</h3><p style="background-color: aquamarine; font-size: 15px;margin-top: 13px; font-weight: bolder">它的主要目的就是对 props 求值，然后把求得的值赋值给 props 对象和 attrs 对象中</p><h2 id="2、验证-props-validateProps"><a href="#2、验证-props-validateProps" class="headerlink" title="2、验证 props  validateProps"></a>2、验证 props  validateProps</h2><p>对于这个流程在初始化函数initProps 实现就是if判断validateProps函数</p><pre><code> // 验证 props 合法  if ((process.env.NODE_ENV !== 'production')) {        validateProps(props, instance.type)  }</code></pre><p>validateProps就是用来检测前面求得的 props 值是否合法，它就是对标准化后的 Props 配置对象进行遍历，拿到每一个配置 opt，然后执行 validateProp 验证。</p><p>对于单个 Prop 的配置，我们除了配置它的类型 type，还可以配置 required 表明它的必要性，以及 validator 自定义校验器，举个例子：</p><pre><code>export default {      props: {         value: {          type: Number,          required: true,          validator(val) {        return val &gt;= 0      }    }  }}</code></pre><p>因此 validateProp 首先验证 required 的情况，一旦 prop 配置了 required 为 true，那么必须给它传值，否则会报警告。</p><p>接着是验证 prop 值的类型，由于 prop 定义的 type 可以是多个类型的数组，那么只要 prop 的值匹配其中一种类型，就是合法的，否则会报警告。</p><p>最后是验证如果配了自定义校验器 validator，那么 prop 的值必须满足自定义校验器的规则，否则会报警告。</p><p>相信这些警告你在平时的开发工作中或多或少遇到过，了解了 prop 的验证原理，今后再遇到这些警告，你就能知其然并知其所以然了。</p><h2 id="3、响应式处理"><a href="#3、响应式处理" class="headerlink" title="3、响应式处理"></a>3、响应式处理</h2><p>这部分主要就是把props变为响应式，并且添加到instance.props。</p><p>由于之前通过 setFullProps 求值赋值给 props 变量，并对 props 做了检测，接下来，就是把 props 变成响应式，并且赋值到组件的实例上。</p><p>实现如下：</p><pre><code>function initProps(instance, rawProps, isStateful, isSSR = false) {// 设置 props 的值// 验证 props 合法if (isStateful) {// 有状态组件，响应式处理instance.props = isSSR ? props : shallowReactive(props)  }else {// 函数式组件处理if (!instance.type.props) {  instance.props = attrs}else {  instance.props = props}}  // 普通属性赋值  instance.attrs = attrs}</code></pre><h2 id="4、Props-的更新"><a href="#4、Props-的更新" class="headerlink" title="4、Props 的更新"></a>4、Props 的更新</h2><p>这里的 Props 的更新主要是指 Props 数据的更新，它最直接的反应是会触发组件的重新渲染</p><p>举例：子组件child：</p><pre><code>&lt;template&gt;      &lt;div&gt;        &lt;p&gt;{{ msg }}&lt;/p&gt;      &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {props: {  msg: String}  }&lt;/script&gt;</code></pre><p>这个组件接收msg prop，之后会在模板中对其渲染，我们在父组件中的引入，定义如下：</p><pre><code>&lt;template&gt;      &lt;hello-world :msg="msg"&gt;&lt;/hello-world&gt;      &lt;button @click="toggleMsg"&gt;Toggle Msg&lt;/button&gt;&lt;/template&gt;&lt;script&gt;  import HelloWorld from './components/HelloWorld'  export default {components: { HelloWorld },data() {  return {    msg: 'Hello world'  }},methods: {  toggleMsg() {    this.msg = this.msg === 'Hello world' ? 'Hello Vue' : 'Hello world'  }}  }&lt;/script&gt;</code></pre><p>这时候给子组件child传入的是父组件定义的msg，所以Hello world会在子组件中显示出来。</p><p>之后点击按钮实现更新—–》点击实现msg的变化，触发父组件的重新渲染，且由于我们在模板中引用，所以子组件显示的字符串变为了Hello vue</p><p>对于组件的重新渲染，需要注意它会触发patch过程，然后遍历子节点递归 patch，那么遇到组件节点，会执行 updateComponent 方法</p><p>在这个函数过程中，会执行 shouldUpdateComponent 方法判断是否需要更新子组件，内部会对比 props，由于我们的 prop 数据 msg 由 Hello world 变成了 Hello Vue，值不一样所以 shouldUpdateComponent 会<strong>返回 true</strong>，这样就把新的子组件 vnode 赋值给 instance.next，然后执行 instance.update 触发子组件的重新渲染。</p><h3 id="组件重新渲染简要过程"><a href="#组件重新渲染简要过程" class="headerlink" title="组件重新渲染简要过程"></a>组件重新渲染简要过程</h3><p>所以简要就是由于shouldUpdateComponent返回true，所以把新的子组件 vnode 赋值给 instance.next，之后执行instance.next，造成了组件的重新渲染</p><p>对于执行 instance.update 函数，实际上是执行 componentEffect 组件副作用渲染函数：</p><p>这个函数执行之前，会判断是否有 instance.next,它代表新的组件 vnode，根据前面的逻辑 next 不为空，所以会执行 updateComponentPreRender 更新组件 vnode 节点信息，函数实现：</p><pre><code>const updateComponentPreRender = (instance, nextVNode, optimized) =&gt; {      nextVNode.component = instance      const prevProps = instance.vnode.props      instance.vnode = nextVNode      instance.next = null      updateProps(instance, nextVNode.props, prevProps, optimized)      updateSlots(instance, nextVNode.children)}</code></pre><p>这时又从updateComponentPreRender转到updateProps函数 进行更新 props 数据</p><p>updateProps 主要的目标就是把父组件渲染时求得的 props 新值，更新到子组件实例的 instance.props 中。</p><p>在编译阶段，我们除了捕获一些动态 vnode，也捕获了动态的 props，所以我们可以只去比对动态的 props 数据更新。</p><p>当然，如果不满足优化的条件，我们也可以通过 setFullProps 去全量比对更新 props，并且，由于新的 props 可能是动态的，因此会把那些不在新 props 中但存在于旧 props 中的值设置为 undefined。</p><h2 id="问题1：为什么-instance-props-需要变成响应式呢？"><a href="#问题1：为什么-instance-props-需要变成响应式呢？" class="headerlink" title="问题1：为什么 instance.props 需要变成响应式呢？"></a>问题1：为什么 instance.props 需要变成响应式呢？</h2><p>这因为我们也希望在子组件中可以监听 props 值的变化做一些事情</p><p>举例说明：</p><pre><code>import { ref, h, defineComponent, watchEffect } from 'vue'const count = ref(0)let dummyconst Parent = {   //父组件      render: () =&gt; h(Child, { count: count.value })}const Child = defineComponent({  //子组件  props: { count: Number },  //定义数据  setup(props) {watchEffect(() =&gt; {  dummy = props.count})return () =&gt; h('div', props.count)  }})count.value++</code></pre><p>需要注意的是除了在渲染模板中引用了 count，我们在 setup 函数中通过了** watchEffect 注册了一个回调函数<strong>，内部依赖了 props.count，当修改 count.value 的时候，我们希望这个</strong>回调函数也能执行**，所以这个 prop 的值需要是响应式的，由于 setup 函数的第一个参数是props 变量，其实就是组件实例 instance.props，所以也就是要求 instance.props 是响应式的。</p><h2 id="问题2：为什么用-shallowReactive-API"><a href="#问题2：为什么用-shallowReactive-API" class="headerlink" title="问题2：为什么用 shallowReactive API"></a>问题2：为什么用 shallowReactive API</h2><p>它与普通的reactive函数主要在于，它在实现上就是不会递归执行 reactive，只劫持最外一层对象，内在主要区别在于主要区别是处理器函数不同。</p><p>hallowReactive 创建的 getter 函数，shallow 变量为 true，那么就不会执行后续的递归 reactive 逻辑。也就是说，shallowReactive 只把对象 target 的最外一层属性的访问和修改处理成响应式。</p><p>之所以可以这么做，是因为 props 在更新的过程中，只会修改最外层属性，所以用 shallowReactive 就足够了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;props实现了组件的使用者在外部传递（向外暴露，保证调用进行数据添加），保证组件内部可以顺利使用，例子：&lt;/p&gt;
&lt;p&gt;有组件：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0更多特性实现" scheme="https://useritem.github.io/tags/vue3-0%E6%9B%B4%E5%A4%9A%E7%89%B9%E6%80%A7%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>AST生成代码</title>
    <link href="https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/AST%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/AST%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</id>
    <published>2021-07-10T12:42:36.000Z</published>
    <updated>2021-07-10T12:49:45.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>当我们通过parse生成AST节点，再进行AST节点转换，通过语法分析，创建了语义和信息更加丰富的代码生成节点 codegenNode，这时候我们只要是实现<strong>代码生成</strong>就彻底完成了编译的过程。</p><p>这次还是以实例来展示代码生成的过程：</p><pre><code>&lt;div class="app"&gt;      &lt;hello v-if="flag"&gt;&lt;/hello&gt;          &lt;div v-else&gt;            &lt;p&gt;hello {{ msg + test }}&lt;/p&gt;            &lt;p&gt;static&lt;/p&gt;            &lt;p&gt;static&lt;/p&gt;          &lt;/div&gt;&lt;/div&gt;</code></pre><p>由于代码的生成是与配置相关的，所以此次我们分析的编译配置是：<strong>mode 为 module，prefixIdentifiers 开启，hoistStatic 开启</strong>，其他配置均不开启。</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p>在 AST 转换后，会执行 generate 函数生成代码：</p><pre><code>return generate(ast, extend({}, options, {      prefixIdentifiers}))</code></pre><p>这个函数所接收的就是转换后的AST根节点，于是我们开始分析这个函数的作用</p><h1 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h1><p>generate 主要做五件事情：创建代码生成上下文，生成预设代码，生成渲染函数，生成资源声明代码，以及生成创建 VNode 树的表达式。</p><h2 id="1、创建代码生成上下文-createCodegenContext"><a href="#1、创建代码生成上下文-createCodegenContext" class="headerlink" title="1、创建代码生成上下文 createCodegenContext"></a>1、创建代码生成上下文 createCodegenContext</h2><p>使用createCodegenContext函数创建并返回了context，其作用主要在于维护与封装。</p><p>它维护了 generate 过程的一些配置，比如 mode、prefixIdentifiers；也维护了 generate 过程的一些状态数据，比如当前生成的代码 code，当前生成代码的缩进 indentLevel 等。</p><p>它封装了在 generate 过程中可能会调用的一些辅助函数，常用的如下：</p><ul><li>push(code)，就是在当前的代码 context.code 后追加 code 来更新它的值。</li><li>indent()，它的作用就是增加代码的缩进，它会让上下文维护的代码缩进 context.indentLevel 加 1，内部会执行 newline 方法，添加一个换行符，以及两倍indentLevel 对应的空格来表示缩进的长度。</li><li>deindent()，和 indent 相反，它会减少代码的缩进，让上下文维护的代码缩进 context.indentLevel 减 1，在内部会执行 newline 方法去添加一个换行符，并减少两倍indentLevel 对应的空格的缩进长度。</li></ul><p>之后开始真正开始代码生成：</p><h2 id="2、生成预设代码"><a href="#2、生成预设代码" class="headerlink" title="2、生成预设代码"></a>2、生成预设代码</h2><p>因为 mode 是 module，所以会执行 genModulePreamble 生成预设代码，genModulePreamble函数实现</p><pre><code>function genModulePreamble(ast, context, genScopeId) {  const { push, newline, optimizeBindings, runtimeModuleName } = context  // 处理 scopeId  if (ast.helpers.length) { // 生成 import 声明代码if (optimizeBindings) {  push(`import { ${ast.helpers    .map(s =&gt; helperNameMap[s])    .join(', ')} } from ${JSON.stringify(runtimeModuleName)}\n`)  push(`\n// Binding optimization for webpack code-split\nconst ${ast.helpers    .map(s =&gt; `_${helperNameMap[s]} = ${helperNameMap[s]}`)    .join(', ')}\n`)}else {  push(`import { ${ast.helpers    .map(s =&gt; `${helperNameMap[s]} as _${helperNameMap[s]}`)    .join(', ')} } from ${JSON.stringify(runtimeModuleName)}\n`)}  }  // 处理 ssrHelpers  // 处理 imports  // 处理 scopeId  genHoists(ast.hoists, context)  newline()  push(`export `)}</code></pre><p>在 Vue.js 2.x 中，创建 VNode 的方法比如 $createElement、_c 这些都是挂载在组件的实例上，在生成渲染函数的时候，直接从组件实例 vm 中访问这些方法即可。</p><p>而到了 Vue.js 3.0，创建 VNode 的方法 createVNode 是直接通过模块的方式导出，其它方法比如 resolveComponent、openBlock ，都是类似的，所以我们首先需要生成这些 import 声明的预设代码。</p><p>对于genHoists 函数就是通过执行 newline 生成一个空行，然后遍历 hoists 数组，生成静态提升变量定义的方法。遍历完hoists</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)</code></pre><p>回到 genModulePreamble，接着会执行newline()和push(export )，非常好理解，也就是添加了一个空行和 export 字符串：</p><pre><code>//预设完毕得到import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export </code></pre><h2 id="3、生成渲染函数"><a href="#3、生成渲染函数" class="headerlink" title="3、生成渲染函数"></a>3、生成渲染函数</h2><p>这时候需要我们回到generate函数</p><pre><code>if (!ssr) {    push(`function render(_ctx, _cache) {`);}else {    push(`function ssrRender(_ctx, _push, _parent, _attrs) {`);}indent();</code></pre><p>由于ssr为false，所以生成：</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {</code></pre><p>注意，<strong>这里代码的最后一行有 2 个空格的缩进</strong>。</p><p>另外，由于 useWithBlock 为 false，所以我们也不需生成 with 相关的代码。而且，这里我们创建了 render 的函数声明，接下来的代码都是在生成 <strong>render 的函数体</strong>。</p><h2 id="4、生成资源声明代码-genAssets"><a href="#4、生成资源声明代码-genAssets" class="headerlink" title="4、生成资源声明代码  genAssets"></a>4、生成资源声明代码  genAssets</h2><p>在 render 函数体的内部，我们首先要生成资源声明代码：</p><pre><code>// 生成自定义组件声明代码if (ast.components.length) {      genAssets(ast.components, 'component', context);  if (ast.directives.length || ast.temps &gt; 0) {    newline();  }}// 生成自定义指令声明代码if (ast.directives.length) {      genAssets(ast.directives, 'directive', context);  if (ast.temps &gt; 0) {    newline();  }}// 生成临时变量代码if (ast.temps &gt; 0) {      push(`let `);  for (let i = 0; i &lt; ast.temps; i++) {        push(`${i &gt; 0 ? `, ` : ``}_temp${i}`);      }    }</code></pre><p>注意本例中directives 数组长度为 0，temps 的值是 0，所以自定义指令和临时变量代码生成的相关逻辑跳过，而这里 components的值是[“hello”]。</p><p>这时我们讨论其中的genAssets函数：</p><pre><code>function genAssets(assets, type, { helper, push, newline }) {  const resolver = helper(type === 'component' ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE)      for (let i = 0; i &lt; assets.length; i++) {        const id = assets[i]        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)})`)        if (i &lt; assets.length - 1) {              newline()        }      }}</code></pre><p> helper 函数就是从前面提到的 helperNameMap 中查找对应的字符串，对于 component，返回的就是 resolveComponent。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>之后遍历 assets 数组，生成自定义组件声明代码，在这个过程中，它们会把变量通过 toValidAssetId 进行一层包装：</p><pre><code>function toValidAssetId(name, type) {      return `_${type}_${name.replace(/[^\w]/g, '_')}`;}   \\  就是填了一个标签，比如 hello 组件，执行 toValidAssetId 就变成了 _component_hello。</code></pre><p>本例处理完之后变为：</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {      const _component_hello = _resolveComponent("hello")</code></pre><p>也就是通过resolveComponent，我们就可以解析到注册的自定义组件对象，然后在后面创建组件 vnode 的时候当做参数传入。</p><p>回到 generate 函数，接下来会执行如下代码：</p><pre><code>if (ast.components.length || ast.directives.length || ast.temps) {      push(`\n`);       newline();}if (!ssr) {       push(`return `);} </code></pre><p>作用在于如果生成了资源声明代码，则在尾部添加一个换行符，然后再生成一个空行，并且如果不是 ssr，则再添加一个 return 字符串。</p><p>此时本例得到的代码结果如下：</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {      const _component_hello = _resolveComponent("hello")      return </code></pre><h2 id="5、生成创建-VNode-树的表达式-genNode"><a href="#5、生成创建-VNode-树的表达式-genNode" class="headerlink" title="5、生成创建 VNode 树的表达式 genNode"></a>5、生成创建 VNode 树的表达式 genNode</h2><p>此时在generate 函数执行为：</p><pre><code>if (ast.codegenNode) {      genNode(ast.codegenNode, context);}else {      push(`null`);}</code></pre><p>前面我们在转换过程中给根节点添加了 codegenNode，之后探究genNode函数：</p><p>就是根据不同的节点类型，疯狂讨论，一直switch case。。。由于有十几种情况，所以此时以实例为主</p><p>先对codegenNode 的值进行讨论：</p><pre><code>{      type: 13, /* VNODE_CALL */     tag: "div",      children: [         // 子节点      ],     props: {        // 属性表达式节点      },     directives: undefined,      disableTracking: false,      dynamicProps: undefined,      isBlock: true,      patchFlag: undefined}</code></pre><p>看type值，从genNode函数case找，发现执行的是genVNodeCall 进行vnode代码创建，这个函数实现原理如下：</p><pre><code>function genVNodeCall(node, context) {      const { push, helper, pure } = context       const { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking } = node  if (directives) {    push(helper(WITH_DIRECTIVES) + `(`)  }  if (isBlock) {    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `)  }  if (pure) {    push(PURE_ANNOTATION)  }  push(helper(isBlock ? CREATE_BLOCK : CREATE_VNODE) + `(`, node)  genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context)  push(`)`)  if (isBlock) {    push(`)`)  }  if (directives) {        push(`, `)     genNode(directives, context)     push(`)`)    } }</code></pre><p>还是以本实例看，由于，directives 没定义，不用处理，isBlock 为 true，disableTracking 为 false，所以生成的Block如下：</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {      const _component_hello = _resolveComponent("hello")      return (_openBlock()</code></pre><p>之后就是判断，先判断 <strong>pure</strong> 是否为 true，如果是则生成相关的注释，虽然这里的 pure 为 false，但是之前我们在生成静态提升变量相关代码的时候 pure 为 true，所以生成了注释代码 /#PURE/。</p><p>再判断 isBlock，如果它为 true 则在生成创建 Block 相关代码，如果它为 false，则生成创建 VNode 的相关代码。由于其为true，所以Block代码如下：</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {      const _component_hello = _resolveComponent("hello")        return (_openBlock(), _createBlock(</code></pre><p>就是多了一个_createBlock，其调用之后就需要生成函数的参数，通过如下代码生成：</p><pre><code>genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context)</code></pre><p>而对于genNullableArgs 方法很简单，就是倒序遍历参数数组，找到第一个不为空的参数，然后返回该<strong>参数前面的所有参数构成的新数组</strong>。</p><pre><code>function genNullableArgs(args) {      let i = args.length  while (i--) {    if (args[i] != null)      break  }  return args.slice(0, i + 1).map(arg =&gt; arg || `null`)}</code></pre><p>对于这个args数组的参数，传入顺序依次是 tag、props、children、patchFlag 和 dynamicProps</p><p>对于我们的示例而言，此时 patchFlag 和 dynamicProps 为 undefined，所以 genNullableArgs 返回的是一个[tag, props, children]这样的数组（就是标签，属性与子节点）。</p><p>我们的目标在于生成类似代码：</p><pre><code>_createBlock(tag, props, children)</code></pre><p>之后再通过 genNodeList 来生成参数相关的代码，</p><p>这个函数就是就是通过遍历 nodes，拿到每一个 node，然后判断 node 的类型，如果 node 是字符串，就直接添加到代码中；如果是一个数组，则执行 genNodeListAsArray 生成数组形式的代码，否则是一个对象，则递归执行 genNode 生成节点代码。（实现nodes的添加）</p><p>nodes添加完是这个酱子的：</p><pre><code>['div', {      type: 4, /* SIMPLE_EXPRESSION */      content: '_hoisted_1',      isConstant: true,      isStatic: false,      hoisted: {        // 对象表达式节点    },  },  [{  type: 9, /* IF */  branches: [    // v-if 解析出的 2 个分支对象  ],  codegenNode: {    // 代码生成节点  }}  ]]</code></pre><h3 id="之后根据node元素值讨论："><a href="#之后根据node元素值讨论：" class="headerlink" title="之后根据node元素值讨论："></a>之后根据node元素值讨论：</h3><h4 id="第一个元素"><a href="#第一个元素" class="headerlink" title="第一个元素"></a>第一个元素</h4><p>首先 nodes 第一个元素的值是 ‘div’ 字符串，根据前面的逻辑，直接把字符串添加到代码上即可，由于 multilines 为 false，comma 为 true，因此生成如下代码：</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {      const _component_hello = _resolveComponent("hello")      return (_openBlock(), _createBlock("div"</code></pre><h4 id="第二个元素"><a href="#第二个元素" class="headerlink" title="第二个元素"></a>第二个元素</h4><p>nodes 第二个元素，它代表的是 vnode 的属性 props，是一个简单的对象表达式，就会递归执行 genNode，进一步执行 genExpression：</p><pre><code>function genExpression(node, context) {  //往代码中添加 content 的内容      const { content, isStatic } = node      context.push(isStatic ? JSON.stringify(content) : content, node)}   // node 中的 content 值是 _hoisted_1，再回到 genNodeList，由于 multilines 为 false，comma 为 true</code></pre><p>之后生成的代码为</p><pre><code>return (_openBlock(), _createBlock("div", _hoisted_1,  //其余的一样不再赘述</code></pre><h4 id="第三个元素"><a href="#第三个元素" class="headerlink" title="第三个元素"></a>第三个元素</h4><p>第三个元素，它代表的是子节点 chidren，是一个数组，那么会执行 genNodeListAsArray，来看它的实现：</p><pre><code>function genNodeListAsArray(nodes, context) {      const multilines = nodes.length &gt; 3 || nodes.some(n =&gt; isArray(n) || !isText$1(n))      context.push(`[`)      multilines &amp;&amp; context.indent()      genNodeList(nodes, context, multilines);      multilines &amp;&amp; context.deindent()      context.push(`]`)}</code></pre><p>genNodeListAsArray 主要是把一个 node 列表生成一个类似数组形式的代码，所以前后会添加中括号，并且判断是否要生成多行代码，如果是多行，前后还需要<strong>加减代码的缩进</strong>，而中间部分的代码，则继续递归调用 genNodeList 生成。</p><p>那么针对我们的示例，此时参数 nodes 的值如下：</p><pre><code>[{type: 9, /* IF */branches: [  // v-if 解析出的 2 个分支对象],codegenNode: {  // 代码生成节点}  }]</code></pre><p>它是一个长度为 1 的数组，但是这个数组元素的类型是一个对象，所以 multilines 为 true。那么在执行 genNodeList 之前，生成的代码是这样的：</p><pre><code> return (_openBlock(), _createBlock("div", _hoisted_1, [</code></pre><h3 id="递归执行genNodeList"><a href="#递归执行genNodeList" class="headerlink" title="递归执行genNodeList"></a>递归执行genNodeList</h3><p>由于 nodes 数组只有一个对象类型的元素，则执行 genNode，并且这个对象的类型是 IF 表达式，回顾 genNode 的实现，此时会执行到genNode(node.codegenNode, context)，也就是取节点的 codegenNode</p><p>对于codegenNode是一个条件表达式节点，它主要包括 3 个重要的属性，其中 test 表示逻辑测试，它是一个表达式节点，consequent 表示主逻辑，它是一个 vnode 调用节点，alternate 表示备选逻辑，它也是一个 vnode 调用节点。</p><p>其实条件表达式节点要生成代码就是一个条件表达式，用伪代码表示是：</p><pre><code>test ? consequent : alternate。</code></pre><p>genNode 遇到条件表达式节点会执行 genConditionalExpression，这个函数主要目的就是生成条件表达式代码，所以首先它会生成逻辑测试的代码。对于示例，我们这里是一个简单表达式节点，所以生成的代码是这样的：</p><pre><code> return (_openBlock(), _createBlock("div", _hoisted_1, [(_ctx.flag)</code></pre><p>接下来就是生成一些换行和缩进，紧接着生成主逻辑代码，也就是把 consequent 这个 vnode 调用节点通过 genNode 转换生成代码。之后变为</p><pre><code>  return (_openBlock(), _createBlock("div", _hoisted_1, [(_ctx.flag)  ? _createVNode(_component_hello, { key: 0 })</code></pre><p>之后就是生成备选逻辑的代码，即把 alternate 这个 vnode 调用节点通过 genNode 转换生成代码，需要注意的是，<strong>alternate 对应的节点的 isBlock 属性是 true，所以会生成创建 Block 相关的代码</strong>，</p><pre><code>return (_openBlock(), _createBlock("div", _hoisted_1, [(_ctx.flag)  ? _createVNode(_component_hello, { key: 0 })  : (_openBlock(), _createBlock("div", _hoisted_2, [      _createVNode("p", null, "&gt;hello " + _toDisplayString(_ctx.msg + _ctx.test), 1 /* TEXT */),      _hoisted_3,      _hoisted_4    ]))</code></pre><p>之后回到 genNodeListAsArray 函数，处理完 children，那么下面就会减少缩进，并添加闭合的中括号，再回到 genNodeList，发现所有 nodes 也处理完了，则回到 genVNodeCall 函数，接下来的逻辑就是补齐函数调用的右括号，再回到generate 同样还是添加括号（四次回转），最终结果为</p><pre><code>import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = { class: "app" }const _hoisted_2 = { key: 1 }const _hoisted_3 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_4 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {      const _component_hello = _resolveComponent("hello")     return (_openBlock(), _createBlock("div", _hoisted_1, [(_ctx.flag)  ? _createVNode(_component_hello, { key: 0 })  : (_openBlock(), _createBlock("div", _hoisted_2, [      _createVNode("p", null, "hello " + _toDisplayString(_ctx.msg + _ctx.test), 1 /* TEXT */),      _hoisted_3,      _hoisted_4    ]))  ]))}</code></pre><p>这也是template 编译生成的最终代码，通过递归遇到不同类型的节点，执行相应的代码生成函数生成代码即可。</p><p> transform 的语法分析阶段生成的 codegenNode，所以节点生成代码的所需的信息可以从节点的属性中获取。</p><p>此外vue3.0在编译的过程设计了Block来创建vnode，这进行了一部分优化，之后分析其原理</p><h2 id="运行时优化-Block分析"><a href="#运行时优化-Block分析" class="headerlink" title="运行时优化 Block分析"></a>运行时优化 Block分析</h2><h3 id="构造openBlock-与-createBlock"><a href="#构造openBlock-与-createBlock" class="headerlink" title="构造openBlock 与 createBlock"></a>构造openBlock 与 createBlock</h3><p>首先看openBlock 的实现：</p><pre><code>const blockStack = []    //blockStack 表示一个 Block Treelet currentBlock = null    //当前Block treefunction openBlock(disableTracking = false) {      blockStack.push((currentBlock = disableTracking ? null : []));}</code></pre><p>至于openBlock函数，实现很简单，往当前 blockStack push 一个新的 Block，作为 currentBlock。</p><p>说明一些Block作用</p><p style="background-color: aquamarine; font-size: 15px;margin-top: 13px; font-weight: bolder">主要就是收集动态的 vnode 的节点，这样才能在 patch 阶段只比对这些动态 vnode 节点，避免不必要的静态节点的比对，优化了性能。</p><p>这里的动态收集vnode，主要是在createVNode 阶段，它会在最后进行判断：</p><pre><code> if (shouldTrack &gt; 0 &amp;&amp;!isBlockNode &amp;&amp;currentBlock &amp;&amp;patchFlag !== 32 /* HYDRATE_EVENTS */ &amp;&amp;(patchFlag &gt; 0 ||  shapeFlag &amp; 128 /* SUSPENSE */ ||  shapeFlag &amp; 64 /* TELEPORT */ ||  shapeFlag &amp; 4 /* STATEFUL_COMPONENT */ ||  shapeFlag &amp; 2 /* FUNCTIONAL_COMPONENT */)) {currentBlock.push(vnode);</code></pre><p>判断 vnode 是不是一个动态节点，如果是则把它添加到 currentBlock 中，这就是动态 vnode 节点的收集过程。</p><p>之后就是第二个设计到的createBlock ：</p><pre><code>function createBlock(type, props, children, patchFlag, dynamicProps) {  const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: 阻止这个 block 收集自身 */)  // 在 vnode 上保留当前 Block 收集的动态子节点  vnode.dynamicChildren = currentBlock || EMPTY_ARR  blockStack.pop() // 当前 Block 恢复到父 Block  currentBlock = blockStack[blockStack.length - 1] || null  // 节点本身作为父 Block 收集的子节点  if (currentBlock) {    currentBlock.push(vnode)  }  return vnode}</code></pre><p>这两个openBlock与createBlock函数设计原因在render（）上：</p><pre><code>function render() {      return (openBlock(),createBlock('div', null, [/*...*/]))}</code></pre><p>对于createBlock过程就是：</p><ul><li><p>首先会执行 createVNode 创建一个 vnode 节点，注意最后一个参数是 true，这表明它是一个 Block node，所以就不会把自身当作一个动态 vnode 收集到 currentBlock 中。</p></li><li><p>接着把收集动态子节点的 currentBlock 保留到当前的 Block vnode 的 dynamicChildren 中，为后续 patch 过程访问这些动态子节点所用。</p></li><li><p>最后把当前 Block 恢复到父 Block，如果父 Block 存在的话，则把当前这个 Block node 作为动态节点添加到父 Block 中。</p></li></ul><h3 id="2、在-patch-阶段的工作"><a href="#2、在-patch-阶段的工作" class="headerlink" title="2、在 patch 阶段的工作"></a>2、在 patch 阶段的工作</h3><p>在 patch 阶段更新节点元素的时候，会执行 patchElement 函数，我们再来回顾一下它的实现：</p><pre><code>const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) =&gt; {  const el = (n2.el = n1.el)  const oldProps = (n1 &amp;&amp; n1.props) || EMPTY_OBJ  const newProps = n2.props || EMPTY_OBJ          // 更新 props  patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG)  const areChildrenSVG = isSVG &amp;&amp; n2.type !== 'foreignObject'          // 更新子节点  if (n2.dynamicChildren) {        patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG);  }  else if (!optimized) {    patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG);  }}</code></pre><p>我们在前面组件更新的章节分析过这个流程，在分析子节点更新的部分，当时并没有考虑到优化的场景，所以只分析了全量比对更新的场景。</p><p>而实际上，如果这个 vnode 是一个 Block vnode，那么我们不用去通过 patchChildren 全量比对，只需要通过 patchBlockChildren 去比对并更新 Block 中的动态子节点即可。</p><p>它的具体实现就是patchBlockChildren 函数，即遍历新的动态子节点数组，拿到对应的新旧动态子节点，并执行 patch 更新子节点即可。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这样一来，更新的复杂度就变成和动态节点的数量正相关，而不与模板大小正相关，如果一个模板的动静比越低，那么性能优化的效果就越明显</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;当我们通过parse生成AST节点，再进行AST节点转换，通过语法分析，创建了语义和信息更加丰富的代码生成节点 codegenNode，这时</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="编译过程以及优化" scheme="https://useritem.github.io/tags/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>AST转换</title>
    <link href="https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/AST%E8%BD%AC%E6%8D%A2/"/>
    <id>https://useritem.github.io/2021/07/10/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/AST%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-07-10T12:42:30.000Z</published>
    <updated>2021-07-10T12:49:45.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>当对template进行解析之后，虽然它是对模板的完整描述，可惜它不能直接生成代码，因为它的语义化还不够，没有包含和编译优化的相关属性，所以还需要进一步转换。</p><p>但是AST的转换过程包含大量的分支逻辑，十分复杂，所以此次仅讨论例子中的代码逻辑：</p><pre><code>&lt;div class="app"&gt;      &lt;hello v-if="flag"&gt;&lt;/hello&gt;          &lt;div v-else&gt;            &lt;p&gt;&gt;hello {{ msg + test }}&lt;/p&gt;         &lt;p&gt;static&lt;/p&gt;         &lt;p&gt;static&lt;/p&gt;     &lt;/div&gt;&lt;/div&gt;</code></pre><p>这个模板我们先通过parse生成一个AST对象，之后我们通过 <strong>getBaseTransformPreset 方法</strong>获取节点和指令转换的方法，然后调用 <strong>transform 方法做 AST 转换</strong>，并且把这些节点和指令的转换方法作为配置的属性参数传入完成转换。</p><p>具体代码如下：</p><pre><code>        // 1、获取节点和指令转换的方法const [nodeTransforms, directiveTransforms] = getBaseTransformPreset()        // 2、AST 转换transform(ast, extend({}, options, { prefixIdentifiers,  nodeTransforms: [    ...nodeTransforms,    ...(options.nodeTransforms || []) // 用户自定义  transforms],  directiveTransforms: extend({}, directiveTransforms, options.directiveTransforms || {} // 用户自定义 transforms  )}))</code></pre><p>所以AST转换的过程实质就是两个函数：getBaseTransformPreset（）与 transform（）</p><p>先说一下getBaseTransformPreset函数，主要就是返回一推转换函数，方便后面的transform时候调用，于是重点来到了transform函数，它的实现：</p><pre><code>function transform(root, options) {            //1、创建 transform 上下文      const context = createTransformContext(root, options)            //2、遍历AST节点      traverseNode(root, context)    // 3、静态提升      if (options.hoistStatic) {            hoistStatic(root, context)      }     if (!options.ssr) {        createRootCodegen(root, context)  }    //4 、创建根代码生成节点  root.helpers = [...context.helpers]   root.components = [...context.components]   root.directives = [...context.directives]   root.imports = [...context.imports]  root.hoists = context.hoists  root.temps = context.temps   root.cached = context.cached}</code></pre><p>核心流程就是四步：</p><h1 id="transform-的核心流程"><a href="#transform-的核心流程" class="headerlink" title="transform 的核心流程"></a>transform 的核心流程</h1><h2 id="1、创建-transform-上下文"><a href="#1、创建-transform-上下文" class="headerlink" title="1、创建 transform 上下文"></a>1、创建 transform 上下文</h2><p>对于创建 transform 上下文的过程，其实和 parse 过程一样，主要就是createTransformContext函数的实现。</p><p>它所创建的上下文对象context主要就是维护作用此外还有一些需要的辅助函数以及修改context对象的方法。</p><p>维护就是—维护了transform过程的一些配置，比如上面的节点和指令的转换函数等，还维护了 transform 过程的一些状态数据，比如当前处理的 AST 节点，当前 AST 节点在子节点中的索引，以及当前 AST 节点的父节点等。</p><h2 id="2、遍历AST节点"><a href="#2、遍历AST节点" class="headerlink" title="2、遍历AST节点"></a>2、遍历AST节点</h2><p>这个过程比较重要，毕竟<strong>核心的转换过程就是来自于此</strong>，实现方法就是traverseNode函数：</p><pre><code>function traverseNode(node, context) {      context.currentNode = node          // 节点转换函数      const { nodeTransforms } = context      const exitFns = []      for (let i = 0; i &lt; nodeTransforms.length; i++) {            // 有些转换函数会设计一个退出函数，在处理完子节点后执行    const onExit = nodeTransforms[i](node, context)    if (onExit) {          if (isArray(onExit)) {                exitFns.push(...onExit)          }      else {        exitFns.push(onExit)      }    }if (!context.currentNode) {  // 节点被移除  return}else {  // 因为在转换的过程中节点可能被替换，恢复到之前的节点  node = context.currentNode}  }switch (node.type) {case 3 /* COMMENT */:  if (!context.ssr) {    // 需要导入 createComment 辅助函数    context.helper(CREATE_COMMENT)  }  breakcase 5 /* INTERPOLATION */:  // 需要导入 toString 辅助函数  if (!context.ssr) {    context.helper(TO_DISPLAY_STRING)  }  breakcase 9 /* IF */:  // 递归遍历每个分支节点  for (let i = 0; i &lt; node.branches.length; i++) {    traverseNode(node.branches[i], context)  }  breakcase 10 /* IF_BRANCH */:case 11 /* FOR */:case 1 /* ELEMENT */:case 0 /* ROOT */:  // 遍历子节点  traverseChildren(node, context)  break}// 执行转换函数返回的退出函数let i = exitFns.lengthwhile (i--) {exitFns[i]()  }}</code></pre><p>traverseNode 函数思路就是递归遍历 AST 节点，针对每个节点执行一系列的<strong>转换函数</strong>。</p><p>注意有些转换函数还会设计一个退出函数，当你执行转换函数后，它会返回一个新函数，然后在你<strong>处理完子节点</strong>后再执行这些退出函数，这是因为有些逻辑的处理需要依赖子节点的处理结果才能继续执行。</p><p>对于转换函数vue.js内置了8种，分别处理指令、表达式、元素节点、文本节点等不同的特性，此次仅讨论四种。</p><h3 id="1-Element-节点转换函数transformElement"><a href="#1-Element-节点转换函数transformElement" class="headerlink" title="1.Element 节点转换函数transformElement"></a>1.Element 节点转换函数transformElement</h3><p>只有当 AST 节点是组件或者普通元素节点时，才会返回一个退出函数，而且它会在该节点的子节点逻辑处理完毕后执行。</p><p>分析这个退出函数前，我们需要知道节点函数的转换目标，即<strong>创建一个实现 VNodeCall 接口的代码生成节点</strong>，也就是说，生成这个代码生成节点后，后续的代码生成阶段可以<strong>根据这个节点对象生成目标代码</strong>。</p><p>对于它的具体实现：</p><h4 id="1、判断这个节点是不是一个-Block-节点。"><a href="#1、判断这个节点是不是一个-Block-节点。" class="headerlink" title="1、判断这个节点是不是一个 Block 节点。"></a>1、判断这个节点是不是一个 Block 节点。</h4><p>前提</p><p>为了运行时的更新优化，Vue.js 3.0 设计了一个 Block tree 的概念。Block tree 是一个将模版基于动态节点指令<strong>切割的嵌套区块</strong>，每个区块只需要以一个 Array 来追踪自身包含的动态节点。</p><p>借助 Block tree，Vue.js 将 vnode 更新性能由与模版整体大小相关提升为与动态内容的数量相关，极大优化了 diff 的效率，模板的动静比越大，这个优化就会越明显。</p><h4 id="2、处理节点的-props"><a href="#2、处理节点的-props" class="headerlink" title="2、处理节点的 props"></a>2、处理节点的 props</h4><p>主要从 AST 节点的 props 对象中进一步解析出指令 vnodeDirectives、动态属性 dynamicPropNames，以及更新标识 patchFlag（表示节点更新类型）。</p><h4 id="3、处理节点的-children"><a href="#3、处理节点的-children" class="headerlink" title="3、处理节点的 children"></a>3、处理节点的 children</h4><p>对于一个组件节点而言，如果它有子节点，则说明是组件的插槽，另外还会有对一些内置组件比如 KeepAlive、Teleport 的处理逻辑。</p><p>对于一个普通元素节点，我们通常直接拿节点的 children 属性给 vnodeChildren 即可，但有一种特殊情况：</p><p style="color: burlywood; font-size: 15px;margin-top: 13px; font-weight: bolder">如果节点只有一个子节点，并且是一个普通文本节点、插值或者表达式，那么直接把节点赋值给 vnodeChildren。</p><h4 id="4、进一步处理"><a href="#4、进一步处理" class="headerlink" title="4、进一步处理"></a>4、进一步处理</h4><p>主要是对前面解析 props 求得的 patchFlag 和 dynamicPropNames 做进一步处理：</p><p>我们会根据 patchFlag 的值从 PatchFlagNames 中获取 flag 对应的名字，从而生成注释，因为 patchFlag 本身就是一个个数字，通过名字注释的方式，我们就可以一眼从最终生成的代码中了解到 patchFlag 代表的含义。</p><p>另外，我们还会把数组 dynamicPropNames 转化生成 vnodeDynamicProps 字符串，便于后续对节点生成代码逻辑的处理。</p><h4 id="5、-createVNodeCall-创建了实现-VNodeCall-接口的代码生成节点"><a href="#5、-createVNodeCall-创建了实现-VNodeCall-接口的代码生成节点" class="headerlink" title="5、 createVNodeCall 创建了实现 VNodeCall 接口的代码生成节点"></a>5、 createVNodeCall 创建了实现 VNodeCall 接口的代码生成节点</h4><pre><code>function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, loc = locStub) {if (context) {if (isBlock) {  context.helper(OPEN_BLOCK)  context.helper(CREATE_BLOCK)}else {  context.helper(CREATE_VNODE)}if (directives) {  context.helper(WITH_DIRECTIVES) }  }return {type: 13 /* VNODE_CALL */,tag,props,children,patchFlag,dynamicProps,directives,isBlock,disableTracking,loc  }}</code></pre><p>createVNodeCall 的实现很简单，它最后返回了一个对象，包含了传入的参数数据。这里要注意 context.helper 函数的调用，它会把一些 Symbol 对象添加到 context.helpers 数组中，目的是为了后续代码生成阶段，生成一些辅助代码。</p><h3 id="2-表达式节点转换函数transformExpression"><a href="#2-表达式节点转换函数transformExpression" class="headerlink" title="2.表达式节点转换函数transformExpression"></a>2.表达式节点转换函数transformExpression</h3><p>由于表达式本身不会再有子节点，所以它也不需要退出函数，直接在进入函数时做转换处理即可。</p><p>需要注意的是，</p><p style="color: burlywood; font-size: 15px;margin-top: 13px; font-weight: bolder">只有在 Node.js 环境下的编译或者是 Web 端的非生产环境下才会执行 transformExpression</p><p></p><p>transformExpression 主要做的事情就是<strong>转换插值和元素指令中的动态表达式</strong>，把简单的表达式对象转换成复合表达式对象，内部主要是通过 <strong>processExpression 函数完成</strong>。</p><p>以例子中的 NaN 为例：</p><ul><li>首先执行parse生成的表达式节点 node.content 值为一个简单的表达式对象</li><li>之后执行转换，即通过processExpression 处理后，node.content 的值变成了一个复合表达式对象：</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><pre><code>{      "type": 8,      "children": [{  "type": 4,  "isConstant": false,  "content": "_ctx.msg",  "isStatic": false}," + ",{  "type": 4,  "isConstant": false,  "content": "_ctx.test",  "isStatic": false}      ],     "identifiers": []}</code></pre><p>重点的children属性，把msg + test拆成了三部分，其中变量 msg 和 test 对应都加上了前缀 _ctx。</p><p>之所以加上前缀，主要原因就是模板中引用的的 msg 和 test 对象最终都是在组件实例中访问的，即**需要加上前缀，例如NaN**，而vue.js为了方便没有叫我们加入，所以需要后续添加</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>1、JSX进行书写，需要手动写this</li><li>2、vue.js.2.x之所以编译结果没有_ctx前缀，是由于其使用了with:<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1>  with(this){return _s(msg + test)}<br>  //with 的特性动态去 this 中查找 msg 和 test 属性，所以不需要手动加前缀。</li></ul><p>而对于vue.js.3.x在 Node.js 端的编译结果舍弃了 with，它会在 processExpression 过程中对表达式动态分析，给该加前缀的地方加上前缀。</p><p>需要注意的是 –  processExpression 过程依赖了 @babel/parser 库去解析表达式生成 AST 节点，并依赖了 estree-walker 库去遍历这个 AST 节点，然后对节点分析去判断是否需要加前缀，接着对 AST 节点修改，最终转换生成新的表达式对象。</p><p>且@babel/parser 这个库通常是在 Node.js 端用的，而且这库本身体积非常大，如果打包进 Vue.js 的话会让包体积膨胀 4 倍，所以我们并不会在生产环境的 Web 端引入这个库，Web 端生产环境下的运行时编译最终仍然会用 with 的方式。（因为用 with 的话就完全不需要对表达式做转换了）</p><h3 id="3、Text-节点转换函数transformText"><a href="#3、Text-节点转换函数transformText" class="headerlink" title="3、Text 节点转换函数transformText"></a>3、Text 节点转换函数transformText</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>transformText 函数只处理根节点、元素节点、 v-for 以及 v-if 分支相关的节点，它也会返回一个退出函数。</p><p>因为 transformText 要保证所有表达式节点都已经被处理才执行转换逻辑。</p><h4 id="转换目的"><a href="#转换目的" class="headerlink" title="转换目的"></a>转换目的</h4><p>合并一些相邻的文本节点，然后为内部每一个文本节点创建一个代码生成节点。</p><h4 id="转换方式"><a href="#转换方式" class="headerlink" title="转换方式"></a>转换方式</h4><p>在内部，静态文本节点和动态插值节点都被看作是<strong>一个</strong>文本节点，所以函数首先遍历节点的子节点，然后把<strong>子节点</strong>中的相邻文本节点合并成一个。</p><p>例如：</p><pre><code>&lt;p&gt;hello {{ msg + test }}&lt;/p&gt;</code></pre><p>p节点的children数组包含两个元素 — 纯文本节点hello 与 插值节点NaN，它俩会合并为一个复合表达式节点。</p><p>合并操作完之后，需要进行判断 — 如果是一个只带有单个文本子元素的纯元素节点，则什么都不需要转换，因为这在运行时可以直接设置元素的 textContent 来更新文本。</p><p>最后就处理节点包含<strong>文本子节点且多个子节点</strong>的情况，例如：</p><pre><code>&lt;p&gt;      hello {{ msg + test }}       &lt;a href="foo"/&gt;       hi&lt;/p&gt;</code></pre><p>此时的p的子节点合并之后，还有三个子节点，这时候我们需要进行<strong>遍历：</strong></p><p>找到所有的文本节点或者是复合表达式节点，然后为<strong>这些</strong>子节点通过 createCallExpression 创建一个<strong>调用函数表达式的代码生成节点</strong>。</p><p>而createCallExpression函数就是返回一个包含了执行的函数名与参数的JS_CALL_EXPRESSION 的对象：</p><pre><code>function createCallExpression(callee, args = [], loc = locStub) {     return {            type: 14 /* JS_CALL_EXPRESSION */,               loc,            callee,            arguments: args          }}</code></pre><p>这里，针对我们创建的函数表达式所生成的节点，它对应的函数名是 createTextVNode，参数 callArgs 是子节点本身 child，如果是动态插值节点，那么参数还会多一个 TEXT 的 patchFlag。</p><h3 id="4、v-if-节点转换函数transformIf"><a href="#4、v-if-节点转换函数transformIf" class="headerlink" title="4、v-if 节点转换函数transformIf"></a>4、v-if 节点转换函数transformIf</h3><p>先举个栗子：</p><pre><code>&lt;hello v-if="flag"&gt;&lt;/hello&gt;&lt;div v-else&gt;      &lt;p&gt;hello {{ msg + test }}&lt;/p&gt;      &lt;p&gt;static&lt;/p&gt;      &lt;p&gt;static&lt;/p&gt;&lt;/div&gt;</code></pre><p>对于v-if指令是用于条件性地渲染一块内容，而parse过程（template解析为AST），是不够语义化的，所以我们需要对其进行住那换，变为<strong>语义化强的</strong>代码生成节点</p><p>对于transformIf 的实现过程就是通过 createStructuralDirectiveTransform 函数创建的一个<strong>结构化指令</strong>的转换函数，在 Vue.js 中，v-if、v-else-if、v-else 和 v-for 这些都属于结构化指令，因为它们能影响代码的组织结构。</p><p>而对于createStructuralDirectiveTransform函数，它主要 接受 2 个参数，第一个 name 是指令的名称，第二个 fn 是构造转换退出函数的方法，并最后返回一个函数，对于此时代表 – transformIf 转换函数</p><h4 id="createStructuralDirectiveTransform实现过程"><a href="#createStructuralDirectiveTransform实现过程" class="headerlink" title="createStructuralDirectiveTransform实现过程"></a>createStructuralDirectiveTransform实现过程</h4><p>由于它只处理元素节点（只有它才有v-if指令），之后就是找—&gt;解析props属性，若包含if属性，代表节点拥有v-if，<strong>首先在props删除这个结构化防止无限递归</strong>，然后执行 fn 获取对应的退出函数，最后将这个退出函数返回。</p><p>这时我们又来到了fn（此情景对应前面传入匿名函数）：</p><pre><code>(node, dir, context) =&gt; {      return processIf(node, dir, context, (ifNode, branch, isRoot) =&gt; {        return () =&gt; {           // 退出回调函数，当所有子节点转换完成执行            }      })}</code></pre><p>这时发现此时匿名函数fn内部执行的是 processIf 函数：— 处理 v-if 节点</p><pre><code>function processIf(node, dir, context, processCodegen) {// 处理 v-if 节点  if (dir.name === 'if') {// 创建分支节点const branch = createIfBranch(node, dir)// 创建 IF 节点，替换当前节点const ifNode = {  type: 9 /* IF */,  loc: node.loc,  branches: [branch]}context.replaceNode(ifNode)if (processCodegen) {  return processCodegen(ifNode, branch, true)}}  else {// 处理 v-if 相邻节点，比如 v-else-if 和 v-else      }}</code></pre><p>processIf 函数会先对 v-if 和它的相邻节点做转换，然后返回一个退出函数，在它们的子节点都转换完毕后执行。</p><p>对于processIf，其主要就是用来处理 v-if 节点以及 v-if 的相邻节点，比如 v-else-if 和 v-else，并且它们会走不同的处理逻辑。</p><h4 id="v-if-的处理逻辑"><a href="#v-if-的处理逻辑" class="headerlink" title="v-if 的处理逻辑"></a>v-if 的处理逻辑</h4><ul><li>1、先执行 createIfBranch 去创建一个分支节点</li></ul><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><pre><code>function createIfBranch(node, dir) {      return {                type: 10 /* IF_BRANCH */,             loc: node.loc,             condition: dir.name === 'else' ? undefined : dir.exp,   //条件             children: node.tagType === 3 /* TEMPLATE */ ? node.children : [node]       } }</code></pre><p>主要是，因为 v-if 节点内部的子节点可以属于一个分支，v-else-if 和 v-else 节点内部的子节点也都可以属于一个分支，而最后的页面渲染权，取决于哪个分支节点的 condition 为 true。</p><p>此外：</p><p style="background-color: aquamarine; font-size: 15px;margin-top: 13px; font-weight: bolder">如果节点 node 不是 template，那么 children 指向的就是这个单个 node 构造的数组。</p><ul><li><p>2、接下来它会创建 IF 节点替换当前节点，IF 节点拥有 branches 属性，包含我们前面创建的分支节点，显然，相对于原节点，IF 节点的语义化更强，更利于后续生成条件表达式代码。</p></li><li><p>3、最后它会执行 processCodegen 创建退出函数。</p></li></ul><h4 id="处理相邻节点"><a href="#处理相邻节点" class="headerlink" title="处理相邻节点"></a>处理相邻节点</h4><p>同样还是processIf函数，只不过是else部分：</p><pre><code>function processIf(node, dir, context, processCodegen) {      if (dir.name === 'if') {        // 处理 v-if 节点  }  else {// 处理 v-if 相邻节点，比如 v-else-if 和 v-elseconst siblings = context.parent.childrenlet i = siblings.indexOf(node)while (i-- &gt;= -1) {  const sibling = siblings[i]  if (sibling &amp;&amp; sibling.type === 9 /* IF */) {    // 把节点移动到 IF 节点的 branches 中    context.removeNode()    const branch = createIfBranch(node, dir)    sibling.branches.push(branch)    const onExit = processCodegen &amp;&amp; processCodegen(sibling, branch, false)    // 因为分支已被删除，所以它的子节点需要在这里遍历    traverseNode(branch, context)    // 执行退出函数    if (onExit)      onExit()    // 恢复 currentNode 为 null，因为它已经被移除    context.currentNode = null  }  else {    context.onError(createCompilerError(28 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc))  }  break    }  }}</code></pre><p>方法逻辑在于 – 从当前节点往<strong>前面的兄弟节点</strong>遍历，找到 v-if 节点后，把当前节点删除，然后根据当前节点创建一个分支节点，把这个分支节点添加到前面创建的 IF 节点的 branches 中。此外，由于这个节点已经删除，那么需要在这里把这个节点的子节点通过 traverseNode 遍历一遍。</p><p>这么处理下来，就相当于完善了 IF 节点的信息了，IF 节点的 branches 就包含了所有分支节点了，也就是即最终创建了一个 IF 节点，它包含了所有的分支节点。</p><h4 id="退出函数的逻辑"><a href="#退出函数的逻辑" class="headerlink" title="退出函数的逻辑"></a>退出函数的逻辑</h4><p>原本是一个匿名函数，主要内部通过 createCodegenNodeForBranch 创建 IF 分支节点的 codegenNode。</p><pre><code>function createCodegenNodeForBranch(branch, index, context) {  if (branch.condition) {return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, index, context),  createCallExpression(context.helper(CREATE_COMMENT), [    (process.env.NODE_ENV !== 'production') ? '"v-if"' : '""',    'true'  ]))}else {return createChildrenCodegenNode(branch, index, context)    }}</code></pre><p>当分支节点存在 condition 的时候，比如 v-if、和 v-else-if，它通过 createConditionalExpression 返回一个条件表达式节点：</p><pre><code>function createConditionalExpression(test, consequent, alternate, newline = true) {    return {            type: 19 /* JS_CONDITIONAL_EXPRESSION */,        test,           consequent,        alternate,        newline,        loc: locStub      }}</code></pre><p> consequent 在这里是 IF 主 branch 的子节点对应的代码生成节点，alternate 是后补 branch 子节点对应的代码生成节点。</p><p>在分析里面的createChildrenCodegenNode函数：</p><p>主要就是判断每个分支子节点是不是一个 vnodeCall，如果这个子节点不是组件节点的话，则把它转变成一个 BlockCall，也就是让 v-if 的每一个分支都可以创建一个 Block。</p><p>因为 v-if 是条件渲染的，我们知道在某些条件下某些分支是不会渲染的，那么它内部的动态节点就不能添加到外部的 Block 中的，所以它就需要单独创建一个 Block 来维护分支内部的动态节点，这样也就构成了 Block tree。</p><p>这一套之后，相比原节点，转换后的 IF 节点无论是在语义化还是在信息上，都更加丰富，我们可以依据它在代码生成阶段生成所需的代码。</p><h2 id="3、静态提升"><a href="#3、静态提升" class="headerlink" title="3、静态提升"></a>3、静态提升</h2><p>终于把遍历AST节点部分说完了，接下来就是transform的核心流程的第三步：静态提升</p><p>经过上面的遍历，节点已经转换完毕了，之后会判断编译配置中是否配置了 hoistStatic，如果是就会执行 hoistStatic 做静态提升：</p><pre><code>if (options.hoistStatic) {      hoistStatic(root, context)}</code></pre><p>这个配置hoistStatic看似比较复杂：</p><p>配置前：</p><pre><code>&lt;p&gt;hello {{ msg + test }}&lt;/p&gt;&lt;p&gt;static&lt;/p&gt;&lt;p&gt;static&lt;/p&gt;</code></pre><p>配置后：</p><pre><code>import { toDisplayString as _toDisplayString, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock } from "vue"const _hoisted_1 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)const _hoisted_2 = /*#__PURE__*/_createVNode("p", null, "static", -1 /* HOISTED */)export function render(_ctx, _cache) {      return (_openBlock(), _createBlock(_Fragment, null, [    _createVNode("p", null, "hello " + _toDisplayString(_ctx.msg + _ctx.test), 1 /* TEXT */),    _hoisted_1,    _hoisted_2  ], 64 /* STABLE_FRAGMENT */))}</code></pre><p>嗯。。。。是很复杂。。。</p><p>所以我们看重点： _hoisted_1 和 _hoisted_2 这两个变量，它们分别对应模板中两个静态 p 标签生成的 vnode，可以发现它的创建是在 render 函数外部执行的。</p><p>这样好处就是不用每次在 render 阶段都执行一次 createVNode 创建 vnode 对象，直接用之前在内存中创建好的 vnode 即可。</p><p>而这时候静态提升的缘由就出来了：</p><p style="background-color: aquamarine; font-size: 15px;margin-top: 13px; font-weight: bolder">因为这些静态节点不依赖动态数据，一旦创建了就不会改变，所以只有静态节点才能被提升到外部创建。</p><h3 id="静态提升的实现-hoistStatic函数"><a href="#静态提升的实现-hoistStatic函数" class="headerlink" title="静态提升的实现 hoistStatic函数"></a>静态提升的实现 hoistStatic函数</h3><p>hoistStatic 主要就是从根节点开始，通过递归的方式去遍历节点，只有<strong>普通元素和文本节点</strong>才能被静态提升，所以针对这些节点，这里通过 getStaticType 去获取静态类型，如果节点是一个元素类型，getStaticType 内部还会递归判断它的子节点的静态类型。</p><p>虽然有的节点包含一些动态子节点，但它本身的<strong>静态属性</strong>还是可以被静态提升的。</p><p>总之找到全部的静态的！</p><p>注意</p><p style="color: blueviolet; font-size: 15px;margin-top: 13px; font-weight: bolder">如果 getStaticType 返回的 staticType 的值是 2，则表明它是一个运行时常量，由于它的值在运行时才能被确定，所以是不能静态提升的。</p><p>并且如果节点满足可以被静态提升的条件，节点对应的 codegenNode 会通过执行 context.hoist 修改为一个简单表达式节点：</p><pre><code>function hoist(exp) {      context.hoists.push(exp);      const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, true)      identifier.hoisted = exp      return identifier}child.codegenNode = context.hoist(child.codegenNode)</code></pre><p>改动后的 codegenNode 会在生成代码阶段帮助我们生成静态提升的相关代码。</p><h2 id="4、创建根节点的代码生成节点-createRootCodegen"><a href="#4、创建根节点的代码生成节点-createRootCodegen" class="headerlink" title="4、创建根节点的代码生成节点 createRootCodegen"></a>4、创建根节点的代码生成节点 createRootCodegen</h2><pre><code>function createRootCodegen(root, context) {      const { helper } = context;     const { children } = root;      const child = children[0];  if (children.length === 1) {        // 如果子节点是单个元素节点，则将其转换成一个 blockif (isSingleElementRoot(root, child) &amp;&amp; child.codegenNode) {  const codegenNode = child.codegenNode;  if (codegenNode.type === 13 /* VNODE_CALL */) {    codegenNode.isBlock = true;    helper(OPEN_BLOCK);    helper(CREATE_BLOCK);  }  root.codegenNode = codegenNode;}else {  root.codegenNode = child;}  }  else if (children.length &gt; 1) {        // 如果子节点是多个节点，则返回一个 fragement 的代码生成节点root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, `${64 /* STABLE_FRAGMENT */} /* ${PatchFlagNames[64 /* STABLE_FRAGMENT */]} */`, undefined, undefined, true);  }}</code></pre><p>对于createRootCodegen 函数，它做的事情很简单，就是为 root 这个虚拟的 AST 根节点创建一个代码生成节点，如果 root 的子节点 children 是单个元素节点，则将其转换成一个 Block，把这个 child 的 codegenNode 赋值给 root 的 codegenNode。</p><p>如果 root 的子节点 children 是多个节点，则返回一个 fragement 的代码生成节点，并赋值给 root 的 codegenNode。</p><p>这里，创建 codegenNode 就是为了后续生成代码时使用。</p><p>之后createRootCodegen 完成之后，接着把 transform 上下文在转换 AST 节点过程中创建的一些变量赋值给 root 节点对应的属性，这样后续在代码生成节点时，就可以通过 root 这个根节点访问到这些变量了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;当对template进行解析之后，虽然它是对模板的完整描述，可惜它不能直接生成代码，因为它的语义化还不够，没有包含和编译优化的相关属性，所以</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="编译过程以及优化" scheme="https://useritem.github.io/tags/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>组件初始化</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue.js%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue.js%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2021-07-06T14:19:32.000Z</published>
    <updated>2021-07-06T14:28:08.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="setup组件渲染流程"><a href="#setup组件渲染流程" class="headerlink" title="setup组件渲染流程"></a>setup组件渲染流程</h1><h2 id="一、分析介绍大致流程"><a href="#一、分析介绍大致流程" class="headerlink" title="一、分析介绍大致流程"></a>一、分析介绍大致流程</h2><p>主要是对vnode的渲染过程进行分析，也就是在挂载组件，步骤主要为—</p><p>1、创建组件实例</p><pre><code>const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense))</code></pre><p>2、设置组件实例</p><pre><code>setupComponent(instance)</code></pre><p>3、设置并运行带副作用的渲染函数  — 这里不做讨论</p><pre><code>setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)</code></pre><h2 id="二、1创建组件实例-createComponentInstance方法"><a href="#二、1创建组件实例-createComponentInstance方法" class="headerlink" title="二、1创建组件实例 createComponentInstance方法"></a>二、1创建组件实例 createComponentInstance方法</h2><p>该方法主要是对<strong>instance对象</strong>的创建与属性的定义，主要的属性分为</p><pre><code>setupState: EMPTY_OBJ,   --- setup 函数返回的响应式结果 // data 数据data: EMPTY_OBJ,// props 数据props: EMPTY_OBJ,instance.ctx = { _: instance }   ----  初始化渲染上下文</code></pre><h2 id="三、2设置组件实例"><a href="#三、2设置组件实例" class="headerlink" title="三、2设置组件实例"></a>三、2设置组件实例</h2><p>这里也就是对setup 函数的处理，即为setupComponent 方法的实现</p><p>代码具体如下：</p><pre><code>function setupComponent (instance, isSSR = false) {    //组件 vnode 中获取了 props、children、shapeFlag 等属性      const { props, children, shapeFlag } = instance.vnode      // 判断是否是一个有状态的组件      const isStateful = shapeFlag &amp; 4      // 初始化 props      initProps(instance, props, isStateful, isSSR)      // 初始化 插槽      initSlots(instance, children)      // 设置有状态的组件实例      const setupResult = isStateful    ? setupStatefulComponent(instance, isSSR)        : undefined      return setupResult}</code></pre><p>函数主要的作用在于属性的获取与其对应的初始化，以及</p><p>设置有状态的组件实例setupStatefulComponent函数</p><p>其主要功能同样也是三步：</p><ul><li>1、创建渲染上下文代理。</li><li>2、判断处理 setup 函数</li><li>3、完成组件实例设置</li></ul><p>接下来再对这三步进行具体分析</p><h3 id="1-创建渲染上下文代理"><a href="#1-创建渲染上下文代理" class="headerlink" title="1.创建渲染上下文代理"></a>1.创建渲染上下文代理</h3><p>创建渲染上下文代理流程，主要对 instance.ctx 做了代理，也就是<strong>初始化上下文部分</strong>进行代理</p><h4 id="扩展：代理的原因"><a href="#扩展：代理的原因" class="headerlink" title="扩展：代理的原因"></a>扩展：代理的原因</h4><p>首先vue2.0中的data中的数据主要存储在this._data上，所以当模板渲染的时候访问 this.msg，实际上访问的是 <strong>this._data.msg</strong>，这是因为 Vue.js 2.x 在初始化 data 的时候，做了一层 proxy 代理。</p><p>于是，在到了 Vue.js 3.0，为了方便维护，我们把组件中不同状态的数据存储到不同的属性中，比如存储到 setupState、ctx、data、props 中。</p><p>我们在执行组件渲染函数的时候，为了方便用户使用，会直接访问渲染上下文 <strong>instance.ctx</strong> 中的属性，所以我们也要做一层 proxy，对渲染上下文 instance.ctx 属性的访问和修改，代理到对 setupState、ctx、data、props 中的数据的访问和修改。</p><p>代理proxy的主要方法也就是 — get，set，has。于是我们又又又分析下面三个方法，主要原理就是想的一样。</p><h4 id="1、get方法"><a href="#1、get方法" class="headerlink" title="1、get方法"></a>1、get方法</h4><p>当我们一访问 instance.ctx 渲染上下文中的属性时，立刻进入get函数</p><p>其中get方法的主要在于判断key的开头方式，重点在于顺序的确定：</p><p>首先判断以 $ 开头，否则就依次判断 setupState、data、props、ctx 中是否包含这个 key，如果包含就返回对应值。</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>这个判断顺序很重要，在 key 相同时它会决定数据获取的<strong>优先级</strong></p><h4 id="2、set方法"><a href="#2、set方法" class="headerlink" title="2、set方法"></a>2、set方法</h4><p>当我们修改 instance.ctx 渲染上下文中的属性的时 — set方法</p><p>仍然要注意顺序问题，和 get 一样，优先判断 setupState，然后是 data，接着是 props。</p><h4 id="3、has方法"><a href="#3、has方法" class="headerlink" title="3、has方法"></a>3、has方法</h4><p>判断属性是否存在于 instance.ctx 渲染上下文中时，就会进入 has 函数。</p><p>使用比较少</p><p>接下来我们才回到 setupStatefulComponent 函数中</p><h3 id="2、判断处理-setup-函数"><a href="#2、判断处理-setup-函数" class="headerlink" title="2、判断处理 setup 函数"></a>2、判断处理 setup 函数</h3><p>逻辑代码为：</p><pre><code>// 判断处理 setup 函数const { setup } = Componentif (setup) {      // 如果 setup 函数带参数，则创建一个 setupContext      const setupContext = (instance.setupContext =        setup.length &gt; 1 ? createSetupContext(instance) : null)      // 执行 setup 函数获取结果      const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [instance.props, setupContext])      // 处理 setup 执行结果      handleSetupResult(instance, setupResult)</code></pre><p>}</p><p>同样如上所示为三步：创建 setup 函数上下文、执行 setup 函数并获取结果和处理 setup 函数的执行结果</p><p>1、createSetupContext 函数来创建 setupContext</p><pre><code>function createSetupContext (instance) {      return {            attrs: instance.attrs,         slots: instance.slots,         emit: instance.emit  }}</code></pre><p>就是返回了一个对象，包括 attrs、slots 和 emit 三个属性。  </p><p>2、执行 setup 函数并获取结果：</p><pre><code>const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [instance.props, setupContext])</code></pre><p>3、用 handleSetupResult 函数来处理结果</p><pre><code>handleSetupResult(instance, setupResult) {  if (isFunction(setupResult)) {    // setup 返回渲染函数    instance.render = setupResult  }  else if (isObject(setupResult)) {        // 把 setup 返回结果变成响应式    instance.setupState = reactive(setupResult)}  finishComponentSetup(instance)}</code></pre><p>此外 setup 不仅仅支持返回一个对象，也可以返回一个函数作为组件的渲染函数，并且在 handleSetupResult 的最后，会执行 finishComponentSetup 函数完成组件实例的设置。</p><p>当组件没有定义的 setup 的时候，也会执行 finishComponentSetup 函数去完成组件实例的设置。</p><h3 id="3、完成组件实例设置"><a href="#3、完成组件实例设置" class="headerlink" title="3、完成组件实例设置"></a>3、完成组件实例设置</h3><p>也就是finishComponentSetup 函数的实现，主要作用就是</p><p>标准化模板或者渲染函数 和 兼容 Options API</p><p>对于兼容 Options API，大家比较属性，主要就是对兼容 Vue.js 2.x的兼容，主要是applyOptions方法实现，所以重点说 — </p><h4 id="标准化模板"><a href="#标准化模板" class="headerlink" title="标准化模板"></a>标准化模板</h4><h5 id="问题由来：版本问题"><a href="#问题由来：版本问题" class="headerlink" title="问题由来：版本问题"></a>问题由来：版本问题</h5><p>由于在一些古老的项目中有些开发方式不适用webpack编译，直接引用vue.js</p><p>因此 Vue.js 在 Web 端有两个版本：runtime-only 和 runtime-compiled。我们更推荐用 runtime-only 版本的 Vue.js，因为相对而言它体积更小，而且在运行时不用编译，不仅耗时更少而且性能更优秀。遇到一些不得已的情况比如上述提到的古老项目，我们也可以选择 runtime-compiled 版本。</p><p>runtime-only 和 runtime-compiled 的主要区别在于是否注册了这个 compile 方法。</p><h6 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h6><p>首先看 instance.render 是否存在，如果不存在则开始标准化流程，处理以下三种情况：</p><ul><li>情况一：compile 和组件 template 属性存在，render 方法不存在的情况。此时， runtime-compiled 版本会在 JavaScript 运行时进行模板编译，生成 render 函数。 ———–新</li><li>情况二：compile 和 render 方法不存在，组件 template 属性存在的情况。此时由于没有 compile，这里用的是 runtime-only 版本（老），因此要报一个警告来告 诉用户，想要运行时编译得使用 runtime-compiled 版本的 Vue.js。      —————老</li><li>情况三：组件既没有写 render 函数，也没有写 template 模板，此时要报一个警告，告诉用户组件缺少了 render 函数或者 template 模板。    —————-缺</li></ul><p>之后就要把组件的 render 函数赋值给 instance.render。到了组件渲染的时候，就可以运行 instance.render 函数生成组件的子树 vnode 了。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Vue.js 3.0 组件的初始化流程：</p><p><a href="https://imgtu.com/i/RYLeOK"><img src="https://z3.ax1x.com/2021/06/27/RYLeOK.png" alt="RYLeOK.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;setup组件渲染流程&quot;&gt;&lt;a href=&quot;#setup组件渲染流程&quot; class=&quot;headerlink&quot; title=&quot;setup组件渲染流程&quot;&gt;&lt;/a&gt;setup组件渲染流程&lt;/h1&gt;&lt;h2 id=&quot;一、分析介绍大致流程&quot;&gt;&lt;a href=&quot;#一、分析介绍大</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0核心组件实现" scheme="https://useritem.github.io/tags/vue3-0%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>组件问题 - 组件渲染</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue.js%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/%E7%BB%84%E4%BB%B6%E9%97%AE%E9%A2%98-%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue.js%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/%E7%BB%84%E4%BB%B6%E9%97%AE%E9%A2%98-%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93/</id>
    <published>2021-07-06T14:18:03.000Z</published>
    <updated>2021-07-06T14:28:08.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：介绍"><a href="#前言：介绍" class="headerlink" title="前言：介绍"></a>前言：介绍</h2><p>组件是一个抽象的概念，它是对一棵 DOM 树的抽象，当我们写一个组件节点时：</p><pre><code>&lt;hello-world&gt;&lt;/hello-world&gt;</code></pre><p>它具体渲染成什么与编写子组件模板的方式决定的</p><p>组件渲染过程！</p><p><a href="https://imgtu.com/i/RZyIvq"><img src="https://z3.ax1x.com/2021/06/22/RZyIvq.png" alt="RZyIvq.png"></a></p><p>vnode可以简单理解为— 可以简单描述组件的JS对象</p><h1 id="组件渲染问题"><a href="#组件渲染问题" class="headerlink" title="组件渲染问题"></a>组件渲染问题</h1><h2 id="一、vue3-0的改变"><a href="#一、vue3-0的改变" class="headerlink" title="一、vue3.0的改变"></a>一、vue3.0的改变</h2><p>首先需要注意的是：Vue.js 3.0 初始化应用的方式和 Vue.js 2.x 差别并不大，本质上都是把 App 组件挂载到 id 为 app 的 DOM 节点上。</p><p>其中vue3.0如下：</p><pre><code>// 在 Vue.js 3.0 中，初始化一个应用的方式如下import { createApp } from 'vue'import App from './app'const app = createApp(App)app.mount('#app')</code></pre><p>重要是多了一个createApp，其重点在于：</p><p><strong>创建app对象与重写mount方法</strong></p><p>其中在整个 app 对象创建过程中，Vue.js 利用闭包和函数柯里化（是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术）的技巧</p><p>从 app.mount 开始，才算真正进入组件渲染流程，那么接下来，我们就重点看一下核心渲染流程做的两件事情：创建 vnode 和渲染 vnode。</p><h2 id="二、创建vnode"><a href="#二、创建vnode" class="headerlink" title="二、创建vnode"></a>二、创建vnode</h2><p>vnode 本质上是用来描述 DOM 的 JavaScript 对象，它在 Vue.js 中可以描述不同类型的节点，比如普通元素节点、组件节点等。</p><p>普通节点可以理解为一个<strong>真实的DOM</strong>，而组件节点就表示组件</p><h3 id="普通节点："><a href="#普通节点：" class="headerlink" title="普通节点："></a>普通节点：</h3><pre><code>&lt;button class="btn" style="width:100px;height:50px"&gt;click me&lt;/button&gt;</code></pre><p>vnode表示：</p><pre><code>const vnode = {  type: 'button',  //标签属性  props: {      //DOM的附加信息    'class': 'btn',    style: {      width: '100px',      height: '50px'    }  },  children: 'click me'   //子节点}</code></pre><h3 id="组件节点："><a href="#组件节点：" class="headerlink" title="组件节点："></a>组件节点：</h3><pre><code>&lt;custom-component msg="test"&gt;&lt;/custom-component&gt;</code></pre><p>表示：</p><pre><code>const CustomComponent = {      // 在这里定义组件对象}const vnode = {      type: CustomComponent,      props: {     msg: 'test'  }}</code></pre><p>组件 vnode 其实是<strong>对抽象事物的描述</strong>，这是因为我们并不会在页面上真正渲染一个 <custom-component> 标签，而是 </custom-component></p><p style="color: red; font-size: 16px;">渲染组件内部定义的 HTML 标签。</p><p></p><p>两种 vnode 类型外，还有纯文本 vnode、注释 vnode 等等</p><h3 id="1-vnode的优势"><a href="#1-vnode的优势" class="headerlink" title="1.vnode的优势"></a>1.vnode的优势</h3><ul><li>1、抽象化 — 把渲染过程抽象化，从而使得组件的抽象能力也得到提升。</li><li>2、跨平台 – 因为 patch vnode 的过程不同平台可以有自己的实现，基于 vnode 再做服务端渲染、Weex 平台、小程序平台的渲染都变得容易了很多。</li></ul><p>但是不是有了vnode就不需要操作DOM了，两者的优势不一定</p><h3 id="2-创建vnode的过程"><a href="#2-创建vnode的过程" class="headerlink" title="2.创建vnode的过程"></a>2.创建vnode的过程</h3><p>对于app.mount 函数的实现，内部是通过 createVNode 函数创建了根组件的 vnode ：</p><pre><code>const vnode = createVNode(rootComponent, rootProps)</code></pre><p>createVNode内部的关键在于对 props 做标准化处理、对 vnode 的类型信息编码、创建 vnode 对象，标准化子节点 children 。</p><h2 id="二、vnode的渲染"><a href="#二、vnode的渲染" class="headerlink" title="二、vnode的渲染"></a>二、vnode的渲染</h2><p>app.mount 函数中的render(vnode, container)渲染函数实现了，</p><pre><code>render(vnode, rootContainer)const render = (vnode, container) =&gt; {      if (vnode == null) {// 销毁组件if (container._vnode) {  unmount(container._vnode, null, null, true)}  } else {    // 创建或者更新组件    patch(container._vnode || null, vnode, container)  }  // 缓存 vnode 节点，表示已经渲染  container._vnode = vnode}</code></pre><p>当其第一个参数vnode 为空，则执行销毁组件的逻辑，否则执行创建或者更新组件的逻辑。</p><p>对于上面<strong>创建与更新组件</strong>中的patch函数实现中，其patch函数功能如下：</p><ul><li><p>1、是根据 vnode 挂载 DOM</p></li><li><p>2、根据新旧 vnode 更新 DOM</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) =&gt; {<br>  。。。。<br>  }<br>在创建的过程中，patch 函数接受多个参数，这里我们目前只重点关注前三个：</p></li><li><p>第一个参数 n1 表示旧的 vnode，当 n1 为 null 的时候，表示是一次挂载的过程；</p></li><li><p>第二个参数 n2 表示新的 vnode 节点，后续会根据这个 vnode 类型执行不同的处理逻辑；</p></li><li><p>第三个参数 container 表示 DOM 容器，也就是 vnode 渲染生成 DOM 后，会挂载到 container 下面。</p></li></ul><h3 id="处理方式："><a href="#处理方式：" class="headerlink" title="处理方式："></a>处理方式：</h3><h4 id="对组件的处理-–-processComponent-函数"><a href="#对组件的处理-–-processComponent-函数" class="headerlink" title="对组件的处理 –  processComponent 函数"></a>对组件的处理 –  processComponent 函数</h4><pre><code>const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) =&gt; {  if (n1 == null) {   // 执行挂载组件   mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)  }  else {        // 执行更新组件        updateComponent(n1, n2, parentComponent, optimized)  }}</code></pre><p>挂载组件的mountComponent的实现：</p><pre><code>        三件事情：const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) =&gt; {  // 1、创建组件实例  --内部通过对象的方式进行创建  const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense))  // 2、设置组件实例  setupComponent(instance)  // 3、设置并运行带副作用的渲染函数  setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)}</code></pre><p>在设置组件实例中，instance 保留了很多组件相关的数据，维护了组件的上下文，包括对 props、插槽，以及其他实例的属性的初始化处理。</p><h4 id="渲染函数setupRenderEffect："><a href="#渲染函数setupRenderEffect：" class="headerlink" title="渲染函数setupRenderEffect："></a>渲染函数setupRenderEffect：</h4><pre><code>const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) =&gt; {  // 创建响应式的副作用渲染函数//副作用：当组件的数据发生变化时，effect 函数包裹的内部渲染函数 componentEffect 会重新执行一遍，从而达到重新渲染组件的目的。  instance.update = effect(function componentEffect() {//进行初始渲染if (!instance.isMounted) {  // 渲染组件生成子树 vnode  const subTree = (instance.subTree = renderComponentRoot(instance))  // 把子树 vnode 挂载到 container 中  patch(null, subTree, container, anchor, instance, parentSuspense, isSVG)  // 保留渲染生成的子树根 DOM 节点  initialVNode.el = subTree.el  instance.isMounted = true}else {  // 更新组件        }      }, prodEffectOptions)}</code></pre><p>初始渲染主要做两件事情：渲染组件生成 subTree、把 subTree 挂载到 container 中。</p><p>还有注意要注意别把 subTree 和 initialVNode 弄混了</p><p>以父组件 App 中里引入了 Hello 组件为例：</p><pre><code>&lt;template&gt;  &lt;div class="app"&gt;    &lt;p&gt;This is an app.&lt;/p&gt;    &lt;hello&gt;&lt;/hello&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>Hello组件如下：</p><pre><code>&lt;template&gt;  &lt;div class="hello"&gt;    &lt;p&gt;Hello, Vue 3.0!&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>在 App 组件中， <hello> 节点渲染生成的 vnode ，对应的就是 Hello 组件的 initialVNode ，为了好记，你也可以把它称作“组件 vnode”。外部组件</hello></p><p>而 Hello 组件内部整个 DOM 节点对应的 vnode 就是执行 renderComponentRoot（见渲染函数setupRenderEffect） 渲染生成对应的 subTree，我们可以把它称作“子树 vnode” – 内部DOM</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>回到patch函数进行对vnode判断，对于接下来看对普通 DOM 元素的处理流程。</p><p>上面的processElement函数中可知</p><p>该函数的逻辑很简单，如果 n1 为 null，走挂载元素节点的逻辑，否则走更新元素节点逻辑。</p><p>我们接着来看挂载元素的 mountElement 函数的实现：</p><pre><code>const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) =&gt; {  let el  const { type, props, shapeFlag } = vnode  // 创建 DOM 元素节点  el = vnode.el = hostCreateElement(vnode.type, isSVG, props &amp;&amp; props.is)  if (props) {    // 处理 props，比如 class、style、event 等属性    for (const key in props) {          if (!isReservedProp(key)) {        hostPatchProp(el, key, null, props[key], isSVG)      }    }  }  if (shapeFlag &amp; 8 /* TEXT_CHILDREN */) {        // 处理子节点是纯文本的情况        hostSetElementText(el, vnode.children)  }  else if (shapeFlag &amp; 16 /* ARRAY_CHILDREN */) {            // 处理子节点是数组的情况        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG &amp;&amp; type !== 'foreignObject', optimized || !!vnode.dynamicChildren)  }  // 把创建的 DOM 元素节点挂载到 container 上  hostInsert(el, container, anchor)}</code></pre><p>可以看到，挂载元素函数主要做四件事：</p><ul><li>1、创建 DOM 元素节点（hostCreateElement 方法  –平台相关方法，实际还是要通过 document.createElement 创建元素，也是底层方法，只是不用用户直接操作DOM）。</li><li>2、处理 props、</li><li>3、处理 children、</li><li>4、挂载 DOM 元素到 container 上。</li></ul><p>vnode 同样也是一棵树，并且它和 DOM 结构是一一映射的。</p><p><a href="https://imgtu.com/i/RZzcLt"><img src="https://z3.ax1x.com/2021/06/22/RZzcLt.md.jpg" alt="RZzcLt.md.jpg"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：介绍&quot;&gt;&lt;a href=&quot;#前言：介绍&quot; class=&quot;headerlink&quot; title=&quot;前言：介绍&quot;&gt;&lt;/a&gt;前言：介绍&lt;/h2&gt;&lt;p&gt;组件是一个抽象的概念，它是对一棵 DOM 树的抽象，当我们写一个组件节点时：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0核心组件实现" scheme="https://useritem.github.io/tags/vue3-0%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>组件问题 - 组件更新</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue.js%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/%E7%BB%84%E4%BB%B6%E9%97%AE%E9%A2%98-%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue.js%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/%E7%BB%84%E4%BB%B6%E9%97%AE%E9%A2%98-%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0/</id>
    <published>2021-07-06T14:17:45.000Z</published>
    <updated>2021-07-06T14:28:08.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>组件渲染过程的本质在于吧各种类型的 vnode 渲染成真实 DOM。</p><p>组件是由模板、组件描述对象和数据构成的，数据的变化会影响组件的变化。组件的渲染过程中创建了一个带<strong>副作用</strong>的渲染函数，当数据变化的时候就会执行这个<strong>渲染函数</strong>来触发组件的更新。</p><h1 id="更新与渲染过程"><a href="#更新与渲染过程" class="headerlink" title="更新与渲染过程"></a>更新与渲染过程</h1><h2 id="一、副作用渲染函数更新组件的过程"><a href="#一、副作用渲染函数更新组件的过程" class="headerlink" title="一、副作用渲染函数更新组件的过程"></a>一、副作用渲染函数更新组件的过程</h2><p>带副作用渲染函数 setupRenderEffect 的实现：</p><p>const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) =&gt; {</p><pre><code>// 创建响应式的副作用渲染函数instance.update = effect(function componentEffect() {if (!instance.isMounted) {  // 渲染组件}else {  // 更新组件  let { next, vnode } = instance  // next 表示新的组件 vnode  if (next) {    // 更新组件 vnode 节点信息    updateComponentPreRender(instance, next, optimized)  }  else {    next = vnode  }  // 渲染新的子树 vnode  const nextTree = renderComponentRoot(instance)  // 缓存旧的子树 vnode  const prevTree = instance.subTree  // 更新子树 vnode  instance.subTree = nextTree  // 组件更新核心逻辑，根据新旧子树 vnode 做 patch  patch(prevTree, nextTree,    // 如果在 teleport 组件中父节点可能已经改变，所以容器直接找旧树 DOM 元素的父节点    hostParentNode(prevTree.el),    // 参考节点在 fragment 的情况可能改变，所以直接找旧树 DOM 元素的下一个节点    getNextHostNode(prevTree),    instance,    parentSuspense,    isSVG)  // 缓存更新后的 DOM 节点  next.el = nextTree.el}  }, prodEffectOptions)}    </code></pre><p>更新组件主要做三件事情：</p><ul><li>更新组件 vnode 节点(以条件判断组件实例中是否有新的组件 vnode</li><li>渲染新的子树 vnode、（由数据发生了变化故子树也发生了变化）</li><li>根据新旧子树 vnode 执行 patch 逻辑。（找新旧子树 vnode 的不同，找到合适的方法更新DOM）</li></ul><p>主要就是patch函数的实现，其中</p><p>在这个过程中，首先判断新旧节点是否是<strong>相同的 vnode 类型</strong>，如果不同，比如一个 div 更新成一个 ul，直接进行删除再挂载，so easy</p><p>如果是相同的 vnode 类型，就需要走 diff 更新流程了，接着会根据不同的 vnode 类型执行不同的处理逻辑</p><p>vnode类型分为 - 普通元素类型和组件类型的处理过程。</p><h2 id="1、处理组件"><a href="#1、处理组件" class="headerlink" title="1、处理组件"></a>1、处理组件</h2><p>一个组件重新渲染可能会有两种场景，</p><ul><li>一种是组件本身的数据变化，这种情况下 next 是 null；</li><li>另一种是父组件在更新的过程中，遇到子组件节点，先判断子组件是否需要更新</li></ul><p>如果需要则主动执行子组件的重新渲染方法，这种情况下 next 就是新的子组件 vnode。</p><p>子组件对应的新的组件 vnode 是在父组件重新渲染的过程中，通过 renderComponentRoot 渲染子树 vnode 的时候生成</p><p>原因在于 子树vnode为树形结构，通过遍历它的节点就可以访问对应位置的组件</p><p>processComponent 处理组件 vnode，本质上就是去判断子组件是否需要更新，</p><p>如果需要则递归执行子组件的副作用渲染函数来更新</p><p>否则仅仅更新一些 vnode 的属性，并让子组件实例保留对组件 vnode 的引用，用于子组件自身数据变化引起组件重新渲染的时候，在渲染函数内部可以拿到新的组件 vnode。</p><h2 id="2、处理普通元素"><a href="#2、处理普通元素" class="headerlink" title="2、处理普通元素"></a>2、处理普通元素</h2><p>举例：</p><pre><code>&lt;template&gt;      &lt;div class="app"&gt;        &lt;p&gt;This is {{msg}}.&lt;/p&gt;    &lt;button @click="toggle"&gt;Toggle msg&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {        data() {          return {            msg: 'Vue'      }    },methods: {  toggle() {    this.msg = 'Vue'? 'World': 'Vue'  }}  }&lt;/script&gt;</code></pre><p>当点击按钮时，就触发了toggle函数，进行对数据进行了改变，造成了重新渲染</p><p>App 组件的根节点是 div 标签，重新渲染的子树 vnode 节点是一个普通元素的 vnode，所以应该先走 processElement 逻辑。</p><p>更新元素关键在于：</p><ul><li><p>更新 props （ patchProps 函数就是在更新 DOM 节点的 class、style、event 以及其它的一些 DOM 属性）</p></li><li><p>更新子节点（九种情况讨论即可），具体代码如下：</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG,     optimized = false) =&gt; {</p><pre><code>const c1 = n1 &amp;&amp; n1.childrenconst prevShapeFlag = n1 ? n1.shapeFlag : 0const c2 = n2.childrenconst { shapeFlag } = n2// 子节点有 3 种可能情况：文本、数组、空if (shapeFlag &amp; 8 /* TEXT_CHILDREN */) {</code></pre><p>  if (prevShapeFlag &amp; 16 /* ARRAY_CHILDREN */) {</p><pre><code>// 数组 -&gt; 文本，则删除之前的子节点unmountChildren(c1, parentComponent, parentSuspense)</code></pre><p>  }<br>  if (c2 !== c1) {</p><pre><code>// 文本对比不同，则替换为新文本hostSetElementText(container, c2)</code></pre><p>  }</p><pre><code>}else {</code></pre><p>  if (prevShapeFlag &amp; 16 /* ARRAY_CHILDREN */) {</p><pre><code>// 之前的子节点是数组if (shapeFlag &amp; 16 /* ARRAY_CHILDREN */) {  // 新的子节点仍然是数组，则做--完整地 diff--  patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)}else {  // 数组 -&gt; 空，则仅仅删除之前的子节点  unmountChildren(c1, parentComponent, parentSuspense, true)}</code></pre><p>  }</p><p>  else {</p><pre><code>// 之前的子节点是文本节点或者为空// 新的子节点是数组或者为空if (prevShapeFlag &amp; 8 /* TEXT_CHILDREN */) {  // 如果之前子节点是文本，则把它清空  hostSetElementText(container, '')}if (shapeFlag &amp; 16 /* ARRAY_CHILDREN */) {  // 如果新的子节点是数组，则挂载新子节点  mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)}</code></pre><p>  }</p><pre><code>}</code></pre><p>  }</p></li></ul><h1 id="diff算法-–-新旧节点均为vnode数组"><a href="#diff算法-–-新旧节点均为vnode数组" class="headerlink" title="diff算法 – 新旧节点均为vnode数组"></a>diff算法 – 新旧节点均为vnode数组</h1><h2 id="叙述"><a href="#叙述" class="headerlink" title="叙述"></a>叙述</h2><p>新子节点数组相对于旧子节点数组的变化，无非是通过更新、删除、添加和移动节点来完成</p><p>而核心 diff 算法，就是在已知旧子节点的 DOM 结构、vnode 和新子节点的 vnode 情况下，以<strong>较低的成本</strong>完成子节点的更新为目的，求解生成新子节点 DOM 的系列操作。</p><p>由于发现新旧 children 拥有相同的头尾节点。对于相同的节点，我们只需要做对比更新即可</p><h2 id="一、同步头部节点"><a href="#一、同步头部节点" class="headerlink" title="一、同步头部节点"></a>一、同步头部节点</h2><p>diff 算法的第一步从头部开始同步。</p><p>需要注意的是–</p><p>在整个 diff 的过程，我们需要维护几个变量：<strong>头部的索引 i、旧子节点的尾部索引 e1和新子节点的尾部索引 e2。</strong></p><p>同步头部节点过程就是从头部开始，依次对比新节点和旧节点，如果它们相同的则执行 patch 更新节点；如果不同或者索引 i 大于索引 e1 或者 e2，则同步过程结束。</p><p>e1，e2指的是未同步的节点的尾</p><h2 id="二、同步尾部节点"><a href="#二、同步尾部节点" class="headerlink" title="二、同步尾部节点"></a>二、同步尾部节点</h2><p>道理与直接相同，当新旧节点相同时，执行patch更新节点，不同或者或者索引 i 大于索引 e1 或者 e2则同步结束</p><p>之后接下来只有 3 种情况要处理：</p><ul><li><p>新子节点有剩余要添加的新节点；</p></li><li><p>旧子节点有剩余要删除的多余节点；</p></li><li><p>未知子序列。</p></li></ul><h2 id="三-1、新子节点有剩余要添加的新节点"><a href="#三-1、新子节点有剩余要添加的新节点" class="headerlink" title="三.1、新子节点有剩余要添加的新节点"></a>三.1、新子节点有剩余要添加的新节点</h2><p>首先要判断新子节点是否有剩余的情况，如果满足则添加新子节点</p><p>用索引表示尾如果索引 i 大于尾部索引 e1 且 i 小于 e2，那么从索引 i 开始到索引 e2 之间，我们直接挂载新子树这部分的节点。</p><h2 id="三-2、删除多余节点"><a href="#三-2、删除多余节点" class="headerlink" title="三.2、删除多余节点"></a>三.2、删除多余节点</h2><p>如果不满足添加新节点的情况，我就要接着判断旧子节点是否有剩余，如果满足则删除旧子节点,即</p> <p style="color: red; font-size: 16px;font-weight: bolder;">i &gt; e2</p>那么从索引 i 开始到索引 e1 之间，我们直接删除**旧子树这部分的节点**<p>前两种处理完后，i都会大于e1与e2</p><h2 id="三-3、处理未知子序列"><a href="#三-3、处理未知子序列" class="headerlink" title="三.3、处理未知子序列"></a>三.3、处理未知子序列</h2><p>首先需要明白</p><p><strong>其实无论多复杂的情况，最终无非都是通过更新、删除、添加、移动这些动作来操作节点，而我们要做的就是找到相对优的解。</strong></p><p>所以此时确定完头尾之后，需要进行移动。</p><p>第一种思路在于进行移动更新查找时，需要双重循环，而双重循环的复杂度是 O(n2) </p><p>为了优化这个复杂度，我们可以用一种空间换时间的思路，建立索引图，把时间复杂度降低到 O(n)。</p><h3 id="建立索引图"><a href="#建立索引图" class="headerlink" title="建立索引图"></a>建立索引图</h3><p>通常我们在开发过程中， 会给 v-for 生成的列表中的每一项分配唯一 key 作为项的唯一 ID，这个 key 在 diff 过程中起到很关键的作用。对于新旧子序列中的节点，我们认为 key 相同的就是同一个节点，直接执行 patch 更新即可。</p><p>我们根据 key 建立新子序列的索引图，实现如下：</p><pre><code>const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) =&gt; {  let i = 0  const l2 = c2.length  // 旧子节点的尾部索引  let e1 = c1.length - 1  // 旧子序列开始索引，从 i 开始记录  const s1 = i  // 新子序列开始索引，从 i 开始记录  const s2 = i //  // 5.1 根据 key 建立新子序列的索引图  const keyToNewIndexMap = new Map()  for (i = s2; i &lt;= e2; i++) {const nextChild = c2[i]keyToNewIndexMap.set(nextChild.key, i)  }}</code></pre><p>之后更新和移除旧节点，</p><p>最后移动和挂载新节点</p><p>需要注意的是子节点更新调用的是 patch 方法， Vue.js 正是通过这种递归的方式完成了整个组件树的更新。</p><p>核心 diff 算法中最复杂就是求解最长递增子序列</p><h2 id="总结、组件更新流程展示；"><a href="#总结、组件更新流程展示；" class="headerlink" title="总结、组件更新流程展示；"></a>总结、组件更新流程展示；</h2><p><a href="https://imgtu.com/i/RmkbtI"><img src="https://z3.ax1x.com/2021/06/22/RmkbtI.png" alt="RmkbtI.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;组件渲染过程的本质在于吧各种类型的 vnode 渲染成真实 DOM。&lt;/p&gt;
&lt;p&gt;组件是由模板、组件描述对象和数据构成的，数据的变化会影响</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0核心组件实现" scheme="https://useritem.github.io/tags/vue3-0%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>侦听器的实现及应用</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E4%BE%A6%E5%90%AC%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E4%BE%A6%E5%90%AC%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%BA%94%E7%94%A8/</id>
    <published>2021-07-06T14:17:30.000Z</published>
    <updated>2021-07-06T14:28:08.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>侦听器 – 为了观察数据的变化然后并执行一定的逻辑</p><h3 id="vue2-x"><a href="#vue2-x" class="headerlink" title="vue2.x"></a>vue2.x</h3><p>2.x的两种方法：watch选项与$watch API去创建（可进行创建与销毁）</p><p>watch方法：</p><pre><code>export default {      watch: {         a(newVal, oldVal) {           console.log('new: %s,00 old: %s', newVal, oldVal)     }   } } </code></pre><p>$watch API方法：</p><pre><code>const unwatch = vm.$watch('a', function(newVal, oldVal) {       console.log('new: %s, old: %s', newVal, oldVal) }) </code></pre><p>这个方法通过 $watch API 创建的侦听器 watcher 会返回一个 unwatch 函数，你可以随时执行它来停止这个 watcher 对数据的侦听，而对于 watch 选项创建的侦听器，它会随着组件的销毁而停止对数据的侦听。</p><h1 id="一、watch-API-实现监听"><a href="#一、watch-API-实现监听" class="headerlink" title="一、watch API 实现监听"></a>一、watch API 实现监听</h1><h2 id="1、用法"><a href="#1、用法" class="headerlink" title="1、用法:"></a>1、用法:</h2><p>1 监听getter – 返回响应式对象 ，一旦响应式对象更新 — 就会返回对应回调函数。</p><pre><code>import { reactive, watch } from 'vue' const state = reactive({ count: 0 }) watch(() =&gt; state.count, (count, prevCount) =&gt; {       // 当 state.count 更新，会触发此回调函数 }) </code></pre><p>2.监听响应式对象 – 对象更新直接执行回调函数</p><pre><code>import { ref, watch } from 'vue' const count = ref(0) watch(count, (count, prevCount) =&gt; {       // 当 count.value 更新，会触发此回调函数 }) </code></pre><p>3.多个响应式对象（数组形式）  – 一个更新就执行回调</p><pre><code>import { ref, watch } from 'vue' const count = ref(0) const count2 = ref(1) watch([count, count2], ([count, count2], [prevCount, prevCount2]) =&gt; {       // 当 count.value 或者 count2.value 更新，会触发此回调函数 }) </code></pre><h2 id="2、实现原理"><a href="#2、实现原理" class="headerlink" title="2、实现原理"></a>2、实现原理</h2><p>通过联想侦听器与副作用函数effect很像（当侦听的对象或者函数发生了变化则自动执行某个回调函数）， 所以想到其内部实现了effect，看源码发出现其内部主要就是实现了doWatch函数，而doWatch部分确实实现了effect。</p><p>dowatch的具体行为 – <strong>五步走</strong></p><pre><code>function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {   // 标准化 source   // 构造 applyCb 回调函数   // 创建 scheduler 时序执行函数   // 创建 effect 副作用函数   // 返回侦听器销毁函数 }   </code></pre><p>具体分析：</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="1-标准化source-–-watch-函数的第一个参数"><a href="#1-标准化source-–-watch-函数的第一个参数" class="headerlink" title="1.标准化source  – watch 函数的第一个参数"></a>1.标准化source  – watch 函数的第一个参数</h3><p>它代表的是监听的<strong>目标是啥（即监听对象的处理）</strong> – 上面说的有三个，所以先应该进行标准化，即根据目标类型。标准成为<strong>getter函数</strong>。（三种情况）</p><ul><li><p>情况一：如果 source 是 ref 对象，则创建一个访问 source.value 的 getter 函数;</p></li><li><p>情况二 ：如果 source 是 reactive 对象，则创建一个访问 source 的 getter 函数，并设置 deep 为 true（deep 的作用我稍后会说）;</p></li><li><p>情况三：如果 source 是一个函数，则会进一步判断第二个参数 cb 是否存在，对于 watch API 来说，cb 是一定存在且是一个回调函数，这种情况下，getter 就是一个简单的对 source 函数封装的函数。</p></li></ul><h4 id="产物getter分析"><a href="#产物getter分析" class="headerlink" title="产物getter分析"></a>产物getter分析</h4><p>getter函数 – 返回响应式对象，在创建effect runner函数时，被作为watcher求值的结果。</p><p style="color: red; font-size: 16px;font-weight: bolder;">每次执行 runner 就会把 getter 函数返回的响应式对象作为 watcher 求值的结果</p><p></p><p>deep == true时 ，表示需要进行traverse 函数<strong>递归每一个value的子属性</strong>，</p><p>注意deeper意思  -=– 表面含义是深度侦听，实际上是通过遍历对象的每一个子属性来实现，—-解决嵌套较深的问题</p><p>例子：</p><pre><code>import { reactive, watch } from 'vue' const state = reactive({   count: {         a: {       b: 1     }   } }) watch(state.count, (count, prevCount) =&gt; { console.log(count) }) state.count.a.b = 2  </code></pre><p>前提：我们知道只有对象属性先被访问触发了依赖收集，再去修改这个属性，才可以通知对应的依赖更新。</p><p>当我们执行 watch 函数的时候，我们知道如果侦听的是一个 reactive 对象，那么内部会设置 deep 为 true，然后执行 traverse 去递归访问对象深层子属性。。。</p><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p>减少traverse 函数递归的性能损耗  —- 只监听getter函数</p><pre><code>watch(() =&gt; state.count.a.b, (newVal, oldVal) =&gt; { console.log(newVal) }) state.count.a.b = 2 </code></pre><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h3 id="2-构造回调函数-–-第二个参数-cb（功能实现）"><a href="#2-构造回调函数-–-第二个参数-cb（功能实现）" class="headerlink" title="2.构造回调函数 – 第二个参数 cb（功能实现）"></a>2.构造回调函数 – 第二个参数 cb（功能实现）</h3><p>cb函数参数 — 作用在于侦听一个值的变化，如果值变了就执行回调函数，回调函数里可以访问到新值和旧值。</p><p>cb函数的三个参数 — 第一个 newValue 代表新值；第二个 oldValue 代表旧值。第三个参数 onInvalidate用于注册无效的回调函数。</p><h4 id="构造回调函数的处理逻辑"><a href="#构造回调函数的处理逻辑" class="headerlink" title="构造回调函数的处理逻辑"></a>构造回调函数的处理逻辑</h4><p>主要需要注意的是两个函数，一个是onInvalidate – 注册无效回调函数</p><p>另一个为applyCb  – 表示对cb的封装，*** 这个函数的实现就是“两步走”：</p><ul><li>1、执行runner函数求新值，实际上就是执行前面创建的 getter 函数求新值。</li><li>2、判断，如果是 deep 的情况或者新旧值发生了变化，则执行回调函数 cb，传入参数 newValue 和 oldValue。</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>（1）watch API 和组件实例相关，因为通常我们会在组件的 setup 函数中使用它，当组件销毁后，回调函数 cb 不应该被执行而是直接返回.</p><p>（2）第一次执行的时候旧值的初始值是空数组或者 undefined。执行完回调函数 cb 后，把旧值 oldValue 再更新为 newValue，这是为了下一次的比对</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h3 id="3-创建-scheduler-–-涉及到第三个参数"><a href="#3-创建-scheduler-–-涉及到第三个参数" class="headerlink" title="3.创建 scheduler – 涉及到第三个参数"></a>3.创建 scheduler – 涉及到第三个参数</h3><h4 id="1-scheduler作用"><a href="#1-scheduler作用" class="headerlink" title="1.scheduler作用"></a>1.scheduler作用</h4><p>scheduler 的作用是根据某种<strong>调度的方式</strong>去执行某种函数，在 watch API 中，主要影响到的是回调函数的执行方式。</p><p>options参数表示了 — <strong>配置，决定了watcher的不同的行为</strong>  – 一般就是deeper，即可以对其进行主动设置，不用再要求传入的是 – source==reactive</p><h4 id="2-scheduler的决定因素"><a href="#2-scheduler的决定因素" class="headerlink" title="2.scheduler的决定因素"></a>2.scheduler的决定因素</h4><p>scheduler 的创建逻辑受到了第三个参数 Options 中的 flush 属性值的影响，不同的 flush 决定了 watcher 的执行时机。 – flush的三种情况</p><ul><li><p>当 flush 为 sync 的时候，表示它是一个同步 watcher，即当数据变化时同步执行回调函数。</p></li><li><p>当 flush 为 pre 的时候，回调函数通过 queueJob 的方式在组件更新之前执行，如果组件还没挂载，则同步执行确保回调函数在组件挂载之前执行。</p></li><li><p>如果没设置 flush，那么回调函数通过 queuePostRenderEffect 的方式在组件更新之后执行。</p></li></ul><p style="color: red; font-size: 16px;font-weight: bolder;">watcher 的回调函数是通过一定的调度方式执行的。</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h3 id="4、创建effect-–-核心实现"><a href="#4、创建effect-–-核心实现" class="headerlink" title="4、创建effect  – 核心实现"></a>4、创建effect  – 核心实现</h3><p>前面的分析我们提到了 runner，它其实就是 watcher 内部创建的 effect 函数，–核心部分</p><pre><code>const runner = effect(getter, {       // 延时执行   lazy: true,       // computed effect 可以优先于普通的 effect 先运行，比如组件渲染的 effect    computed: true,   onTrack,    onTrigger,   scheduler: applyCb ? () =&gt; scheduler(applyCb) : scheduler })     // 在组件实例中记录这个 effect recordInstanceBoundEffect(runner)     // 初次执行 if (applyCb) {       if (immediate) {     applyCb()   }   else {     // 求旧值 oldValue = runner()   }     } else {       // 没有 cb 的情况   runner() } </code></pre><p>主要就是即通过 effect API 创建一个副作用函数 runner ，重要关注就是四大点</p><ul><li>1、runner 是一个 computed effect。（优先执行，即置 flush 为 pre 的时候，watcher 的执行可以优先于组件更新。）</li><li>2、runner 执行的方式</li><li>3、runner 的返回结果 (手动执行 runner 就相当于执行了前面标准化的 getter 函数)</li><li>4、配置了 immediate 的情况</li></ul><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><h3 id="5-返回销毁函数-–-最后一步"><a href="#5-返回销毁函数-–-最后一步" class="headerlink" title="5.返回销毁函数  – 最后一步"></a>5.返回销毁函数  – 最后一步</h3><p>销毁函数内部会执行 stop 方法让 runner 失活，并清理 runner 的相关依赖，这样就可以停止对数据的侦听。并且，如果是在组件中注册的 watcher，也会移除组件 effects 对这个 runner 的引用。</p><h3 id="内部总结"><a href="#内部总结" class="headerlink" title="内部总结"></a>内部总结</h3><p>我们可以侦听响应式数据的变化，内部创建 effect runner，首次执行 runner 做依赖收集，然后在数据发生变化后，以某种调度方式去执行回调函数。</p><h1 id="二、异步"><a href="#二、异步" class="headerlink" title="二、异步"></a>二、异步</h1><p>分析第三步，由于回调函数以一中调度的方式执行的，特别是当 flush 不是 sync 时，它会把回调函数执行的任务推到一个异步队列中执行。，所以开始对异步进行分析</p><h2 id="1、设计原因"><a href="#1、设计原因" class="headerlink" title="1、设计原因"></a>1、设计原因</h2><p>例子</p><pre><code>import { reactive, watch } from 'vue' const state = reactive({ count: 0 }) watch(() =&gt; state.count, (count, prevCount) =&gt; {       console.log(count) }) state.count++ state.count++ state.count++ </code></pre><p>解释：因为在一个 <strong>Tick（宏任务执行的生命周期）</strong>内，即使多次修改侦听的值，它的回调函数也只执行一次</p><p>扩展：</p><p>组件的更新过程是异步的，我们知道修改模板中引用的响应式对象的值时，会触发组件的重新渲染，但是在一个 Tick 内，即使你多次修改多个响应式对象的值，组件的重新渲染也<strong>只执行一次</strong>。这是因为如果每次更新数据都触发组件重新渲染，那么重新渲染的次数和代价都太高了。  – 节约渲染开销</p><h2 id="2、创建"><a href="#2、创建" class="headerlink" title="2、创建"></a>2、创建</h2><p>通过前面的分析我们知道，在创建一个 watcher 时，如果配置 flush 为 pre 或不配置 flush ，那么 watcher 的回调函数就会异步执行。此时分别是通过 queueJob 和 queuePostRenderEffect （见上面第三步）把回调函数推入异步队列中的。</p><p>在不涉及 suspense 的情况下，queuePostRenderEffect 相当于 queuePostFlushCb,</p><pre><code>// 异步任务队列 const queue = [] // 队列任务执行完后执行的回调函数队列 const postFlushCbs = [] function queueJob(job) {       if (!queue.includes(job)) {     queue.push(job)     queueFlush()   }     } function queuePostFlushCb(cb) {   if (!isArray(cb)) {     postFlushCbs.push(cb)   }   else {     // 如果是数组，把它拍平成一维 postFlushCbs.push(...cb)   }   queueFlush() }</code></pre><p>实现就是两个维护， queue 数组和一个 postFlushCbs 数组，其中 queue 数组用作异步任务队列， postFlushCbs 数组用作异步任务队列执行完毕后的回调函数队列。且两个任务，第二个任务中有queueFlush 函数</p><p>它的实现也是两个维护，两个函数，两个变量比较重要，主要用来控制异步任务的刷新逻辑 </p><p>isFlushPending 用于判断是否在等待 nextTick 执行 flushJobs，而 isFlushing 是判断是否正在执行任务队列。</p><h2 id="3、执行-–-进行异步执行队列"><a href="#3、执行-–-进行异步执行队列" class="headerlink" title="3、执行  – 进行异步执行队列"></a>3、执行  – 进行异步执行队列</h2><p>也就是flushJobs 函数开始执行</p><p>主要就是先对queueFlush中从参数进行重新赋值，会把 isFlushPending 重置为 false，把 isFlushing 设置为 true 来表示正在执行异步任务队列。</p><p>之后就是对queue进行从小到大的排序并遍历，之后执行flushPostFlushCbs 方法（遍历执行所有推入到 postFlushCbs 的回调函数）</p><p>（执行在这个函数需要注意应该进行拷贝）</p><p>最后遍历完 postFlushCbs 后，再对重置 isFlushing 为 false</p><h3 id="排序的原因"><a href="#排序的原因" class="headerlink" title="排序的原因"></a>排序的原因</h3><ul><li><p>（1）我们创建组件的过程是由父到子，所以创建组件副作用渲染函数也是先父后子，父组件的副作用渲染函数的 effect id 是小于子组件的，每次更新组件也是通过 queueJob 把 effect 推入异步任务队列 queue 中的。所以为了保证先更新父组再更新子组件，要对 queue 做从小到大的排序。</p></li><li><p>（2）如果一个组件在父组件更新过程中被卸载，它自身的更新应该被跳过。所以也应该要保证先更新父组件再更新子组件，要对 queue 做从小到大的排序。</p></li></ul><h2 id="4、检测循环更新"><a href="#4、检测循环更新" class="headerlink" title="4、检测循环更新"></a>4、检测循环更新</h2><p>由于在遍历执行异步任务和回调函数的过程中，都会在非生产环境下执行 checkRecursiveUpdates 检测是否有循环更新</p><h3 id="解决的问题："><a href="#解决的问题：" class="headerlink" title="解决的问题："></a>解决的问题：</h3><p>一旦watcher中进行了更新数据，即再一次<strong>进入回调函数</strong>，如果不控制，就凉凉–回调函数一直执行，直到内存耗尽造成浏览器假死。  （没办法侦听器本质就是数据变化–执行回调）</p><h3 id="解决：-checkRecursiveUpdates-方法："><a href="#解决：-checkRecursiveUpdates-方法：" class="headerlink" title="解决： checkRecursiveUpdates 方法："></a>解决： checkRecursiveUpdates 方法：</h3><pre><code>const RECURSION_LIMIT = 100 function checkRecursiveUpdates(seen, fn) {       if (!seen.has(fn)) {     seen.set(fn, 1)   } else {     const count = seen.get(fn) if (count &gt; RECURSION_LIMIT) {   throw new Error('Maximum recursive updates exceeded. ' +     "You may have code that is mutating state in your component's " +     'render function or updated hook or watcher source function.') } else {   seen.set(fn, count + 1) }   } } </code></pre><p>由于当异步函数flushJobs 一开始便创建了 seen（一个 Map 对象）</p><p>在 checkRecursiveUpdates 的时候会把任务添加到 seen 中，记录引用计数 count，初始值为 1，如果 postFlushCbs 再次添加了<strong>相同的任务</strong>，则引用计数 count 加 1，如果 count 大于我们定义的限制 100 ，则说明一直在添加这个相同的任务并超过了 100 次。那么，Vue.js 会抛出这个错误   — 代表正常使用中不应该这样。 例子如下</p><pre><code>import { reactive, watch } from 'vue' const state = reactive({ count: 0 }) watch(() =&gt; state.count, (count, prevCount) =&gt; {       state.count++       console.log(count) }) state.count++ </code></pre><p>如果你去跑这个示例，你会在控制台看到输出了 101 次值，然后报了错误： Maximum recursive updates exceeded 。</p><h2 id="5、优化：只用一个变量-对于queueFlush-函数"><a href="#5、优化：只用一个变量-对于queueFlush-函数" class="headerlink" title="5、优化：只用一个变量  - 对于queueFlush 函数"></a>5、优化：只用一个变量  - 对于queueFlush 函数</h2><p>首先说明两个变量的作用：</p><ul><li><p>在一个 Tick（宏任务执行的生命周期） 内可以多次添加任务到队列中，但是任务队列会在 nextTick 后执行；</p></li><li><p>在执行任务队列的过程中，也可以添加新的任务到队列中，并且在当前 Tick 去执行剩余的任务队列。</p></li></ul><p>优化 —仅用一个变量</p><pre><code>function queueFlush() {       if (!isFlushing) { isFlushing = true nextTick(flushJobs)   } } function flushJobs(seen) {       let job   if ((process.env.NODE_ENV !== 'production')) {     seen = seen || new Map()   } queue.sort((a, b) =&gt; getId(a) - getId(b)) while ((job = queue.shift()) !== undefined) { if (job === null) {   continue } if ((process.env.NODE_ENV !== 'production')) {   checkRecursiveUpdates(seen, job) } callWithErrorHandling(job, null, 14 /* SCHEDULER */)   } flushPostFlushCbs(seen) if (queue.length || postFlushCbs.length) { flushJobs(seen)   } isFlushing = false } </code></pre><p>可以看到，我们只需要一个 isFlushing 来控制就可以实现相同的功能了。在执行 queueFlush 的时候，判断 isFlushing 为 false，则把它设置为 true，然后 nextTick 会执行 flushJobs。在 flushJobs 函数执行完成的最后，也就是所有的任务（包括后添加的）都执行完毕，再设置 isFlushing 为 false。</p><h1 id="三、扩展：watchEffect-API"><a href="#三、扩展：watchEffect-API" class="headerlink" title="三、扩展：watchEffect API"></a>三、扩展：watchEffect API</h1><p>watchEffect API 的作用是注册一个<strong>副作用函数</strong>，副作用函数内部可以访问到响应式对象，当内部响应式对象变化后再<strong>立即执行</strong>这个函数。</p><pre><code>import { ref, watchEffect } from 'vue' const count = ref(0) watchEffect(() =&gt; console.log(count.value)) count.value++ //输出0 1</code></pre><h2 id="1、区分watch-API"><a href="#1、区分watch-API" class="headerlink" title="1、区分watch API"></a>1、区分watch API</h2><ul><li><p>1.<strong>侦听的源不同</strong> 。watch API 可以侦听一个或多个响应式对象，也可以侦听一个 getter 函数，而 watchEffect API 侦听的是<strong>一个普通函数，只要内部访问了响应式对象即可，这个函数并不需要返回响应式对象</strong>。</p></li><li><p>2.<strong>没有回调函数</strong> 。watchEffect API 没有回调函数，副作用函数的内部响应式对象发生变化后，会再次执行这个副作用函数。</p></li><li><p>3.<strong>立即执行</strong> 。watchEffect API 在创建好 watcher 后，会立刻执行它的副作用函数，而 watch API 需要配置 immediate（创建effect，即runner函数时进行配置） 为 true，才会立即执行回调函数。</p></li></ul><h2 id="2、onInvalidate-参数注册无效回调函数"><a href="#2、onInvalidate-参数注册无效回调函数" class="headerlink" title="2、onInvalidate 参数注册无效回调函数"></a>2、onInvalidate 参数注册无效回调函数</h2><p> onInvalidate 在 doWatch 中的实现：</p><pre><code>const onInvalidate = (fn) =&gt; { cleanup = runner.options.onStop = () =&gt; {     callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);   }; }; </code></pre><p>实际上，当你执行 onInvalidate 的时候，就是注册了一个 cleanup 和 runner 的 onStop 方法，这个方法内部会执行 fn，也就是你注册的无效回调函数。</p><p>也就是说当响应式数据发生变化，会执行 cleanup 方法，当 watcher 被停止，会执行 onStop 方法，这两者都会执行注册的无效回调函数 fn。</p><p>通过这种方式，Vue.js 就很好地实现了 watcher 注册无效回调函数的需求。</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>有些时候，watchEffect 会注册一个副作用函数，在函数内部可以做一些异步操作，但是当这个 watcher 停止后，如果我们想去对这个异步操作做一些额外事情（比如取消这个异步操作），我们可以通过 onInvalidate 参数注册一个无效函数。</p><pre><code>import {ref, watchEffect } from 'vue' const id = ref(0) watchEffect(onInvalidate =&gt; {   // 执行异步操作   const token = performAsyncOperation(id.value)   onInvalidate(() =&gt; {     // 如果 id 发生变化或者 watcher 停止了，则执行逻辑取消前面的异步操作     token.cancel()       }) }) </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;侦听器 – 为了观察数据的变化然后并执行一定的逻辑&lt;/p&gt;
&lt;h3 id=&quot;vue2-x&quot;&gt;&lt;a href=&quot;#vue2-x&quot; cl</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="Composition" scheme="https://useritem.github.io/tags/Composition/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入分析</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/</id>
    <published>2021-07-06T14:16:59.000Z</published>
    <updated>2021-07-06T14:28:08.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>涉及到<strong>组件通信的问题时</strong>，一般都会想到父子组件之间的prop进行通信，但是要实现<strong>跨父子组件之间的通信</strong>，需要进行依赖注入。</p><h3 id="vue2-x实现依赖注入-–-Options的provide-和-inject"><a href="#vue2-x实现依赖注入-–-Options的provide-和-inject" class="headerlink" title="vue2.x实现依赖注入 – Options的provide 和 inject"></a>vue2.x实现依赖注入 – Options的provide 和 inject</h3><pre><code>//  父组件使用provide进行数据提供：  --代表祖先组件进行数据的提供   export default {      provide: function () {             return {               foo: this.foo         }       }     }// 任意子孙组件都可以进行变量的注入 -- injectexport default {     inject: ['foo'] }</code></pre><h3 id="vue3-x"><a href="#vue3-x" class="headerlink" title="vue3.x"></a>vue3.x</h3><p>本质就是换汤不换药，就是除了Options，就是变为了API可以在setup中进行调用，例子：</p><pre><code>// 祖先提供响应式数据themeimport { provide, ref } from 'vue'     export default {         setup() {             const theme = ref('dark')             provide('theme', theme)    //前一个变量key表示提供的依赖名字            }     }import { inject } from 'vue'     export default {         setup() {             const theme = inject('theme', 'light')  //第二个参数表示如果祖先组件上下文没有提供theme，那么就使用light            return {                   theme                 }         }     }</code></pre><p>实际理解上 – 可以依赖注入看作<strong>“大范围的prop”</strong>，最主要的是：</p> <p style="color: red; font-size: 16px;font-weight: bolder;">祖先组件不需要知道哪些后代组件在使用它提供的数据，后代组件也不需要知道注入的数据来自哪里。</p><h1 id="一、依赖注入实现"><a href="#一、依赖注入实现" class="headerlink" title="一、依赖注入实现"></a>一、依赖注入实现</h1><h2 id="1、provide-API"><a href="#1、provide-API" class="headerlink" title="1、provide API"></a>1、provide API</h2><p>在创建组件实例的时候，组件实例的 provides 对象指向父组件实例的 provides 对象：</p><pre><code>const instance = {     // 依赖注入相关 provides: parent ? parent.provides : Object.create(appContext.provides), // 主要理解就是一直想上指// 其它属性 // ... }</code></pre><p>图示：</p><p><a href="https://imgtu.com/i/R7pL7V"><img src="https://z3.ax1x.com/2021/07/06/R7pL7V.md.png" alt="R7pL7V.md.png"></a></p><p>个人理解就是一直向上寻找与继承 —–&gt; 组件实例的 provides 继承它的父组件，当中间组件需要自己的值的时候，会通过<strong>父级组件提供的对象</strong>，来创建自己的对象原型，之后在后面注入inject时，通过<strong>原型链</strong>进行获取。</p><p>另外，如果组件实例提供和父级 provides 中有相同 key（第一个参数一样） 的数据，是可以<strong>覆盖父级</strong>提供的数据。</p><h2 id="2、inject-API"><a href="#2、inject-API" class="headerlink" title="2、inject API"></a>2、inject API</h2><p>上面介绍了，inject的两个参数一个是key值（provide的第一个参数），第二个表示默认值（无数据时，直接返回的）</p><p>如果既查找不到数据且也没有传入默认值，则在非生产环境下报警告，提示用户找不到这个注入的数据。</p><p>inject实现源码：</p><pre><code>function inject(key, defaultValue) { const instance = currentInstance || currentRenderingInstance if (instance) { const provides = instance.provides if (key in provides) {   return provides[key] } else if (arguments.length &gt; 1) {   return defaultValue } else if ((process.env.NODE_ENV !== 'production')) {   warn(`injection "${String(key)}" not found.`) } } }</code></pre><p>抛出问题 —- 都是实现跨组件的数据的共享，provide/inject与export/import 的差异实际也是依赖注入和模块化共享数据的差异。</p><h1 id="二、对比与模块化共享数优劣"><a href="#二、对比与模块化共享数优劣" class="headerlink" title="二、对比与模块化共享数优劣"></a>二、对比与模块化共享数优劣</h1><h2 id="1、对比模块化共享数据的方式"><a href="#1、对比模块化共享数据的方式" class="headerlink" title="1、对比模块化共享数据的方式"></a>1、对比模块化共享数据的方式</h2><p>模块化共享数据的方式，例：</p><pre><code>// Root.js祖先组件export const sharedData = ref('') export default {   name: 'Root',   setup() {// ...   },   // ... }//子组件的引用sharedDataimport { sharedData } from './Root.js' export default { name: 'Root',   setup() {// 这里直接使用 sharedData 即可   } }</code></pre><p>这看似都是共享数据，但是其实有着三大不同：</p><h3 id="1-作用域不同"><a href="#1-作用域不同" class="headerlink" title="1.作用域不同"></a>1.作用域不同</h3><ul><li>依赖注入 — 局部范围，仅可以<strong>后代</strong>组件访问，不是整棵树</li><li>模块化 – 全局范围，任何地方都可以</li></ul><h3 id="2-数据来源不同"><a href="#2-数据来源不同" class="headerlink" title="2.数据来源不同"></a>2.数据来源不同</h3><ul><li>依赖注入 — 无需知道注入数据的来源</li><li>模块化 – 必须知道因为需要from</li></ul><h3 id="3-上下文不同"><a href="#3-上下文不同" class="headerlink" title="3.上下文不同"></a>3.上下文不同</h3><ul><li>依赖注入 —上下文就是组件实例，而且同一个组件定义是可以有多个组件实例的，我们可以根据<strong>不同的组件上下文</strong>提供不同的数据给后代组件</li><li>模块化 – 没有任何上下文的，仅仅是这个模块定义的数据，如果想要根据<strong>不同的情况提供不同数据</strong>，那么从 API 层面设计就需要做更改。比如允许用户传递一个参数：</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><pre><code>export function getShareData(context) { // 根据不同的 context 参数返回不同的数据 }</code></pre><h2 id="2、依赖注入的缺陷和应用场景"><a href="#2、依赖注入的缺陷和应用场景" class="headerlink" title="2、依赖注入的缺陷和应用场景"></a>2、依赖注入的缺陷和应用场景</h2><p>由于依赖注入是和上下文相关的，所以它会将你应用<strong>程序中的组件与它们当前的组织方式耦合</strong>起来，这使得重构变得困难。，确认依赖注入的特点</p> <p style="color: red; font-size: 16px;font-weight: bolder;">祖先组件不需要知道哪些后代组件在使用它提供的数据，后代组件也不需要知道注入的数据来自哪里。</p><p>所以一旦在重构中不小心挪动了有依赖注入的后代组件的位置，或者是挪动了提供数据的祖先组件的位置，都有可能导致后代组件丢失注入的数据，进而导致应用程序异常。所以，个人感觉不应该在<strong>普通应用程序代码中使用依赖注入</strong>。</p><p>推荐方式就是在组件库的开发中使用，因为对于一个特定组件，它和其嵌套的子组件上下文联系很紧密。</p><p>主要原因在于组件库的场景中，依赖注入还是很方便的，除了示例中提供组件实例数据，还可以提供任意类型的数据。因为入口组件和它的相关子组件关联性是很强的，无论后代组件的结构如何变化，最终都会渲染在入口组件的子树上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了对依赖注入的使用场景和它的缺陷，更主要的是vue2.x与3.x的对比，主要就是3.x不再是通过编写一些<strong>组件配置去描述一个组件</strong>，更像是主动调用一些 API 去编写组件的实现逻辑,更在于去主动设计。</p><p>使用3.x的 Composition API 去编写组件，用户更清楚自己在做什么事情，不再是黑盒了。</p><p>还有就是Composition API 比 mixin（混入，分发 Vue 组件中的可复用功能） 更适合逻辑复用，例子对比</p><pre><code>//mixin使用&lt;template&gt;       &lt;div&gt;             Mouse position: x {{ x }} / y {{ y }}   &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import mousePositionMixin from './mouse' export default {       mixins: [mousePositionMixin] } &lt;/script&gt;</code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>在组件中申明了 mousePositionMixin，组件模板中使用的 x、y 就来源于这个 mixin，这一切都是 Vue.js 内部帮我们做的。如果该组件只引入这单个 mixin，问题倒不大，但如果这个组件引入的 mixin 越来越多，很容易出现命名冲突的情况，以及造成数据来源不清晰等问题。</p><p> Composition API 去编写功能类似的 hook 函数：</p><pre><code>&lt;template&gt;       &lt;div&gt; Mouse position: x {{ x }} / y {{ y }}       &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import useMousePosition from './mouse' export default { setup() {   const { x, y } = useMousePosition()   return { x, y }  } } &lt;/script&gt;</code></pre><p>我们可以清楚地分辨出模板中使用的 x、y 是来源于 useMousePosition 函数，即便我们引入更多的 hook 函数，也不会出现命名冲突的情况（就是代码量大一点）。</p><p>其实，二者都是把复用的逻辑放在单独的文件中维护。但从使用的方式而言，用户只是在需要混入 mixin 的组件中去申明这个 mixin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;涉及到&lt;strong&gt;组件通信的问题时&lt;/strong&gt;，一般都会想到父子组件之间的prop进行通信，但是要实现&lt;strong&gt;跨父子组件之</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="Composition" scheme="https://useritem.github.io/tags/Composition/"/>
    
  </entry>
  
  <entry>
    <title>响应式的实现</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-07-06T14:16:43.000Z</published>
    <updated>2021-07-06T14:28:08.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>响应式与组件化都是vue.js的重要核心设计思想</p><p>对于响应式。它的本质是当数据变化后会自动执行某个函数，映射到组件的实现就是，当数据变化后，会自动触发组件的重新渲染。</p><h1 id="一、对比两代"><a href="#一、对比两代" class="headerlink" title="一、对比两代"></a>一、对比两代</h1><h2 id="vue2-0："><a href="#vue2-0：" class="headerlink" title="vue2.0："></a>vue2.0：</h2><p>vue.js2.0内部通过 Object.defineProperty API 劫持数据的变化，主要表现为在数据访问时，进行<strong>依赖收集</strong>，在数据变化时，进行<strong>依赖更新</strong>，其流程图为：</p><p><a href="https://imgtu.com/i/R66SzR"><img src="https://z3.ax1x.com/2021/07/02/R66SzR.png" alt="R66SzR.png"></a></p><p>在相应对象的实现上表现为：data与created中定义数据的区别，前者为响应式</p><h2 id="vue3-0"><a href="#vue3-0" class="headerlink" title="vue3.0"></a>vue3.0</h2><p>由于 Object.defineProperty API 的一些缺点：</p><div style="color: red; font-size: 20px;margin-top: 10px;">不能监听对象属性新增和删除；初始化阶段递归执行 Object.defineProperty 带来的性能负担。</div><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>vue3.0使用代理Proxy进行重写，并独立发布reactivity库，表现为<strong>使用reactvieAPI标记数据为响应式。</strong></p><p>流程图为</p><p><a href="https://imgtu.com/i/R669Q1"><img src="https://z3.ax1x.com/2021/07/02/R669Q1.png" alt="R669Q1.png"></a></p><h4 id="主要区别在于"><a href="#主要区别在于" class="headerlink" title="主要区别在于"></a>主要区别在于</h4><p>主要就是 劫持数据的方式改成用 Proxy 实现 ， 以及收集的依赖由 watcher 实例变成了组件副作用渲染函数 。</p><p>例子：</p><pre><code>setup() {  const state = reactive({    msg: 'msg reactive'  })return {    state}}</code></pre><p>解释：直接reactive API，它可以把一个对象数据变成响应式，让用户进行明确。</p><h1 id="二、分析Reactive-API"><a href="#二、分析Reactive-API" class="headerlink" title="二、分析Reactive API"></a>二、分析Reactive API</h1><h2 id="1、响应式原因"><a href="#1、响应式原因" class="headerlink" title="1、响应式原因"></a>1、响应式原因</h2><p>通过 createReactiveObject 函数把 target 变成了一个响应式对象。</p><p>此函数所作的几件事（五件）</p><ul><li>1.先判断target 是不是数组或者对象类型，如果不是则直接返回。<strong>所以原始数据 target 必须是对象或者数组。</strong>，对于本来就是响应式的返回自身，还有canObserve限制等     — 判断</li><li>2.利用 Proxy 创建响应式，返回结果就是响应式对象        —- 创建</li><li>3.给原始数据打个标识         — 标识</li></ul><h2 id="2、分析Proxy-API"><a href="#2、分析Proxy-API" class="headerlink" title="2、分析Proxy API"></a>2、分析Proxy API</h2><p>通过Proxy API劫持的target对象，也就是mutableHandlers 的实现，本质就是一种<strong>劫持</strong>observed 对象的一些操作，实现如下：</p><pre><code>const mutableHandlers = {      get,                              //访问对象属性时触发     set,                      //设置属性触发      deleteProperty,                  //删除      has,                    //in操作     ownKeys                         //通过 Object.getOwnPropertyNames 访问对象属性名会触发 }        </code></pre><p>因为无论命中哪个处理器函数，它都会做依赖收集和派发通知这两件事其中的一个，所以重点分析其中的get<strong>依赖的收集</strong>与set<strong>派发通知</strong>。</p><h2 id="3、依赖收集：get-函数"><a href="#3、依赖收集：get-函数" class="headerlink" title="3、依赖收集：get 函数"></a>3、依赖收集：get 函数</h2><p>其中get需要做的有四件事</p><h3 id="1-对特殊的-key-做了代理"><a href="#1-对特殊的-key-做了代理" class="headerlink" title="1.对特殊的 key 做了代理"></a>1.对特殊的 key 做了代理</h3><p>解释了为什么我们在 createReactiveObject 函数中判断响应式对象是否存在 __v_raw 属性，如果存在就返回这个响应式对象本身。</p><pre><code>  if (key === "__v_isReactive" /* isReactive */) {  // 代理 observed.__v_isReactive  return !isReadonly}else if (key === "__v_isReadonly" /* isReadonly */) {  // 代理 observed.__v_isReadonly  return isReadonly;}else if (key === "__v_raw" /* raw */) {  // 代理 observed.__v_raw  return target}</code></pre><h3 id="2-接着通过-Reflect-get-方法求值"><a href="#2-接着通过-Reflect-get-方法求值" class="headerlink" title="2.接着通过 Reflect.get 方法求值"></a>2.接着通过 Reflect.get 方法求值</h3><p>进行数组等判断处理：</p><pre><code>const targetIsArray = isArray(target)        // arrayInstrumentations 包含对数组一些方法修改的函数    //如果 target 是数组且 key 命中了 arrayInstrumentations，则执行对应的函数if (targetIsArray &amp;&amp; hasOwn(arrayInstrumentations, key)) {  return Reflect.get(arrayInstrumentations, key, receiver)}        // 求值const res = Reflect.get(target, key, receiver)    // 内置 Symbol key 不需要依赖收集if (isSymbol(key) &amp;&amp; builtInSymbols.has(key) || key === '__proto__') {  return res}</code></pre><h3 id="3-执行-track-函数收集依赖"><a href="#3-执行-track-函数收集依赖" class="headerlink" title="3.执行 track 函数收集依赖"></a>3.执行 track 函数收集依赖</h3><pre><code> // 依赖收集!isReadonly &amp;&amp; track(target, "get" /* GET */, key)</code></pre><p>看似简单，但是想到我们的目的就是实现响应式，所以</p><div style="color: red; font-size: 20px;margin-top: 10px;">我们收集的依赖就是数据变化后执行的副作用函数。</div><p></p><p>回到实现原理的track函数中，直接看源码：</p><pre><code>// 是否应该收集依赖let shouldTrack = true// 当前激活的 effectlet activeEffect// 原始数据对象 map   -- 它的键是 target，值是 depsMap（也是一个map），作为依赖的 Map const targetMap = new WeakMap()//key 作为访问的属性function track(target, type, key) {      if (!shouldTrack || activeEffect === undefined) {        return  }//depsMap 的键是 target 的 key，值是 dep 集合  let depsMap = targetMap.get(target)  if (!depsMap) {        // 每个 target 对应一个 depsMap        targetMap.set(target, (depsMap = new Map()))  }  let dep = depsMap.get(key)   //存储依赖的副作用函数  if (!dep) {        // 每个 key 对应一个 dep 集合        depsMap.set(key, (dep = new Set()))  }  if (!dep.has(activeEffect)) {            // 收集当前激活的 effect 作为依赖    dep.add(activeEffect)           // 当前激活的 effect 收集 dep 集合作为依赖        activeEffect.deps.push(dep)  }}</code></pre><p>图片表示关系，实际就是<strong>大map：teagetMap 套 小map depsMap</strong>：</p><p><a href="https://imgtu.com/i/R6xEK1"><img src="https://z3.ax1x.com/2021/07/02/R6xEK1.md.png" alt="R6xEK1.md.png"></a></p><h4 id="实质："><a href="#实质：" class="headerlink" title="实质："></a>实质：</h4><p>所以每次 track ，就是把当前激活的副作用函数 activeEffect 作为依赖，然后收集到 target 相关的 depsMap 对应 key 下的依赖集合 dep 中。</p><h3 id="4-会对计算的值-res-进行判断"><a href="#4-会对计算的值-res-进行判断" class="headerlink" title="4.会对计算的值 res 进行判断"></a>4.会对计算的值 res 进行判断</h3><pre><code> return isObject(res)  ? isReadonly    ?    readonly(res)    // 如果 res 是个对象或者数组类型，则递归执行 reactive 函数把 res 变成响应式    : reactive(res)  : res</code></pre><h2 id="4、派发通知：set-函数"><a href="#4、派发通知：set-函数" class="headerlink" title="4、派发通知：set 函数"></a>4、派发通知：set 函数</h2><p>，set即执行是执行 createSetter 函数需要做二件事：首先通过 Reflect.set 求值 ， 然后通过 trigger 函数派发通知 </p><p>重点就是trigger 函数的实现（四件事）：</p><ul><li><p>1.通过 targetMap 拿到 target 对应的依赖集合 depsMap；</p></li><li><p>2.创建运行的 effects 集合；</p></li><li><p>3.根据 key 从 depsMap 中找到对应的 effects 添加到 effects 集合；</p></li><li><p>4.遍历 effects 执行相关的副作用函数。</p></li></ul><p>所以每次 trigger 函数就是根据 target 和 key ，从 targetMap 中找到相关的所有副作用函数遍历执行一遍。</p><h1 id="三、名词解释"><a href="#三、名词解释" class="headerlink" title="三、名词解释"></a>三、名词解释</h1><h2 id="1、副作用函数"><a href="#1、副作用函数" class="headerlink" title="1、副作用函数"></a>1、副作用函数</h2><p>在Vue.js 3.0内部就有一个 effect 副作用函数，其函数内部通过执行 createReactiveEffect 函数去创建一个新的 effect 函数。</p><p>为了区分外部的 effect 函数，称为reactiveEffect 函数，它还有一些额外的属性以及参数，<strong>这个 reactiveEffect 函数就是响应式的副作用函数</strong>，当执行 trigger 过程派发通知的时候，执行的 effect 就是它。</p><h3 id="行为："><a href="#行为：" class="headerlink" title="行为："></a>行为：</h3><p>不仅仅是把全局的 activeEffect 指向它 ， 然后执行被包装的原始函数 fn 。真正为：</p><ul><li>1、首先它会判断 effect 的状态是否是 active</li><li>2、接着判断 effectStack 中是否包含 effect，如果没有就把 effect 压入栈内。之前我们提到，只要设置 activeEffect = effect 即可，</li></ul><h2 id="2、readonly-API"><a href="#2、readonly-API" class="headerlink" title="2、readonly API"></a>2、readonly API</h2><p>如果用 const 声明一个对象变量，虽然不能直接对这个变量赋值，但我们可以修改它的属。</p><p>如果我们希望创建只读对象，不能修改它的属性，也不能给这个对象添加和删除属性，让它变成一个真正意义上的<strong>只读对象</strong>。例：</p><pre><code>const original = {      foo: 1}const wrapped = readonly(original)wrapped.foo = 2// warn: Set operation on key "foo" failed: target is readonly.</code></pre><p>需要注意的是其实 readonly 和 reactive 函数的主要区别，就是执行 createReactiveObject 函数时的参数 isReadonly 不同。</p><h2 id="3、ref-API"><a href="#3、ref-API" class="headerlink" title="3、ref API"></a>3、ref API</h2><p>通过前面的分析，我们知道 reactive API 对传入的 target 类型有限制，必须是对象或者数组类型，而对于一些基础类型（比如 String、Number、Boolean）是不支持的。</p><p>但是有时候从需求上来说，可能我只希望把一个字符串变成响应式，却不得不封装成一个对象，这样使用上多少有一些不方便，于是 Vue.js 3.0 设计并实现了 ref API，<strong>直接对字符串进行封装</strong>。</p><p>例子：<br>    const msg = ref(‘Hello World’)<br>    msg.value = ‘Hello Vue’</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;响应式与组件化都是vue.js的重要核心设计思想&lt;/p&gt;
&lt;p&gt;对于响应式。它的本质是当数据变化后会自动执行某个函数，映射到组件的实</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="Composition" scheme="https://useritem.github.io/tags/Composition/"/>
    
  </entry>
  
  <entry>
    <title>生命周期</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-07-06T14:16:20.000Z</published>
    <updated>2021-07-06T14:28:08.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue.js 组件的生命周期包括创建、更新、销毁等过程。在这些过程中也会运行叫<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p><h3 id="vue2-x与3-x的对比"><a href="#vue2-x与3-x的对比" class="headerlink" title="vue2.x与3.x的对比"></a>vue2.x与3.x的对比</h3><pre><code>// Vue.js 2.x 定义生命周期钩子函数 export default {       created() {     // 做一些初始化工作   },   mounted() {         // 可以拿到 DOM 节点   },   beforeDestroy() { // 做一些清理操作   } } // &nbsp;Vue.js 3.x 生命周期 API 改写上例 import { onMounted, onBeforeUnmount } from 'vue' export default {  setup() {     // 做一些初始化工作 onMounted(() =&gt; {   // 可以拿到 DOM 节点 }) onBeforeUnmount(()=&gt;{   // 做一些清理操作 })   } }    </code></pre><p>说白了就是使用setup 函数代替了beforeCreate 和 created 钩子函数；onMounted API 替代了 Vue.js 2.x 的 mounted 钩子函数，用 onBeforeUnmount API 替代了 Vue.js 2.x 的 beforeDestroy 钩子函数。</p><p>3.x对于2.x的替换映射关系如下：</p><pre><code> beforeCreate -&gt; 使用 setup() created -&gt; 使用 use setup() beforeMount -&gt; onBeforeMount mounted -&gt; onMounted beforeUpdate -&gt; onBeforeUpdate updated -&gt; onUpdated beforeDestroy-&gt; onBeforeUnmount destroyed -&gt; onUnmounted activated -&gt; onActivated deactivated -&gt; onDeactivated errorCaptured -&gt; onErrorCaptured新增了两个用于调试的生命周期 API：onRenderTracked 和 onRenderTriggered。</code></pre><h1 id="生命周期钩子函数的背后原理"><a href="#生命周期钩子函数的背后原理" class="headerlink" title="生命周期钩子函数的背后原理"></a>生命周期钩子函数的背后原理</h1><h2 id="1、钩子函数的注册与实现"><a href="#1、钩子函数的注册与实现" class="headerlink" title="1、钩子函数的注册与实现"></a>1、钩子函数的注册与实现</h2><pre><code>const onBeforeMount = createHook('bm' /* BEFORE_MOUNT */) const onMounted = createHook('m' /* MOUNTED */) const onBeforeUpdate = createHook('bu' /* BEFORE_UPDATE */) const onUpdated = createHook('u' /* UPDATED */) const onBeforeUnmount = createHook('bum' /* BEFORE_UNMOUNT */) const onUnmounted = createHook('um' /* UNMOUNTED */) const onRenderTriggered = createHook('rtg' /* RENDER_TRIGGERED */) const onRenderTracked = createHook('rtc' /* RENDER_TRACKED */) const onErrorCaptured = (hook, target = currentInstance) =&gt; {       injectHook('ec' /* ERROR_CAPTURED */, hook, target) }</code></pre><p>除了onErrorCaptured，其他钩子函数都是通过 createHook 函数创建的，通过传入不同的字符串来表示不同的钩子函数。</p><p>所以实际就是探究<strong>createHook钩子函数的实现原理</strong></p><pre><code>const createHook = function(lifecycle)  {       return function (hook, target = currentInstance) {         injectHook(lifecycle, hook, target)       } }</code></pre><p>createHook 会返回一个函数，它的内部通过 <strong>injectHook</strong> 注册钩子函数。</p><p>注意使用craeteHook封装而不用injectHook进行封装主要原因就是体现一种<strong>函数柯里化技巧，减少参数</strong>，也可以：</p><pre><code>const onBeforeMount = function(hook,target = currentInstance) {     injectHook('bm', hook, target) } </code></pre><p>于是又变为探究<strong>injectHook函数的实现原理</strong></p><pre><code>function injectHook(type, hook, target = currentInstance, prepend = false) {       const hooks = target[type] || (target[type] = [])       // 封装 hook 钩子函数并缓存   const wrappedHook = hook.__weh || (hook.__weh = (...args) =&gt; {   if (target.isUnmounted) {     return   }   // 停止依赖收集   pauseTracking()   // 设置 target 为当前运行的组件实例   setCurrentInstance(target)   // 执行钩子函数   const res = callWithAsyncErrorHandling(hook, target, type, args)   setCurrentInstance(null)   // 恢复依赖收集   resetTracking()   return res })   if (prepend) {     hooks.unshift(wrappedHook)   }   else {     hooks.push(wrappedHook)   } }</code></pre><p>实际过程就是对对用户注册的钩子函数 hook 做了一层封装，然后添加到一个数组中，把数组保存在当前组件实例的 target 上，</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>对于相同的钩子函数，会把封装的 wrappedHook 钩子函数缓存到 hook.__weh 中，这样后续通过 scheduler 方式执行的钩子函数就会被去重。</p><p>在后续执行 wrappedHook 函数时，会先<strong>停止依赖收集</strong>，因为钩子函数内部访问的响应式对象，通常都已经执行过依赖收集，防止二次以节约性能。</p><p>接着是设置 target 为当前组件实例。在 Vue.js 的内部，会一直维护当前运行的组件实例 currentInstance，在注册钩子函数的过程中，我们可以拿到当前运行组件实例 currentInstance，并用 target 保存，然后在钩子函数执行时，为了确保此时的 currentInstance 和注册钩子函数时一致，<strong>会通过 setCurrentInstance(target) 设置 target 为当前组件实例</strong>。</p><p>接下来就是通过 callWithAsyncErrorHandling 方法去执行我们注册的 hook 钩子函数，函数执行完毕则设置当前运行组件实例为 null，并恢复依赖收集。</p><h1 id="分析钩子函数的执行时机和应用场景"><a href="#分析钩子函数的执行时机和应用场景" class="headerlink" title="分析钩子函数的执行时机和应用场景"></a>分析钩子函数的执行时机和应用场景</h1><h2 id="1、onBeforeMount-和-onMounted-–组件挂载"><a href="#1、onBeforeMount-和-onMounted-–组件挂载" class="headerlink" title="1、onBeforeMount 和 onMounted –组件挂载"></a>1、onBeforeMount 和 onMounted –组件挂载</h2><p>onBeforeMount 注册的 beforeMount 钩子函数会在组件挂载之前执行，onMounted 注册的 mounted 钩子函数会在组件挂载之后执行。</p><p>先说一下三个钩子setup 函数、beforeMount 钩子函数与 mounted 钩子函数的使情况：</p><ul><li>对于组件初始化阶段发送异步请求的逻辑，三种都可以，注意的是由于异步请求有网络耗时，所以其时间大于一个Tick。</li><li>你想依赖 <strong>DOM</strong> 去做一些初始化操作，那就只能把相关逻辑放在 mounted 钩子函数中了，只有它晚于渲染。</li></ul><p>对于本周期函数的的执行时间的嵌套情况：</p><p>组件在挂载相关的生命周期钩子函数时，先执行父组件的 beforeMount，然后是子组件的 beforeMount，接着是子组件的 mounted ，最后执行父组件的 mounted。</p><h2 id="2、onBeforeUpdate-和-onUpdated-–-组件更新"><a href="#2、onBeforeUpdate-和-onUpdated-–-组件更新" class="headerlink" title="2、onBeforeUpdate 和 onUpdated – 组件更新"></a>2、onBeforeUpdate 和 onUpdated – 组件更新</h2><p>onBeforeUpdate 注册的 beforeUpdate 钩子函数会在组件更新之前执行，onUpdated 注册的 updated 钩子函数会在组件更新之后执行。</p><h3 id="对于beforeUpdate与updated需要注意的是："><a href="#对于beforeUpdate与updated需要注意的是：" class="headerlink" title="对于beforeUpdate与updated需要注意的是："></a>对于beforeUpdate与updated需要注意的是：</h3><p>在 beforeUpdate 钩子函数执行时，组件的 DOM 还未更新，如果你想在组件更新前访问 DOM，比如手动移除已添加的事件监听器，你可以注册这个钩子函数，在更新之前</p><p>在 updated 钩子函数执行时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p><p>如果要<strong>监听数据的改变并执行某些逻辑</strong>，最好不要使用 updated 钩子函数而用<strong>计算属性或 watcher</strong> 取而代之，因为任何数据的变化导致的组件<strong>更新都会执行 updated 钩子函数</strong>。另外注意， <strong>不要</strong>在 updated 钩子函数中更改数据，因为这样会再次触发组件更新，导致<strong>无限递归更新</strong> 。</p><p>还有就是 Vue.js 的更新粒度是组件级别的，所以父组件更新不一定导致子组件的更新。</p><h2 id="3、onBeforeUnmount-和-onUnmounted-–-组件销毁"><a href="#3、onBeforeUnmount-和-onUnmounted-–-组件销毁" class="headerlink" title="3、onBeforeUnmount 和 onUnmounted  – 组件销毁"></a>3、onBeforeUnmount 和 onUnmounted  – 组件销毁</h2><p>一个之前一个之后，并且整个组件销毁的逻辑很简单，主要就是清理组件实例上绑定的 effects 副作用函数和注册的副作用渲染函数 update，以及调用 unmount 销毁子树。</p><h3 id="执行销毁"><a href="#执行销毁" class="headerlink" title="执行销毁"></a>执行销毁</h3><p>需要注意组件的销毁与渲染类似，都是通过使用<strong>递归</strong>，进行并且unmount 主要就是遍历子树，遇到组件节点时执行 unmountComponent，遇到普通节点时则删除 DOM 元素。</p><p>在组件销毁前，会检测组件实例上是有否有注册的 beforeUnmount 钩子函数 bum，如果有则通过 invokeArrayFns 执行。</p><h3 id="销毁之后"><a href="#销毁之后" class="headerlink" title="销毁之后"></a>销毁之后</h3><p>会检测组件实例上是否有注册的 unmounted 钩子函数 um，如果有则通过 queuePostRenderEffect 把 unmounted 钩子函数推入到 postFlushCbs 中，因为组件的销毁就是组件更新的一个分支逻辑，所以在 nextTick 后进行 flushJobs，因此此时再次执行 queuePostRenderEffect 推入队列的任务，会在同一个 Tick 内执行这些 postFlushCbs，也就是执行所有的 unmounted 钩子函数。</p><p>对于嵌套组件，组件在执行销毁相关的生命周期钩子函数时，先执行父组件的 beforeUnmount，再执行子组件的 beforeUnmount，然后执行子组件的 unmounted ，最后执行父组件的 unmounted。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>组件销毁虽然会清理一些定义的 effects 函数，删除组件内部的 DOM 元素，但是有些就只能在**beforeUnmount 或者 unmounted **钩子函数中清除（比如定时器）</p><p>例子：</p><pre><code>&lt;template&gt;      &lt;div&gt;         &lt;div&gt;   &lt;p&gt;{{count}}&lt;/p&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import { ref, onBeforeUnmount } from 'vue' export default { setup () {   const count = ref(0)   const timer = setInterval(() =&gt; {     console.log(count.value++)   }, 1000)   onBeforeUnmount(() =&gt; {     clearInterval(timer)   })   return {     count   } }   } &lt;/script&gt;</code></pre><p>当我们在setup中进行定义定时器时，组件销毁之后，会触发触发 onBeforeUnmount 注册的 beforeUnmount 钩子函数，进行清除；</p><p>否则就会发现组件销毁后，虽然 DOM 被移除了，计时器仍然存在，并且会一直计时并在控制台输出，这就造成了不必要的内存泄漏。</p><h2 id="4、onErrorCaptured-–-处理错误"><a href="#4、onErrorCaptured-–-处理错误" class="headerlink" title="4、onErrorCaptured – 处理错误"></a>4、onErrorCaptured – 处理错误</h2><p>经典例子就是callWithErrorHandling，它就是执行一段函数并通过 handleError 处理错误。</p><h3 id="handleError实现-–找errorCaptured"><a href="#handleError实现-–找errorCaptured" class="headerlink" title="handleError实现 –找errorCaptured"></a>handleError实现 –找errorCaptured</h3><p>会从当前报错的组件的父组件实例开始，尝试去查找注册的 errorCaptured 钩子函数，如果有则遍历执行并且判断 errorCaptured 钩子函数的返回值是否为 true，如果是则说明这个错误已经得到了正确的处理，就会直接结束。</p><p>否则会继续遍历，遍历完当前组件实例的 errorCaptured 钩子函数后，如果这个错误还没得到正确处理，则向上查找它的父组件实例，以同样的逻辑去查找是否有正确处理该错误的 errorCaptured 钩子函数，直到查找完毕。</p><p>如果整个链路上都没有正确处理错误的 errorCaptured 钩子函数，则通过 logError 往控制台输出未处理的错误。所以 <strong>errorCaptured 本质上是捕获一个来自子孙组件的错误，它返回 true 就可以阻止错误继续向上传播。</strong></p><p>作用在于<strong>捕获所有子孙组件的错误，并且可以根据错误的类型和信息统计和上报错误。</strong></p><h2 id="5、onRenderTracked-和-onRenderTriggered"><a href="#5、onRenderTracked-和-onRenderTriggered" class="headerlink" title="5、onRenderTracked 和 onRenderTriggered"></a>5、onRenderTracked 和 onRenderTriggered</h2><p>新API，主要是在开发阶段渲染调试用的，其中onRenderTracked 和 onRenderTriggered 注册的钩子函数，原来是在副作用渲染函数的 onTrack 和 onTrigger 对应的函数中执行的。</p><h3 id="onTrack"><a href="#onTrack" class="headerlink" title="onTrack"></a>onTrack</h3><p>当访问一个响应式对象时，会执行 track 函数做<strong>依赖收集</strong>，然后在非生产环境下检测当前的 activeEffect 的配置有没有定义 onTrack 函数，如果有的则执行该方法。trigger 函数的实现：</p><pre><code>function trigger (target, type, key, newValue) { / 添加要运行的 effects 集合 const run = (effect) =&gt; { if ((process.env.NODE_ENV !== 'production') &amp;&amp; effect.options.onTrigger) {     // 执行 onTrigger   effect.options.onTrigger({     effect,     target,     key,     type,     newValue,     oldValue,     oldTarget   }) } if (effect.options.scheduler) {   effect.options.scheduler(effect) } else {   effect() }   } // 遍历执行 effects effects.forEach(run) }</code></pre><p>所以副作用渲染函数执行的时候，activeEffect 就是这个副作用渲染函数，这时访问响应式数据就会触发 track 函数，在<strong>执行完依赖收集</strong>后，会<strong>执行 onTrack 函数</strong>，也就是遍历执行我们注册的 renderTracked 钩子函数。</p><p>renderTracked 和 renderTriggered 钩子函数的实际应用：</p><pre><code>&lt;template&gt; &lt;div&gt; &lt;div&gt;   &lt;p&gt;{{count}}&lt;/p&gt;   &lt;button @click="increase"&gt;Increase&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import { ref, onRenderTracked, onRenderTriggered } from 'vue' export default { setup () {   const count = ref(0)   function increase () {     count.value++   }   onRenderTracked((e) =&gt; {     console.log(e)     debugger   })   onRenderTriggered((e) =&gt; {     console.log(e)     debugger   })   return {     count,     increase   } } } &lt;/script&gt;</code></pre><p>像这样在开发阶段，我们可以通过注册这两个钩子函数，来追踪组件渲染的依赖来源以及触发组件重新渲染的数据更新来源</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://imgtu.com/i/RIpWb8"><img src="https://z3.ax1x.com/2021/07/05/RIpWb8.md.png" alt="RIpWb8.md.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Vue.js 组件的生命周期包括创建、更新、销毁等过程。在这些过程中也会运行叫&lt;strong&gt;生命周期钩子&lt;/strong&gt;的函数，这给了用</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="Composition" scheme="https://useritem.github.io/tags/Composition/"/>
    
  </entry>
  
  <entry>
    <title>计算属性API</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7API/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/Composition%20API%E8%AE%BE%E8%AE%A1/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7API/</id>
    <published>2021-07-06T14:15:58.000Z</published>
    <updated>2021-07-06T14:28:08.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计算属性是vue一个常用的响应式API，它允许用户定义一个计算方法，然后根据一些依赖的响应式数据计算出新值并返回。依赖发生变化时，计算属性也会进行自动计算与值的获取。</p><p>对于vue.js2.0表现为定义组件对象中的computed属性</p><p>而3.0版本则可以使用单独的计算属性API</p><h1 id="一、使用方法"><a href="#一、使用方法" class="headerlink" title="一、使用方法"></a>一、使用方法</h1><h2 id="1、传入函数-–只能获取get，"><a href="#1、传入函数-–只能获取get，" class="headerlink" title="1、传入函数 –只能获取get，"></a>1、传入函数 –只能获取get，</h2><pre><code>const count = ref(1) const plusOne = computed(() =&gt; count.value + 1) console.log(plusOne.value) // 2 plusOne.value++ // error count.value++ console.log(plusOne.value) // 3</code></pre><p>我们先使用 ref API 创建了一个响应式对象 count，然后使用 computed API 创建了另一个响应式对象 plusOne。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这时候我们只能修改count的值来是plusOne.value的值发生变化，修改plusOne.value会报错。</p><p>主要由于传递的是一个函数，所以表示这为get函数，只能进行值的获取，我们只能根据响应式对象count重新计算出新的值，这也就是它被叫做计算属性的原因。</p><p>而这个响应式对象，就是计算属性的依赖。</p><h2 id="2、传入对象-–-可获得也可改"><a href="#2、传入对象-–-可获得也可改" class="headerlink" title="2、传入对象 – 可获得也可改"></a>2、传入对象 – 可获得也可改</h2><p>主要表现为函数是嵌套在对象中的，具体表现为</p><pre><code>const count = ref(1) const plusOne = computed({       get: () =&gt; count.value + 1,       set: val =&gt; { count.value = val - 1   } }) plusOne.value = 1 console.log(count.value) // 0</code></pre><p>这里多了一个setter函数  — 修改plusOne.value 的值就会触发</p><p> setter 函数内部实际上会根据传入的参数修改计算属性的<strong>依赖值 count.value</strong>，因为一旦依赖的值被修改了，此时进而调用getter函数，金额对获取值进行修改。</p><h1 id="二、分析实现"><a href="#二、分析实现" class="headerlink" title="二、分析实现"></a>二、分析实现</h1><h2 id="1、分析-computed-API的实现"><a href="#1、分析-computed-API的实现" class="headerlink" title="1、分析 computed API的实现"></a>1、分析 computed API的实现</h2><p>computed函数的三件事情 – <strong>一标准两创建</strong></p><h3 id="（1）标准化参数"><a href="#（1）标准化参数" class="headerlink" title="（1）标准化参数"></a>（1）标准化参数</h3><p>由于computed 函数接受两种类型的参数，一个是 getter 函数，一个是拥有 getter 和 setter 函数的对象。</p><p>所以我们通过判断参数的类型，初始化了函数内部定义的 getter 和 setter 函数。</p><h3 id="（2）创建副作用函数-runner-–对getter的封装"><a href="#（2）创建副作用函数-runner-–对getter的封装" class="headerlink" title="（2）创建副作用函数 runner –对getter的封装"></a>（2）创建副作用函数 runner –对getter的封装</h3><p>computed 内部通过 effect 创建了一个副作用函数</p><pre><code> const runner = effect(getter, { // 延时执行，如果lazy不置为true的话，每次创建effect的时候都会立即执行一次// 而我们要实现computed显然是不需要的lazy: true, // 标记这是一个 computed effect 用于在 trigger 阶段的优先级排序 computed: true, // 调度执行的实现 scheduler: () =&gt; {   if (!dirty) {     dirty = true     // 派发通知，通知运行访问该计算属性的 activeEffect     trigger(computed, "set" /* SET */, 'value')   } } </code></pre><p>  })<br>主要就是对getter函数的封装，第二个参数分别表示：</p><ul><li> lazy 为 true 表示 effect 函数返回的 runner 并不会立即执行</li><li> computed 为 true 用于表示这是一个 computed effect，用于 trigger 阶段的优先级排序</li><li> scheduler 表示它的调度运行的方式</li></ul><h4 id="effect函数："><a href="#effect函数：" class="headerlink" title="effect函数："></a>effect函数：</h4><p>effect 函数一般都是做了三步工作：</p><p>1、是否已经被effect勾搭过</p><p>2、创建effect勾搭过程</p><p>3、是否默认执行effect函数</p><h3 id="（3）创建-computed-对象并返回"><a href="#（3）创建-computed-对象并返回" class="headerlink" title="（3）创建 computed 对象并返回"></a>（3）创建 computed 对象并返回</h3><pre><code> // 创建 computed 对象 computed = { __v_isRef: true, // 暴露 effect 对象以便计算属性可以停止计算 effect: runner, get value() {   // 计算属性的 getter   if (dirty) {     // 只有数据为脏的时候才会重新计算     value = runner()     dirty = false   }  // 依赖收集，收集运行访问该计算属性的 activeEffect   track(computed, "get" /* GET */, 'value')   return value }, set value(newValue) {   // 计算属性的 setter   setter(newValue) }   } //返回要需要为对象形式，如果不用对象的 get 方法的话我们就需要手动再调用一次 computed() return computed </code></pre><p>这个对象也拥有 getter 和 setter 函数。当 computed 对象被访问的时候会触发 getter，然后会判断是否 dirty，如果是就执行 runner，然后做依赖收集；</p><p>当我们直接设置 computed 对象时会触发 setter，即执行 computed 函数内部定义的 setter 函数。</p><h2 id="2、计算属性的运行机制"><a href="#2、计算属性的运行机制" class="headerlink" title="2、计算属性的运行机制"></a>2、计算属性的运行机制</h2><p>先说明其中两个重要变量：</p><ul><li>第一个 dirty 表示一个计算属性的值是否是“脏的”，用来判断需不需要重新计算</li><li>第二个 value 表示计算属性每次计算后的结果。</li></ul><p>举例说明：</p><pre><code>&lt;template&gt;       &lt;div&gt; {{ plusOne }}       &lt;/div&gt; &lt;button @click="plus"&gt;plus&lt;/button&gt; &lt;/template&gt; &lt;script&gt;  import { ref, computed } from 'vue'   export default {    setup() {   const count = ref(0)   const plusOne = computed(() =&gt; {     return count.value + 1   })    //传入getter函数，为区分称为 computed getter  function plus() {     count.value++   }   return {     plusOne,     plus   }     }   } &lt;/script&gt;</code></pre><h3 id="1-过程"><a href="#1-过程" class="headerlink" title="1.过程"></a>1.过程</h3><p>当组件渲染阶段会访问 plusOne，也就触发了 plusOne 对象的 <strong>getter 函数</strong> ：</p><pre><code>get value() {       // 计算属性的 getter       if (dirty) { // 只有数据为脏的时候才会重新计算 value = runner() dirty = false   }   // 依赖收集，收集运行访问该计算属性的 activeEffect   track(computed, "get" /* GET */, 'value')   return value }</code></pre><p>由于默认 dirty 是 true，表示<strong>重新计算</strong>，并执行runner函数，即执行上面的 computed getter，即count.value + 1，又因为访问了 count 的值，并且由于 count 也是一个响应式对象，所以就会触发</p><div style="color: red; font-size: 20px;margin-top: 10px;"> count 对象的依赖收集过程。</div><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h3><p>由于是在 runner 执行的时候访问 count，所以这个时候的 activeEffect 是 runner 函数。</p><p>runner 函数执行完毕，会把 dirty 设置为 false，并进一步执行 track（computed,”get”,’value’) 函数做依赖收集，这个时候 runner 已经执行完了，所以 <strong>activeEffect 是组件副作用渲染函数</strong>。</p><h4 id="即注意两个依赖收集过程："><a href="#即注意两个依赖收集过程：" class="headerlink" title="即注意两个依赖收集过程："></a>即注意两个依赖收集过程：</h4><ul><li>对于 plusOne 来说，它收集的依赖是组件副作用渲染函数；</li><li>对于 count 来说，它收集的依赖是 plusOne 内部的 runner 函数。</li></ul><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h3 id="3-执行"><a href="#3-执行" class="headerlink" title="3.执行"></a>3.执行</h3><p>然后当我们点击按钮的时候，会执行 plus 函数，函数内部通过 count.value++ 修改 count 的值，并<strong>自动派发通知set</strong>，通过对响应式的了解可知，这是指就是 trigger 函数的作用。</p><p>请注意，这里不是直接调用 runner 函数，而是把 runner 作为参数去执行 scheduler 函数，而computed API 内部创建副作用函数时，已经配置了 scheduler 函数，如下：</p><pre><code>scheduler: () =&gt; {       if (!dirty) {     dirty = true // 派发通知，通知运行访问该计算属性的 activeEffect trigger(computed, "set" /* SET */, 'value')   } }//关键在于通知执行 plusOne 依赖的组件渲染副作用函数，即触发组件的重新渲染。</code></pre><p>在组件重新渲染的时候，会再次访问 plusOne，我们发现这个时候 dirty 为 true（见上），然后会再次执行 computed getter（plusOne的getter），此时才会执行 count.value + 1 求得新值。</p><p>这就是虽然组件没有直接访问 count，但是当我们修改 count 的值的时候，组件仍然会重新渲染的原因。</p><p>文字绕来绕去，主要带着dirty（判断是否重新计算）与value（结果）变量去看，也结合图片理解：</p><p><a href="https://imgtu.com/i/RRF0w4"><img src="https://z3.ax1x.com/2021/07/03/RRF0w4.md.png" alt="RRF0w4.md.png"></a></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>得出计算属性的两大特点</p><ul><li><p>1.延时计算，只有当我们访问计算属性的时候，它才会真正运行 computed getter 函数计算；</p></li><li><p>2，缓存，它的内部会缓存上次的计算结果 value，而且只有 <strong>dirty 为 true 时才会重新计算</strong>。如果访问计算属性时 dirty 为 false，那么直接返回这个 value。</p></li></ul><p>所以说单纯使用普通函数相比，</p><div style=" font-size: 20px;margin-top: 10px; background-color:pink">计算属性的优势是：只要依赖不变化，就可以使用缓存的 value 而不用每次在渲染组件的时候都执行函数去计算，这是典型的<strong>空间换时间的优化思想</strong>。</div><p></p><h2 id="3、嵌套计算属性"><a href="#3、嵌套计算属性" class="headerlink" title="3、嵌套计算属性"></a>3、嵌套计算属性</h2><p>主要表现为不在不在渲染函数中访问 plusOne，而在另一个计算属性中访问：</p><pre><code>const count = ref(0) const plusOne = computed(() =&gt; {       return count.value + 1 }) const plusTwo = computed(() =&gt; {      return plusOne.value + 1 }) console.log(plusTwo.value)</code></pre><p>这里需要好好理解就是：：–》我们访问 plusTwo 的时候，过程和前面都差不多，同样也是两个依赖收集的过程。</p><p>—》对于 plusOne 来说，它收集的依赖是 plusTwo 内部的 runner 函数；</p><p>—》对于 count 来说，它收集的依赖是 plusOne 内部的 runner 函数。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>当我们修改 count 的值时，它会派发通知，先运行 plusOne 内部的 scheduler 函数<strong>（设置dirty = true，触发组件的重新渲染）</strong>，把 plusOne 内部的 dirty 变为 true，然后执行 trigger 函数再次派发通知，接着运行 plusTwo 内部的 scheduler 函数，把 plusTwo 内部的 dirty 设置为 true。</p><p>然后当我们再次访问 plusTwo 的值时，发现 dirty 为 true，就会执行 plusTwo 的 computed getter 函数去执行 plusOne.value + 1，进而执行 plusOne 的 computed gette 即 count.value + 1 + 1，求得最终新值 2。</p><p>所以嵌套对于计算属性的使用无影响</p><h2 id="4、计算属性的执行顺序"><a href="#4、计算属性的执行顺序" class="headerlink" title="4、计算属性的执行顺序"></a>4、计算属性的执行顺序</h2><p>主要就是因为 effect 函数依赖了 plusOne 和 count，所以 plusOne 先计算会更合理，即computed runner 的执行优先于普通的 effect 函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;计算属性是vue一个常用的响应式API，它允许用户定义一个计算方法，然后根据一些依赖的响应式数据计算出新值并返回。依赖发生变化时，计算属性也</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="Composition" scheme="https://useritem.github.io/tags/Composition/"/>
    
  </entry>
  
  <entry>
    <title>vue3.0的优化</title>
    <link href="https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3-0%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>https://useritem.github.io/2021/07/06/vue3.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/vue3-0%E7%9A%84%E4%BC%98%E5%8C%96/</id>
    <published>2021-07-06T14:15:43.000Z</published>
    <updated>2021-07-06T14:28:08.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：vue发展历程"><a href="#前言：vue发展历程" class="headerlink" title="前言：vue发展历程"></a>前言：vue发展历程</h2><p>vue.js.1.x —-&gt; vue.js.2.x  最大的升级在于<strong>引用的虚拟DOM</strong>，为后期的服务端渲染与之后的跨端框架提供</p><p>了方便，但是也有一些问题：</p><p>1、源码自身的维护性</p><p>2、数据量大后嗲了的渲染与更新的性能问题</p><p>3、一些想舍弃但是为了兼容还保留的鸡肋API</p><p>之后vue.js.3.0的目的在于：</p><p>1、更好的编程体验</p><p>2、更好的TypeScript支持</p><p>3、更好的逻辑复用实践</p><p>于是vue.js.3.0出现了！</p><h1 id="vue3-0的优化"><a href="#vue3-0的优化" class="headerlink" title="vue3.0的优化"></a>vue3.0的优化</h1><h2 id="一、源码的优化"><a href="#一、源码的优化" class="headerlink" title="一、源码的优化"></a>一、源码的优化</h2><p>源码的优化，指小右对于vue.js框架本身开发的优化，目的在于让代码更易于开发与维护</p><h3 id="1、优化主要体现："><a href="#1、优化主要体现：" class="headerlink" title="1、优化主要体现："></a>1、优化主要体现：</h3><p>使用monorepo和typeScript管理与开发源码 — 提升自身代码可维护性</p><h4 id="更好的代码管理-monorepo"><a href="#更好的代码管理-monorepo" class="headerlink" title="更好的代码管理:monorepo"></a>更好的代码管理:monorepo</h4><p>之前的管理在src的目录下，各代码块拆分如下：</p><p><a href="https://imgtu.com/i/RV20HK"><img src="https://z3.ax1x.com/2021/06/22/RV20HK.png" alt="RV20HK.png"></a></p><p>vue3.0J进行维护的时候则使用了monorepo，通过不同的功能来拆分到packages下面的不同子目录中，大概结构如下：</p><p><a href="https://imgtu.com/i/RVRkK1"><img src="https://z3.ax1x.com/2021/06/22/RVRkK1.png" alt="RVRkK1.png"></a></p><p>相对于 Vue.js 2.x 的源码组织方式，monorepo 把这些模块拆分到不同的 package 中，每个 package 有<strong>各自</strong>的 API、类型定义和测试。</p><p>这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性。</p><p>此外这些响应式库可以进行单独的使用，独立于vue.js，进行单独依赖，这是vue.js.2.x是做不到的</p><h4 id="TypeScript-–-有类型的JS"><a href="#TypeScript-–-有类型的JS" class="headerlink" title="TypeScript – 有类型的JS"></a>TypeScript – 有类型的JS</h4><p>开始 — Vue.js 1.x 版本的源码是没有用类型语言的，小右用 JavaScript 开发了整个框架</p><p>但对于复杂的框架项目开发，使用类型语言非常有利于代码的维护，作用</p><ul><li><p>1、可以在编码期间帮你做类型检查，避免一些因类型问题导致的错误；</p></li><li><p>2、可以利于它去定义接口的类型，利于 IDE 对变量类型的推导</p></li></ul><p>重构 2.0 的时候，小右选型了 Flow（Facebook出品），重构 2.0 的时候，小右选型了 Flow，虽然它以非常小的成本对已有的 JavaScript 代码迁入，非常灵活。</p><p>但是对于一些复杂场景类型的检查，支持得并不好，也出现了烂尾的现象，所以3.0的版本编采用的TypeScript</p><h2 id="二、性能优化"><a href="#二、性能优化" class="headerlink" title="二、性能优化"></a>二、性能优化</h2><h3 id="1、源码体积优化"><a href="#1、源码体积优化" class="headerlink" title="1、源码体积优化"></a>1、源码体积优化</h3><h4 id="因为-JavaScript-包体积越小，意味着网络传输时间越短，JavaScript-引擎解析包的速度也越快，所以进行源码压缩。"><a href="#因为-JavaScript-包体积越小，意味着网络传输时间越短，JavaScript-引擎解析包的速度也越快，所以进行源码压缩。" class="headerlink" title="因为 JavaScript 包体积越小，意味着网络传输时间越短，JavaScript 引擎解析包的速度也越快，所以进行源码压缩。"></a>因为 JavaScript 包体积越小，意味着网络传输时间越短，JavaScript 引擎解析包的速度也越快，所以进行源码压缩。</h4><p>优化方式</p><ul><li><p>1、移除一些冷门的 feature（比如 filter、inline-template 等）</p></li><li><p>2、引入 tree-shaking 的技术，减少打包体积</p></li></ul><p>tree-shaking的原理在于 – tree-shaking 依赖 ES2015 模块语法的静态结构（即 import 和 export），通过编译阶段的静态分析，找到没有引入的模块并打上标记。</p><p>简单来说就是不用的代码，进行标记，之后压缩阶段会利用例如 <strong>uglify-js、terser</strong> 等压缩工具，进行删除，不会出现在打包后的代码中。</p><h3 id="2、数据劫持优化"><a href="#2、数据劫持优化" class="headerlink" title="2、数据劫持优化"></a>2、数据劫持优化</h3><p>Vue.js 区别于 React 的一大特色是它的数据是响应式的，这个特性从 Vue.js 1.x 版本就一直伴随着，</p><p>DOM作为数据的映射，数据发生变化之后，<strong>自动更新</strong>DOM，所以用户只需专注于数据的修改即可。</p><p>所以vue.js如何进行内部实现的呢：</p><p>那就是必须劫持数据的访问和更新</p><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>代表数据改变之后，<strong>自动执行</strong>一些代码去更新 DOM，为了让Vue.js 知道更新哪一片 DOM，</p><p>所以在渲染 DOM 的时候访问了数据，我们可以对它进行访问劫持，即建立了内部的依赖关系</p><h4 id="Vue-js-1-x-和-Vue-js-2-x-的方法："><a href="#Vue-js-1-x-和-Vue-js-2-x-的方法：" class="headerlink" title="Vue.js 1.x 和 Vue.js 2.x 的方法："></a>Vue.js 1.x 和 Vue.js 2.x 的方法：</h4><p>通过 Object.defineProperty 这个 API 去劫持数据的 getter 和 setter，具体为：</p><pre><code>Object.defineProperty(data, 'a',{      get(){        // track      },      set(){        // trigger      }})</code></pre><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>这个API缺陷在于，它必须预先知道要拦截的 key 是什么，所以它并不能检测对象属性的添加和删除。</p><p>尽管 Vue.js 为了解决这个问题提供了 $set 和 $delete 实例方法，但是对于用户来说，还是增加了一定的心智<br>负担。</p><p>并且当我们嵌套过深，定义的响应式数据过于复杂，这就会有相当大的性能负担。</p><h4 id="Vue-js-3-0-—-代理"><a href="#Vue-js-3-0-—-代理" class="headerlink" title="Vue.js 3.0 — 代理"></a>Vue.js 3.0 — 代理</h4><p>当使用了 Proxy API 做数据劫持，它的内部是这样的</p><pre><code>observed = new Proxy(data, {      get() {            // track      },    set() {            // trigger     }})</code></pre><p>由于它劫持的是<strong>整个对象</strong>，那么自然对于对象的属性的增加和删除都能检测到。</p><p>但要注意的是，Proxy API 并不能监听到内部深层次的对象变化，因此 Vue.js 3.0 的处理方式是在 getter 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归，这样无疑也在很大程度上提升了性能.</p><h3 id="3、编译优化"><a href="#3、编译优化" class="headerlink" title="3、编译优化"></a>3、编译优化</h3><p>Vue.js 2.x 从 new Vue 开始渲染成 DOM 的流程如下：</p><p><a href="https://imgtu.com/i/RVTQBj"><img src="https://z3.ax1x.com/2021/06/22/RVTQBj.png" alt="RVTQBj.png"></a></p><p><strong>响应式过程</strong>就发生在图中的 init 阶段，另外 template compile to render function 的流程是可以借助 vue-loader 在 webpack 编译阶段离线完成，并非一定要在运行时完成。</p><p>所以想优化整个 Vue.js 的运行时，除了数据劫持部分的优化，我们可以在耗时相对较多的 patch 阶段想办法，Vue.js 3.0 也是这么做的，并且它通过在编译阶段优化编译的结果，来实现运行时 patch 过程的优化。</p><h2 id="三、语法-API-优化：Composition-API"><a href="#三、语法-API-优化：Composition-API" class="headerlink" title="三、语法 API 优化：Composition API"></a>三、语法 API 优化：Composition API</h2><h3 id="1、优化逻辑组织"><a href="#1、优化逻辑组织" class="headerlink" title="1、优化逻辑组织"></a>1、优化逻辑组织</h3><h4 id="Vue-js-1-x-和-2-x-–-Options-API"><a href="#Vue-js-1-x-和-2-x-–-Options-API" class="headerlink" title="Vue.js 1.x 和 2.x – Options API"></a>Vue.js 1.x 和 2.x – Options API</h4><p>在 Vue.js 1.x 和 2.x 版本中，编写组件本质就是在编写一个“包含了描述组件选项的对象”，我们把它称为 Options API，</p><p>Options API 的设计是按照 methods、computed、data、props 这些不同的选项分类，组件小时候，非常方便。</p><p>但是当组件大时，一个组件可能有多个逻辑关注点，当使用 Options API 的时候，每一个关注点都有自己的 Options，如果需要修改一个逻辑点关注点，就需要在单个文件中不断上下切换和寻找。</p><h4 id="vue3-0-–-Composition-API"><a href="#vue3-0-–-Composition-API" class="headerlink" title="vue3.0 – Composition API"></a>vue3.0 – Composition API</h4><p>它有一个很好的机制去解决这样的问题，就是将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去。</p><p>区分两者关键在于某个逻辑关注点，是否在<strong>一个函数</strong>或者说是否整合。</p><h3 id="2、优化逻辑复用"><a href="#2、优化逻辑复用" class="headerlink" title="2、优化逻辑复用"></a>2、优化逻辑复用</h3><p>当我们开发项目变得复杂的时候，免不了需要抽象出一些复用的逻辑。在 Vue.js 2.x 中，我们通常会用 mixins 去复用逻辑。</p><p>举一个鼠标位置侦听的例子：编写如下函数 mousePositionMixin：</p><pre><code>const mousePositionMixin = {  data() {    return {     x: 0,      y: 0    }  },mounted() {    window.addEventListener('mousemove', this.update)  },destroyed() {    window.removeEventListener('mousemove', this.update)  },methods: {    update(e) {      this.x = e.pageX      this.y = e.pageY}  }}export default mousePositionMixin</code></pre><p>然后在组件中使用：</p><pre><code>&lt;template&gt;  &lt;div&gt;        Mouse position: x {{ x }} / y {{ y }}  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import mousePositionMixin from './mouse'export default {  mixins: [mousePositionMixin]}&lt;/script&gt;</code></pre><p>使用单个 mixin 似乎问题不大，但是当我们一个组件混入大量不同的 mixins 的时候，会存在两个非常明显的问题：<strong>命名冲突和数据来源不清晰</strong>。</p><p>对于Vue.js 3.0 设计的 Composition API来说：例子如下：</p><pre><code>import { ref, onMounted, onUnmounted } from 'vue'export default function useMousePosition() {      const x = ref(0)      const y = ref(0)      const update = e =&gt; {    x.value = e.pageX    y.value = e.pageY  }  onMounted(() =&gt; {    window.addEventListener('mousemove', update)  })  onUnmounted(() =&gt; {    window.removeEventListener('mousemove', update)  })  return { x, y }}</code></pre><p>我们约定 useMousePosition 这个函数为 hook 函数，然后在组件中使用</p><pre><code>&lt;template&gt;  &lt;div&gt;    Mouse position: x {{ x }} / y {{ y }}  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;      import useMousePosition from './mouse'      export default {    setup() {          const { x, y } = useMousePosition()          return { x, y }    }  }&lt;/script&gt;</code></pre><p>可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题。</p><p>Composition API 除了在逻辑复用方面有优势，也会有更好的<strong>类型支持</strong>，因为它们都是一些函数，在调用函数时，自然所有的类型就被推导出来了，不像 Options API 所有的东西使用 this。另外，Composition API 对 tree-shaking 友好，代码也更容易压缩。</p><p>需要注意的是Composition API 属于 API 的增强，它并不是 Vue.js 3.0 组件开发的范式，如果你的组件足够简单，你还是可以使用 Options API。</p><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>Vue.js 3.0 引入 RFC：来确保他的改动和设计都是经过讨论并确认的，<strong>使每个版本改动可控</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：vue发展历程&quot;&gt;&lt;a href=&quot;#前言：vue发展历程&quot; class=&quot;headerlink&quot; title=&quot;前言：vue发展历程&quot;&gt;&lt;/a&gt;前言：vue发展历程&lt;/h2&gt;&lt;p&gt;vue.js.1.x —-&amp;gt; vue.js.2.x  最大的升级在于&lt;</summary>
      
    
    
    
    <category term="vue3.0源码简析" scheme="https://useritem.github.io/categories/vue3-0%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/"/>
    
    
    <category term="vue3.0优化分析" scheme="https://useritem.github.io/tags/vue3-0%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>axios源码特殊功能深入</title>
    <link href="https://useritem.github.io/2021/06/19/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/axios%E6%BA%90%E7%A0%81%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD%E6%B7%B1%E5%85%A5/"/>
    <id>https://useritem.github.io/2021/06/19/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/axios%E6%BA%90%E7%A0%81%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD%E6%B7%B1%E5%85%A5/</id>
    <published>2021-06-19T03:38:21.000Z</published>
    <updated>2021-06-19T11:25:04.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios拦截器与请求取消的模拟实现"><a href="#axios拦截器与请求取消的模拟实现" class="headerlink" title="axios拦截器与请求取消的模拟实现"></a>axios拦截器与请求取消的模拟实现</h1><h2 id="一、axios拦截器"><a href="#一、axios拦截器" class="headerlink" title="一、axios拦截器"></a>一、axios拦截器</h2><h3 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><pre><code>    function Axios(config){        this.config = config;        this.interceptors = {            request: new InterceptorManager(),            response: new InterceptorManager(),        }    }</code></pre><h3 id="2、顺利执行拦截器"><a href="#2、顺利执行拦截器" class="headerlink" title="2、顺利执行拦截器"></a>2、顺利执行拦截器</h3><pre><code>         //发送请求  难点与重点        Axios.prototype.request = function(config){            //创建一个 promise 对象            let promise = Promise.resolve(config);            //创建一个数组            const chains = [dispatchRequest, undefined];            //处理拦截器            //请求拦截器 将请求拦截器的回调 压入到 chains 的前面  request.handles = []            this.interceptors.request.handlers.forEach(item =&gt; {                chains.unshift(item.fulfilled, item.rejected);            });            //响应拦截器            this.interceptors.response.handlers.forEach(item =&gt; {                chains.push(item.fulfilled, item.rejected);                //请求拦截器在前面，响应拦截器在后面            });            //遍历，弹完之后chains没有元素了，所以不可等于0            while(chains.length &gt; 0){                promise = promise.then(chains.shift(), chains.shift());            }            return promise;        }    //发送请求    function dispatchRequest(config){        //返回一个promise 队形        return new Promise((resolve, reject) =&gt; {            resolve({                status: 200,                statusText: 'OK'            });        });    }</code></pre><h3 id="3、拦截器管理构造函数"><a href="#3、拦截器管理构造函数" class="headerlink" title="3、拦截器管理构造函数"></a>3、拦截器管理构造函数</h3><pre><code>    function InterceptorManager(){        this.handlers = [];    }    InterceptorManager.prototype.use = function(fulfilled, rejected){        this.handlers.push({            fulfilled,            rejected        })    }</code></pre><p>原理在于当调用use函数时，就立即将函数fulfilled, rejected做成一个对象，并直接压入数组中</p><h3 id="4、创建axios，并进行属性的添加"><a href="#4、创建axios，并进行属性的添加" class="headerlink" title="4、创建axios，并进行属性的添加"></a>4、创建axios，并进行属性的添加</h3><pre><code>    //创建实例    let context = new Axios({});    //创建axios函数    let axios = Axios.prototype.request.bind(context); //保证this的指向没问题    //将 context 属性 config interceptors 添加至 axios 函数对象身上    Object.keys(context).forEach(key =&gt; {        axios[key] = context[key];    });</code></pre><h2 id="二、axios取消请求的模拟实现"><a href="#二、axios取消请求的模拟实现" class="headerlink" title="二、axios取消请求的模拟实现"></a>二、axios取消请求的模拟实现</h2><h3 id="1、构造函数-1"><a href="#1、构造函数-1" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><pre><code>    function Axios(config){        this.config = config;    }</code></pre><h3 id="2、原型-request-方法"><a href="#2、原型-request-方法" class="headerlink" title="2、原型 request 方法"></a>2、原型 request 方法</h3><pre><code>    Axios.prototype.request = function(config){        return dispatchRequest(config);    }</code></pre><h3 id="3、dispatchRequest-函数"><a href="#3、dispatchRequest-函数" class="headerlink" title="3、dispatchRequest 函数"></a>3、dispatchRequest 函数</h3><pre><code>    function dispatchRequest(config){        return xhrAdapter(config);    }</code></pre><h3 id="4、xhrAdapter"><a href="#4、xhrAdapter" class="headerlink" title="4、xhrAdapter"></a>4、xhrAdapter</h3><pre><code>    function xhrAdapter(config){        //发送 AJAX 请求        return new Promise((resolve, reject) =&gt; {            //实例化对象            const xhr = new XMLHttpRequest();            //初始化            xhr.open(config.method, config.url);            //发送            xhr.send();            //处理结果            xhr.onreadystatechange = function(){                if(xhr.readyState === 4){                    //判断结果                    if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){                        //设置为成功的状态                        resolve({                            status: xhr.status,                            statusText: xhr.statusText                        });                    }else{                        reject(new Error('请求失败'));                    }                }            }            //关于取消请求的处理            if(config.cancelToken){                //对 cancelToken 对象身上的 promise 对象指定成功的回调                config.cancelToken.promise.then(value =&gt; {                    xhr.abort();                    //将整体结果设置为失败                    reject(new Error('请求已经被取消'))                });            }        })    }</code></pre><h3 id="5、创建-axios-函数"><a href="#5、创建-axios-函数" class="headerlink" title="5、创建 axios 函数"></a>5、创建 axios 函数</h3><pre><code>    const context = new Axios({});    const axios = Axios.prototype.request.bind(context);  //保证this指向没问题</code></pre><h3 id="6、CancelToken-构造函数"><a href="#6、CancelToken-构造函数" class="headerlink" title="6、CancelToken 构造函数"></a>6、CancelToken 构造函数</h3><pre><code>    function CancelToken(executor){        //声明一个变量        var resolvePromise;        //为实例对象添加属性        this.promise = new Promise((resolve) =&gt; {            //将 resolve 赋值给 resolvePromise            resolvePromise = resolve        });        //调用 executor 函数        executor(function(){            //执行 resolvePromise 函数            resolvePromise();        });    }</code></pre><p>原理：在cancelTaken身上维护了一个<strong>属性promise</strong>，并且之后吧可以改变其状态的变量resolvePromise变量暴露到了全局。</p><p>于是cancel就成了调用的接口，当它使用时，内部resolvePromise就会执行，进而resolve执行改变promise状态为成功</p><p>promise成功时，发送请求的回调就会执行，进而执行了abort函数</p><h2 id="三、重点问题分析"><a href="#三、重点问题分析" class="headerlink" title="三、重点问题分析"></a>三、重点问题分析</h2><h3 id="1、axios-与Axios的关系"><a href="#1、axios-与Axios的关系" class="headerlink" title="1、axios 与Axios的关系?"></a>1、axios 与Axios的关系?</h3><p>1.从语法上来说: axios不是Axios 的实例</p><p>2.从功能上来说: axios是Axios 的实例</p><p>3.axios 是Axios.prototype.request 函数 bind()返回的函数</p><p>4.axios 作为对象有Axios 原型对象上的所有方法，有Axios对象上所有属性</p><p>通俗就是首先从结构来看，axios并不是由Axios实例化，得来的<br>axios来源的关键在于createInstance函数得来的<br>但是从功能上面来说axios具有Axios实例所有的功能</p><h3 id="2、instance-与axios的区别"><a href="#2、instance-与axios的区别" class="headerlink" title="2、instance 与axios的区别?"></a>2、instance 与axios的区别?</h3><h4 id="1-相同"><a href="#1-相同" class="headerlink" title="1.相同:"></a>1.相同:</h4><p>(1)都是一个能发任意请求的函数: request(config)</p><p>(2）都有发特定请求的各种方法: get()/post()/put()/delete()</p><p>(3)都有默认配置和拦截器的属性: defaults/interceptors</p><h4 id="2-不同"><a href="#2-不同" class="headerlink" title="2.不同:"></a>2.不同:</h4><p>(1)默认配置很可能不一样</p><p>(2)instance没有axios后面添加的一些方法: create()/CancelToken()/all()</p><p>可以理解为：</p><p>两者开始是一样的,但是在用instance创建完axios之后,又对axios添加了一系列的属性与方法<br>而这些是instance不具有的,所以这是最大的不同</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;axios拦截器与请求取消的模拟实现&quot;&gt;&lt;a href=&quot;#axios拦截器与请求取消的模拟实现&quot; class=&quot;headerlink&quot; title=&quot;axios拦截器与请求取消的模拟实现&quot;&gt;&lt;/a&gt;axios拦截器与请求取消的模拟实现&lt;/h1&gt;&lt;h2 id=&quot;一</summary>
      
    
    
    
    <category term="js经典问题" scheme="https://useritem.github.io/categories/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="axios" scheme="https://useritem.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>axios源码基础功能深入</title>
    <link href="https://useritem.github.io/2021/06/19/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/axios%E6%BA%90%E7%A0%81%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E6%B7%B1%E5%85%A5/"/>
    <id>https://useritem.github.io/2021/06/19/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/axios%E6%BA%90%E7%A0%81%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E6%B7%B1%E5%85%A5/</id>
    <published>2021-06-19T03:37:57.000Z</published>
    <updated>2021-06-19T11:25:02.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、axios源码分析"><a href="#一、axios源码分析" class="headerlink" title="一、axios源码分析"></a>一、axios源码分析</h1><h2 id="1、源码目录分析"><a href="#1、源码目录分析" class="headerlink" title="1、源码目录分析"></a>1、源码目录分析</h2><p>直接引入尚硅谷视频里的源码目录结构：</p><p><a href="https://imgtu.com/i/R9tHw4"><img src="https://z3.ax1x.com/2021/06/18/R9tHw4.png" alt="R9tHw4.png"></a></p><h3 id="重点文件在于："><a href="#重点文件在于：" class="headerlink" title="重点文件在于："></a>重点文件在于：</h3><p>Axios.js，即axios的构造文件，最终对Axios进行暴露，并用Axios进行“伪”实例化对象，也可以理解为构造函数的一个组成。</p><p>dispatchRequest.js文件主要对xhr.js与http.js的适配器的使用<strong>调用</strong>，由其来进行指令需求的调用</p><p>index.js为整个包的js文件，进而引出axios.js文件.</p><h2 id="2、axios的构造"><a href="#2、axios的构造" class="headerlink" title="2、axios的构造"></a>2、axios的构造</h2><p>重点在于先构造函数，再在函数上面进行方法的的添加，步骤</p><h3 id="1、定义构造函数"><a href="#1、定义构造函数" class="headerlink" title="1、定义构造函数"></a>1、定义构造函数</h3><pre><code>    function Axios(config){        //初始化        this.defaults = config;//为了创建 default 默认属性        this.intercepters = {        //实际为intercepters的实例，为了保证代码可观性，便写做这样            request: {},            response: {}        }    }</code></pre><h3 id="2、原型方法的添加"><a href="#2、原型方法的添加" class="headerlink" title="2、原型方法的添加"></a>2、原型方法的添加</h3><pre><code>    Axios.prototype.request = function(config){        console.log('发送 AJAX 请求 请求的类型为 '+ config.method);    }    Axios.prototype.get = function(config){        return this.request({method: 'GET'});        //return this.request(config);    因为便于区分，所以不回这样写    }    //其他方法能够顺利使用的关键在于调用了request方法</code></pre><h3 id="3、声明函数"><a href="#3、声明函数" class="headerlink" title="3、声明函数"></a>3、声明函数</h3><pre><code>    //声明函数    function createInstance(config){        //实例化一个对象        let context = new Axios(config);// context.get()  context.post()  但是不能当做函数使用 context() X        //创建请求函数        let instance = Axios.prototype.request.bind(context);         //bind方法进行函数的绑定对象，理解为f.bind(obj)，实际上可以理解为obj.f()，这时，f函数体内的this自然指向的是obj        // instance 是一个函数 并且可以 instance({})  此时 instance 不能 instance.get X        //将 Axios.prototype 对象中的方法添加到instance函数对象中        Object.keys(Axios.prototype).forEach(key =&gt; {            instance[key] = Axios.prototype[key].bind(context);            // 可直接用this.default  this.interceptors            //这样保证内部直接指向实例对象context        }); //此时它既可以是函数又可以是对象        //为 instance 函数对象添加属性 default 与 interceptors        Object.keys(context).forEach(key =&gt; {            instance[key] = context[key];        });        return instance;    }</code></pre><h3 id="4、使用axios"><a href="#4、使用axios" class="headerlink" title="4、使用axios"></a>4、使用axios</h3><pre><code>    let axios = createInstance();    //发送请求    // axios({method:'POST'});    axios.get({});    axios.post({});</code></pre><h2 id="2、请求的发送"><a href="#2、请求的发送" class="headerlink" title="2、请求的发送"></a>2、请求的发送</h2><p>1、声明构造函数</p><pre><code>function Axios(config){        this.config = config;    }    Axios.prototype.request = function(config){        //发送请求        //创建一个 promise 对象        let promise = Promise.resolve(config);        //声明一个数组        let chains = [dispatchRequest, undefined];// undefined 占位        //循环处理数组,调用 then 方法指定回调        let result = promise.then(chains[0], chains[1]);        //返回 promise 的结果        return result;    }</code></pre><p>2、dsipatchRequest函数</p><pre><code>        function dispatchRequest(config){        //调用适配器发送请求        return xhrAdapter(config).then(response =&gt; {            //响应的结果进行转换处理            //....            return response;        }, error =&gt; {            throw error;        });    }</code></pre><p>3、adapter适配器,这里就是实现发送，也就是xhr.js文件</p><pre><code>  function xhrAdapter(config){        console.log('xhrAdapter 函数执行');        return new Promise((resolve, reject) =&gt; {            //发送 AJAX 请求            let xhr = new XMLHttpRequest();            //初始化            xhr.open(config.method, config.url);            //发送            xhr.send();            //绑定事件            xhr.onreadystatechange = function(){                if(xhr.readyState === 4){                    //判断成功的条件                    if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){                        //成功的状态                        resolve({                            //配置对象                            config: config,                            //响应体                            data: xhr.response,                            //响应头                            headers: xhr.getAllResponseHeaders(), //字符串  parseHeaders                            // xhr 请求对象                            request: xhr,                            //响应状态码                            status: xhr.status,                            //响应状态字符串                            statusText: xhr.statusText                        });                    }else{                        //失败的状态                        reject(new Error('请求失败 失败的状态码为' + xhr.status));                    }                }            }        });    }</code></pre><p>4、创建axios函数</p><pre><code>  let axios = Axios.prototype.request.bind(null);    //不执行其他的实例对象了    axios({        method:'GET',        url:'http://localhost:3000/posts'    }).then(response =&gt; {        console.log(response);    });</code></pre><p>流程：实际是先对结果与dispatchRequest函数进行同步，即成功同成功，失败同失败，且dispatchRequest的成功结果</p><p>就是result的结果值，可以理解为dispatchRequest中的return response就是result，</p><p>之后return result直接返回给Axios的执行结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、axios源码分析&quot;&gt;&lt;a href=&quot;#一、axios源码分析&quot; class=&quot;headerlink&quot; title=&quot;一、axios源码分析&quot;&gt;&lt;/a&gt;一、axios源码分析&lt;/h1&gt;&lt;h2 id=&quot;1、源码目录分析&quot;&gt;&lt;a href=&quot;#1、源码目录分析&quot;</summary>
      
    
    
    
    <category term="js经典问题" scheme="https://useritem.github.io/categories/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="axios" scheme="https://useritem.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>axios使用问题</title>
    <link href="https://useritem.github.io/2021/06/04/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/axios%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://useritem.github.io/2021/06/04/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/axios%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-04T14:05:46.000Z</published>
    <updated>2021-06-05T05:05:18.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、axios使用"><a href="#一、axios使用" class="headerlink" title="一、axios使用"></a>一、axios使用</h1><h2 id="1、axios介绍"><a href="#1、axios介绍" class="headerlink" title="1、axios介绍"></a>1、axios介绍</h2><p>axios是前端最流行的 ajax 请求库</p><p>且react/vue 官方都推荐使用 axios 发 ajax 请求，axios直接调用：</p><pre><code>  &lt;script src="https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.min.js"&gt;&lt;/script&gt;</code></pre><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li>基于 xhr + promise 的异步 ajax 请求库</li><li>浏览器端/node 端都可以使用</li><li>支持请求／响应拦截器，即中间进行修改</li><li>支持请求取消</li><li>请求/响应数据转换</li><li>也可以批量发送多个请求</li></ol><h2 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h2><h3 id="（1）使用axios方法直接调用"><a href="#（1）使用axios方法直接调用" class="headerlink" title="（1）使用axios方法直接调用"></a>（1）使用axios方法直接调用</h3><pre><code> axios({            //请求类型            method: 'POST',            //URL            url: 'http://localhost:3000/posts',            //设置请求体            data: {                title: "今天天气不错, 还挺风和日丽的",                author: "张三"            }        }).then(response =&gt; {            console.log(response);        });</code></pre><p>注意axios.request(config): <strong>等同于</strong> axios(config)，</p><p>且config就是里面的对象{}</p><h3 id="（2）以请求类型进行调用（以post为例）"><a href="#（2）以请求类型进行调用（以post为例）" class="headerlink" title="（2）以请求类型进行调用（以post为例）"></a>（2）以请求类型进行调用（以post为例）</h3><pre><code>        axios.post(            'http://localhost:3000/comments',             {                "body": "喜大普奔",                "postId": 2            }).then(response =&gt; {                console.log(response);            })</code></pre><h2 id="3、默认配置设置"><a href="#3、默认配置设置" class="headerlink" title="3、默认配置设置"></a>3、默认配置设置</h2><p>即在axios的defaults属性上进行添加</p><pre><code>    axios.defaults.method = 'GET';//设置默认的请求类型为 GET    axios.defaults.baseURL = 'http://localhost:3000';//设置基础 URL    axios.defaults.params = {id:100};    axios.defaults.timeout = 3000;//    btns[0].onclick = function(){        axios({            url: '/posts'        }).then(response =&gt; {            console.log(response);        })    }</code></pre><p>axios其他默认属性详见：</p><p><a href="https://github.com/axios/axios#features">https://github.com/axios/axios#features</a></p><h2 id="4、axios实例对象的创建及使用"><a href="#4、axios实例对象的创建及使用" class="headerlink" title="4、axios实例对象的创建及使用"></a>4、axios实例对象的创建及使用</h2><p>axios通过create(config)进行实例对象的创建，并且用实例对象写请求</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>当接口服务，<strong>不仅仅一个服务器</strong>(即有部分接口需要的配置与另一部分接口需要的配置不太一<br>样)时，</p><p><strong>默认配置defaults</strong>仅会对一个好用，其他的不行，协议域名都需要加上</p><p>所以当创建创建 2 个新 axios, 每个都有自己特有的配置，可以借助多个对象发送，有效减少了代码量</p><p>例：</p><pre><code> //创建实例对象      const duanzi = axios.create({        baseURL: 'https://api.apiopen.top',        timeout: 2000    });    const onather = axios.create({        baseURL: 'https://b.com',        timeout: 2000    });    //使用：    duanzi.get('/getJoke').then(response =&gt; {        console.log(response.data)    })</code></pre><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><ol><li><p>根据指定配置创建一个新的 axios, 也就就每个新 axios 都有自己的配置</p></li><li><p>新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的</p></li></ol><h2 id="5、拦截器"><a href="#5、拦截器" class="headerlink" title="5、拦截器"></a>5、拦截器</h2><p>梗概：</p><p>请求拦截器nterceptors.request在发送请求之前，用函数对请求的参数进行处理与检测</p><p>响应拦截器interceptors.response，也是同样对结果进行检查，没问题才会给用户</p><p>特别的：</p><p>请求拦截器后进先执行，响应拦截器先进先执行，见下面例子</p><p>说明: 调用 axios()并不是立即发送 ajax 请求, 而是需要经历一个较长的流程</p><pre><code>    axios.interceptors.request.use(function (config) {        console.log('请求拦截器 成功 - 1号');        //修改 config 中的参数        config.params = {a:100};        return config;    }, function (error) {        console.log('请求拦截器 失败 - 1号');        return Promise.reject(error);    });    axios.interceptors.request.use(function (config) {        console.log('请求拦截器 成功 - 2号');        config.timeout = 2000;        return config;    }, function (error) {        console.log('请求拦截器 失败 - 2号');        return Promise.reject(error);    });    // 设置响应拦截器    axios.interceptors.response.use(function (response) {        console.log('响应拦截器 成功 1号');        return response.data;        // return response;    }, function (error) {        console.log('响应拦截器 失败 1号')        return Promise.reject(error);    });</code></pre><p>结果:</p><p>请求拦截器2 =&gt; 请求拦截器1 =&gt; 发ajax请求 =&gt; 响应拦截器1 =&gt; 响<br>应拦截器 2 =&gt; 请求的回调</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>此流程是通过 promise 串连起来的, 请求拦截器传递的是 config, 响应<br>拦截器传递的是 response</p><h2 id="6、取消请求"><a href="#6、取消请求" class="headerlink" title="6、取消请求"></a>6、取消请求</h2><h3 id="（1）基本流程"><a href="#（1）基本流程" class="headerlink" title="（1）基本流程"></a>（1）基本流程</h3><p>1、配置 cancelToken 对象</p><p>2、缓存用于取消请求的 cancel 函数</p><p>3、在后面特定时机调用 cancel 函数取消请求</p><p>4、在错误回调中判断如果 error 是 cancel, 做相应处理</p><p>例子：二次点击时先取消之前的请求</p><pre><code>//2.声明全局变量    let cancel = null;    //发送请求    btns[0].onclick = function(){        //检测上一次的请求是否已经完成        if(cancel !== null){            //取消上一次的请求            cancel();        }        axios({            method: 'GET',            url: 'http://localhost:3000/posts',            //1. 添加配置对象的属性            cancelToken: new axios.CancelToken(function(c){                //3. 将 c 的值赋值给 cancel                cancel = c;            })        }).then(response =&gt; {            console.log(response);            //将 cancel 的值初始化            cancel = null;        })    }</code></pre><p>当然了自己测试时，如果使用的时json-server的话可以让其延缓执行，码：</p><pre><code>json-server --watch db.json -d 3000   </code></pre><p>延迟3s出结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、axios使用&quot;&gt;&lt;a href=&quot;#一、axios使用&quot; class=&quot;headerlink&quot; title=&quot;一、axios使用&quot;&gt;&lt;/a&gt;一、axios使用&lt;/h1&gt;&lt;h2 id=&quot;1、axios介绍&quot;&gt;&lt;a href=&quot;#1、axios介绍&quot; class</summary>
      
    
    
    
    <category term="js经典问题" scheme="https://useritem.github.io/categories/js%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="axios" scheme="https://useritem.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>jq4 -- 事件与属性</title>
    <link href="https://useritem.github.io/2021/05/25/jquery%E5%AD%A6%E4%B9%A0/jq4-%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%B1%9E%E6%80%A7/"/>
    <id>https://useritem.github.io/2021/05/25/jquery%E5%AD%A6%E4%B9%A0/jq4-%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%B1%9E%E6%80%A7/</id>
    <published>2021-05-25T12:49:10.000Z</published>
    <updated>2021-05-25T12:52:05.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、属性控制"><a href="#一、属性控制" class="headerlink" title="一、属性控制"></a>一、属性控制</h1><h2 id="1、属性的设置与获取"><a href="#1、属性的设置与获取" class="headerlink" title="1、属性的设置与获取"></a>1、属性的设置与获取</h2><h3 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h3><p>进行单个元素属性：</p><pre><code>    $('img').attr('src','./src/图片2.gif')   //以前有src属性，所以对其进行修改    $('img').attr('aaa','hahaha')  //也可以对已有的自定义属性，进行修改     $('img').attr('bbb','hahaha')   --- 对没有的属性，会进行添加</code></pre><p>进行多个元素属性设置 — 对象</p><pre><code>    $('img').attr({        'src':'./src/图片2.gif',        'aaa':'hahaha',         bb:'hahaha'    })</code></pre><h3 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h3><p>获取属性attr，没有第二个参数</p><pre><code>$('.btn2').click(function(){    alert($('img').attr('src'))    // 如果没有这个属性，那么就返回undefined，当然了自己设置的属性也可以获得})</code></pre><h2 id="2、属性移除-removeAttr"><a href="#2、属性移除-removeAttr" class="headerlink" title="2、属性移除 removeAttr()"></a>2、属性移除 removeAttr()</h2><pre><code>$('.btn3').click(function(){    // console.log($('img').removeAttr('src'))    // 注意这个返回值是$('img')本身    // var a = $('img').removeAttr('src')    // a.attr('bbb','hahaha')         //移除多个属性     $('img').removeAttr('src','aaa')    // $('img').removeAttr()    // 但是不加参数就没用了，不是全部删除})</code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>属性设置时，在jq1.6之后,对于checked,selected,disabled这类”boolean” 类型的值来说,不能使用attr方法,<strong>–只能使用prop方法–</strong>-</p><p>例：多选框</p><pre><code> &lt;input type="checkbox" id="box1"&gt;</code></pre><p>首先说明，多选框属性：checked在元素上面，就表示选中，没有写在元素上，则代表未选中<br>    // 这类属性，用原生js时：设置true，false也得到true或者false<br>    // $(‘#box2’).click(function(){<br>    //     document.getElementById(‘box1’).checked = true<br>    //     // 直接对属性进行控制<br>    // })</p><p>对于jq来说不能使用attr来控制boolean类型的属性</p><pre><code>$('#box2').click(function(){    console.log($('#box1').prop('checked'))  //得到undefined    // 当然了,如果选中就是true,未中就是flase    //  $('input').prop('checked',true)    // 注意赋值时,也需要使用prop })</code></pre><h1 id="二、元素位置控制与获取"><a href="#二、元素位置控制与获取" class="headerlink" title="二、元素位置控制与获取"></a>二、元素位置控制与获取</h1><h2 id="1、原始css方法"><a href="#1、原始css方法" class="headerlink" title="1、原始css方法"></a>1、原始css方法</h2><p>以div属性如下：</p><pre><code>    .div{        background-color: aqua;        width: 200px;        height: 200px;        padding: 20px;        border: 10px solid;        margin: 20px;    }</code></pre><p>当通过css属性进行获取时：</p><p>获取div宽高：之前可以用css方法 </p><pre><code>$('div').css('height')  --得到‘200px’// 需要直接得到数值时：height,width  --- 直接获取宽高，不包括内外边距，边框</code></pre><p>所以需要其他的方式</p><h2 id="2、属性获取宽高"><a href="#2、属性获取宽高" class="headerlink" title="2、属性获取宽高"></a>2、属性获取宽高</h2><h3 id="（1）只获取宽高height-width"><a href="#（1）只获取宽高height-width" class="headerlink" title="（1）只获取宽高height,width"></a>（1）只获取宽高height,width</h3><pre><code>    console.log($('div').width())   //200</code></pre><p>注意加了参数可以进行设置 — 加上数值参数,可以写300 “200”，’200px’，例如：</p><pre><code>$('button').click(function(){    $('div').width('300px')})</code></pre><h3 id="（2）包括内边距时-–-innerWidth-innerHeight"><a href="#（2）包括内边距时-–-innerWidth-innerHeight" class="headerlink" title="（2）包括内边距时 – innerWidth()/innerHeight()"></a>（2）包括内边距时 – innerWidth()/innerHeight()</h3><pre><code> console.log($('div').innerWidth())  //240 = 200+20+20</code></pre><h3 id="（3）内外边距与边框时-–-outerWidth-outerHeight"><a href="#（3）内外边距与边框时-–-outerWidth-outerHeight" class="headerlink" title="（3）内外边距与边框时  – outerWidth,outerHeight"></a>（3）内外边距与边框时  – outerWidth,outerHeight</h3><h4 id="当没有参数时或者参数为false-—-内边距与边框"><a href="#当没有参数时或者参数为false-—-内边距与边框" class="headerlink" title="当没有参数时或者参数为false — 内边距与边框"></a>当没有参数时或者参数为false — 内边距与边框</h4><pre><code>  console.log($('div').outerWidth()) // 260 = 240 +10+10</code></pre><h4 id="当有参数为true—-外内边距与边框"><a href="#当有参数为true—-外内边距与边框" class="headerlink" title="当有参数为true— 外内边距与边框"></a>当有参数为true— 外内边距与边框</h4><pre><code>console.log($('div').outerWidth(true))// 300 = 260 +20+20</code></pre><h3 id="（4）获取网页的可视区域宽高"><a href="#（4）获取网页的可视区域宽高" class="headerlink" title="（4）获取网页的可视区域宽高"></a>（4）获取网页的可视区域宽高</h3><pre><code> console.log($(window).width())    console.log($(window).height())</code></pre><h2 id="3、属性获取位置"><a href="#3、属性获取位置" class="headerlink" title="3、属性获取位置"></a>3、属性获取位置</h2><h3 id="（1）获取元素距离document的位置offset"><a href="#（1）获取元素距离document的位置offset" class="headerlink" title="（1）获取元素距离document的位置offset()"></a>（1）获取元素距离document的位置offset()</h3><pre><code>$('.1btn').click(function(){    // 1、offset()  --- 获得一个对象，包含了letf与top的值，代表了元素距离document的位置    console.log($('.son').offset())})</code></pre><h3 id="（2）获取元素距离有定位的父级元的位置position"><a href="#（2）获取元素距离有定位的父级元的位置position" class="headerlink" title="（2）获取元素距离有定位的父级元的位置position()"></a>（2）获取元素距离有定位的父级元的位置position()</h3><pre><code>$('.2btn').click(function(){    console.log($('.son').position())})</code></pre><h3 id="（3）获取滚动条的位置-scrollLeft-scrollTop"><a href="#（3）获取滚动条的位置-scrollLeft-scrollTop" class="headerlink" title="（3）获取滚动条的位置 scrollLeft(),scrollTop()"></a>（3）获取滚动条的位置 scrollLeft(),scrollTop()</h3><p>获取：</p><pre><code>// 两者分别表示为元素内容被卷曲出去的宽度与高度！！即 = 元素总高度 - 展示的高度$('.btn').click(function(){    console.log($('.img1').scrollLeft()+'高度'+$('.img1').scrollTop())})</code></pre><p>设置</p><pre><code>// 参数加上值，代表元素被卷出去的距离,此时“100px”不行了$('.img1').scrollLeft('100')// 设置页面被卷曲的宽高,获取：// 当然了还要求window宽高大于可视区才会生效$(window).scrollLeft('100')$(window).scrollTop('410')</code></pre><h1 id="三、事件问题"><a href="#三、事件问题" class="headerlink" title="三、事件问题"></a>三、事件问题</h1><h2 id="1、on的事件委托注册"><a href="#1、on的事件委托注册" class="headerlink" title="1、on的事件委托注册"></a>1、on的事件委托注册</h2><p>jq 1.7之后，jq使用了on统一了所有事件的注册方式</p><p>但是on是简单注册事件，不支持动态注册，指的是新建一个div之后，不会有这个事件</p><pre><code> $('.div1').on('click',function(){     console.log('绑定了事件') })</code></pre><p>on进行事件委托注册  — 通过父元素进行0n函数，目标元素在div内</p><pre><code>// 支持动态注册，即添加的div也有有这个事件// 并且支持多个委托：//  $('body').on('click','div,span',function(){})$('body').on('click','div',function(){    console.log('绑定了事件')})</code></pre><p><a href="https://www.cnblogs.com/yueyuecoding/articles/13431551.html">on的详解</a></p><h2 id="2、off事件解绑"><a href="#2、off事件解绑" class="headerlink" title="2、off事件解绑"></a>2、off事件解绑</h2><pre><code>没有参数时，表示解绑所有的事件：$('.div1').off()解绑匹配元素的所有的click事件：$('.div1').off('click')</code></pre><h3 id="事件手动触发trigger-‘事件’"><a href="#事件手动触发trigger-‘事件’" class="headerlink" title="事件手动触发trigger(‘事件’)"></a>事件手动触发trigger(‘事件’)</h3><p>作用：</p><ul><li>用代码的方式触发事件：</li><li>并且触发自定义事件</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre><code>$('.btn1').click(function(){    $(".div2").trigger('click')    $(".div2").trigger('mouseenter')})</code></pre><p>自定义事件：</p><pre><code> // 这种触发器可以让一些没法触发的事件运行，比如$('.div1').on('linge',function(){    alert('我居然被触发了11')})$('.div1').on('aaa',function(){    alert('我是自己定义的事件')})// 当然了，如果元素本身不具有这个事件也是无法触发的// 其他的就算是自己定义的事件，也可以通过trigger进行触发$('.btn2').click(function(){    $(".div2").trigger('linge')    $(".div2").trigger('aaa')})</code></pre><h2 id="3、事件对象"><a href="#3、事件对象" class="headerlink" title="3、事件对象"></a>3、事件对象</h2><h3 id="（1）事件对象意义"><a href="#（1）事件对象意义" class="headerlink" title="（1）事件对象意义"></a>（1）事件对象意义</h3><p>注册一个事件，系统帮我们生成一个对象，记录这个事件触发时的一些信息，</p><p>比如触发事件的坐标信息，或者比如有没有按住什么键</p><p>jq中通过函数中的参数e（写别的也可以）获取</p><p>jq的事件对象，是对原生js事件对象的一个封装，帮你处理好了–兼容性</p><pre><code>$('.div1').click(function(e){    console.log(e)})</code></pre><h3 id="2-事件对象中的常用的坐标"><a href="#2-事件对象中的常用的坐标" class="headerlink" title="(2)事件对象中的常用的坐标"></a>(2)事件对象中的常用的坐标</h3><pre><code>$('.div1').click(function(e){    console.log(e)    console.log('screnX :'+ e.screenX+ '  clientX  '+e.clientX)})</code></pre><p>和你的点击位置也是有关的</p><p>screenX和screenY    触发事件那个点！！！对应屏幕最左上角的值    —这个是全部页面（屏幕），连上面导航都算</p><p>clientX和clientY    触发事件那个点！！！离页面左上角的位置（忽视滚动条）</p><p>pageX和pageY    距离页面最顶部的左上角的位置（会计算滚动条的距离）</p><h3 id="3-阻止行为"><a href="#3-阻止行为" class="headerlink" title="(3)阻止行为"></a>(3)阻止行为</h3><pre><code>event.stopPropagation()    阻止事件冒泡行为</code></pre><p>进行阻止冒泡：</p><pre><code>$('.btn1').click(function(e){    alert('s')e.stopPropagation()  //阻止之后，button的父元素div就不会因此被触发了})</code></pre><p>阻止默认行为</p><pre><code>event.preventDefault()    阻止浏览器默认行为,b比如阻止a的点击跳转</code></pre><p>   $(‘a’).click(function(e){<br>        alert(“能到百度吗”)<br>      //  return false:既能阻止事件冒泡，又能阻止浏览器默认行为。<br>     // return false  //相当于上面的两部<br>    })</p><h3 id="（4）return-false既能阻止事件冒泡，又能阻止浏览器默认行为。"><a href="#（4）return-false既能阻止事件冒泡，又能阻止浏览器默认行为。" class="headerlink" title="（4）return false既能阻止事件冒泡，又能阻止浏览器默认行为。"></a>（4）return false既能阻止事件冒泡，又能阻止浏览器默认行为。</h3><ul><li><p>event.keyCode    按下的键盘代码</p></li><li><p>event.data    存储绑定事件时传递的附加数据</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>  $(document).on(‘keydown’,function(e){</p><pre><code>  // e.keyCode获取按3的是那个键  alert(e.keyCode)</code></pre><p>  })</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、属性控制&quot;&gt;&lt;a href=&quot;#一、属性控制&quot; class=&quot;headerlink&quot; title=&quot;一、属性控制&quot;&gt;&lt;/a&gt;一、属性控制&lt;/h1&gt;&lt;h2 id=&quot;1、属性的设置与获取&quot;&gt;&lt;a href=&quot;#1、属性的设置与获取&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="jQuery" scheme="https://useritem.github.io/categories/jQuery/"/>
    
    
  </entry>
  
</feed>
